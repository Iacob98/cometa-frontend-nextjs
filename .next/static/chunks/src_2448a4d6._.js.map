{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-projects.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport {\n  projectsApi,\n  type Project,\n  type ProjectFilters,\n  type CreateProjectRequest,\n  type UpdateProjectRequest,\n  type PaginatedResponse,\n} from \"@/lib/api-client\";\n\n// Query keys\nexport const projectKeys = {\n  all: [\"projects\"] as const,\n  lists: () => [...projectKeys.all, \"list\"] as const,\n  list: (filters: ProjectFilters) => [...projectKeys.lists(), filters] as const,\n  details: () => [...projectKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...projectKeys.details(), id] as const,\n};\n\n// Hooks\nexport function useProjects(filters?: ProjectFilters) {\n  return useQuery({\n    queryKey: projectKeys.list(filters || {}),\n    queryFn: () => projectsApi.getProjects(filters),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useProject(id: string) {\n  return useQuery({\n    queryKey: projectKeys.detail(id),\n    queryFn: () => projectsApi.getProject(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useCreateProject() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: CreateProjectRequest) => projectsApi.createProject(data),\n    onSuccess: (newProject) => {\n      // Invalidate and refetch projects list\n      queryClient.invalidateQueries({ queryKey: projectKeys.lists() });\n\n      // Add the new project to the cache\n      queryClient.setQueryData(projectKeys.detail(newProject.id), newProject);\n\n      toast.success(\"Project created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create project: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateProject() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdateProjectRequest }) =>\n      projectsApi.updateProject(id, data),\n    onMutate: async ({ id, data }) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: projectKeys.detail(id) });\n\n      // Snapshot the previous value\n      const previousProject = queryClient.getQueryData(projectKeys.detail(id));\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(projectKeys.detail(id), (old: Project | undefined) => {\n        if (!old) return old;\n        return { ...old, ...data };\n      });\n\n      // Return a context object with the snapshotted value\n      return { previousProject };\n    },\n    onError: (error, { id }, context) => {\n      // If the mutation fails, use the context returned from onMutate to roll back\n      if (context?.previousProject) {\n        queryClient.setQueryData(projectKeys.detail(id), context.previousProject);\n      }\n      toast.error(`Failed to update project: ${error.message}`);\n    },\n    onSuccess: (updatedProject) => {\n      // Invalidate and refetch projects list\n      queryClient.invalidateQueries({ queryKey: projectKeys.lists() });\n      toast.success(\"Project updated successfully\");\n    },\n    onSettled: (data, error, { id }) => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: projectKeys.detail(id) });\n    },\n  });\n}\n\nexport function useDeleteProject() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => projectsApi.deleteProject(id),\n    onSuccess: (_, deletedId) => {\n      // Remove from cache\n      queryClient.removeQueries({ queryKey: projectKeys.detail(deletedId) });\n\n      // Invalidate projects list\n      queryClient.invalidateQueries({ queryKey: projectKeys.lists() });\n\n      toast.success(\"Project deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete project: ${error.message}`);\n    },\n  });\n}\n\n// Optimistic mutations for better UX\nexport function useOptimisticProjectUpdate() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Project> }) =>\n      projectsApi.updateProject(id, data),\n    onMutate: async ({ id, data }) => {\n      await queryClient.cancelQueries({ queryKey: projectKeys.detail(id) });\n\n      const previousProject = queryClient.getQueryData(projectKeys.detail(id));\n\n      queryClient.setQueryData(projectKeys.detail(id), (old: Project | undefined) => {\n        if (!old) return old;\n        return { ...old, ...data };\n      });\n\n      // Also update in lists if present\n      queryClient.setQueriesData(\n        { queryKey: projectKeys.lists() },\n        (old: PaginatedResponse<Project> | undefined) => {\n          if (!old) return old;\n\n          return {\n            ...old,\n            items: old.items.map((project) =>\n              project.id === id ? { ...project, ...data } : project\n            ),\n          };\n        }\n      );\n\n      return { previousProject };\n    },\n    onError: (error, { id }, context) => {\n      if (context?.previousProject) {\n        queryClient.setQueryData(projectKeys.detail(id), context.previousProject);\n      }\n      // Invalidate lists to revert optimistic updates\n      queryClient.invalidateQueries({ queryKey: projectKeys.lists() });\n      toast.error(`Failed to update project: ${error.message}`);\n    },\n    onSuccess: () => {\n      toast.success(\"Project updated successfully\");\n    },\n  });\n}\n\n// Project statistics hook\nexport interface ProjectStats {\n  progress: {\n    totalLength: number;\n    completedLength: number;\n    progressPercentage: number;\n    workEntries: number;\n    pendingApprovals: number;\n    teamMembers: number;\n    materialsCount: number;\n  };\n  phase: {\n    currentPhase: number;\n    totalPhases: number;\n    phaseName: string;\n    phaseProgress: number;\n  };\n  financial: {\n    projectBudget: number;\n    totalSpent: number;\n    spentPercentage: number;\n    remainingBudget: number;\n  };\n}\n\nexport function useProjectStats(projectId: string) {\n  return useQuery({\n    queryKey: [...projectKeys.detail(projectId), \"stats\"],\n    queryFn: async (): Promise<ProjectStats> => {\n      const response = await fetch(`/api/projects/${projectId}/stats`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch project statistics');\n      }\n      return response.json();\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes - stats change more frequently\n    enabled: !!projectId,\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-work-entries.ts"],"sourcesContent":["'use client';\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\n\nexport interface WorkEntry {\n  id: string;\n  project_id: string;\n  cabinet_id?: string | null;\n  segment_id?: string | null;\n  cut_id?: string | null;\n  house_id?: string | null;\n  crew_id?: string | null;\n  user_id?: string | null;\n  date: string;\n  stage_code: string;\n  meters_done_m: number;\n  method?: string | null;\n  width_m?: number | null;\n  depth_m?: number | null;\n  cables_count?: number | null;\n  has_protection_pipe: boolean;\n  soil_type?: string | null;\n  notes?: string | null;\n  approved_by?: string | null;\n  approved_at?: string | null;\n  project_name?: string | null;\n  crew_name?: string | null;\n  worker_name?: string | null;\n  approver_name?: string | null;\n  cabinet_name?: string | null;\n  segment_name?: string | null;\n  cut_name?: string | null;\n  house_address?: string | null;\n}\n\nexport interface WorkEntriesResponse {\n  items: WorkEntry[];\n  total: number;\n  page: number;\n  per_page: number;\n  total_pages: number;\n}\n\nexport interface WorkEntryFilters {\n  project_id?: string;\n  crew_id?: string;\n  user_id?: string;\n  stage_code?: string;\n  approved?: string;\n  page?: number;\n  per_page?: number;\n}\n\nexport interface CreateWorkEntryData {\n  project_id: string;\n  cabinet_id?: string;\n  segment_id?: string;\n  cut_id?: string;\n  house_id?: string;\n  crew_id?: string;\n  user_id?: string;\n  date: string;\n  stage_code: string;\n  meters_done_m: number;\n  method?: string;\n  width_m?: number;\n  depth_m?: number;\n  cables_count?: number;\n  has_protection_pipe?: boolean;\n  soil_type?: string;\n  notes?: string;\n}\n\n// Query keys\nexport const workEntryKeys = {\n  all: [\"work-entries\"] as const,\n  lists: () => [...workEntryKeys.all, \"list\"] as const,\n  list: (filters: WorkEntryFilters) => [...workEntryKeys.lists(), filters] as const,\n  details: () => [...workEntryKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...workEntryKeys.details(), id] as const,\n  stages: () => [...workEntryKeys.all, \"stages\"] as const,\n};\n\n// Fetch work entries with filters\nexport function useWorkEntries(filters: WorkEntryFilters = {}) {\n  const searchParams = new URLSearchParams();\n\n  Object.entries(filters).forEach(([key, value]) => {\n    if (value !== undefined && value !== null && value !== '') {\n      searchParams.append(key, value.toString());\n    }\n  });\n\n  return useQuery({\n    queryKey: workEntryKeys.list(filters),\n    queryFn: async (): Promise<WorkEntriesResponse> => {\n      const response = await fetch(`/api/work-entries?${searchParams.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch work entries');\n      }\n      return response.json();\n    },\n  });\n}\n\n// Fetch single work entry\nexport function useWorkEntry(id: string) {\n  return useQuery({\n    queryKey: workEntryKeys.detail(id),\n    queryFn: async (): Promise<WorkEntry> => {\n      const response = await fetch(`/api/work-entries/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch work entry');\n      }\n      return response.json();\n    },\n    enabled: !!id,\n  });\n}\n\n// Create work entry\nexport function useCreateWorkEntry() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: CreateWorkEntryData) => {\n      const response = await fetch('/api/work-entries', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create work entry');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: workEntryKeys.lists() });\n      toast.success('Work entry created successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\n// Update work entry\nexport function useUpdateWorkEntry(id: string) {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: Partial<CreateWorkEntryData>) => {\n      const response = await fetch(`/api/work-entries/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update work entry');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: workEntryKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: workEntryKeys.detail(id) });\n      toast.success('Work entry updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\n// Delete work entry\nexport function useDeleteWorkEntry() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/work-entries/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to delete work entry');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: workEntryKeys.lists() });\n      toast.success('Work entry deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\n// Approve work entry\nexport function useApproveWorkEntry() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/work-entries/${id}/approve`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to approve work entry');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: workEntryKeys.lists() });\n      toast.success('Work entry approved successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\n// Fetch pending approvals\nexport function usePendingApprovals() {\n  return useWorkEntries({\n    approved: 'false',\n    page: 1,\n    per_page: 50,\n  });\n}\n\n// Specialized hooks for common use cases\nexport function useProjectWorkEntries(projectId?: string) {\n  return useWorkEntries({\n    project_id: projectId,\n    page: 1,\n    per_page: 20,\n  });\n}\n\nexport function useUserWorkEntries(userId?: string) {\n  return useWorkEntries({\n    user_id: userId,\n    page: 1,\n    per_page: 20,\n  });\n}\n\nexport function useCrewWorkEntries(crewId?: string) {\n  return useWorkEntries({\n    crew_id: crewId,\n    page: 1,\n    per_page: 20,\n  });\n}\n\n// Fetch work stages/stage codes\nexport function useWorkStages() {\n  return useQuery({\n    queryKey: workEntryKeys.stages(),\n    queryFn: async () => {\n      const response = await fetch('/api/work-stages');\n      if (!response.ok) {\n        throw new Error('Failed to fetch work stages');\n      }\n      return response.json();\n    },\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AACA;;AAHA;;;AA2EO,MAAM,gBAAgB;IAC3B,KAAK;QAAC;KAAe;IACrB,OAAO,IAAM;eAAI,cAAc,GAAG;YAAE;SAAO;IAC3C,MAAM,CAAC,UAA8B;eAAI,cAAc,KAAK;YAAI;SAAQ;IACxE,SAAS,IAAM;eAAI,cAAc,GAAG;YAAE;SAAS;IAC/C,QAAQ,CAAC,KAAe;eAAI,cAAc,OAAO;YAAI;SAAG;IACxD,QAAQ,IAAM;eAAI,cAAc,GAAG;YAAE;SAAS;AAChD;AAGO,SAAS;QAAe,UAAA,iEAA4B,CAAC;;IAC1D,MAAM,eAAe,IAAI;IAEzB,OAAO,OAAO,CAAC,SAAS,OAAO,CAAC;YAAC,CAAC,KAAK,MAAM;QAC3C,IAAI,UAAU,aAAa,UAAU,QAAQ,UAAU,IAAI;YACzD,aAAa,MAAM,CAAC,KAAK,MAAM,QAAQ;QACzC;IACF;IAEA,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU,cAAc,IAAI,CAAC;QAC7B,OAAO;uCAAE;gBACP,MAAM,WAAW,MAAM,MAAM,AAAC,qBAA4C,OAAxB,aAAa,QAAQ;gBACvE,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,IAAI,MAAM;gBAClB;gBACA,OAAO,SAAS,IAAI;YACtB;;IACF;AACF;GAnBgB;;QASP,0LAAQ;;;AAaV,SAAS,aAAa,EAAU;;IACrC,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU,cAAc,MAAM,CAAC;QAC/B,OAAO;qCAAE;gBACP,MAAM,WAAW,MAAM,MAAM,AAAC,qBAAuB,OAAH;gBAClD,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,IAAI,MAAM;gBAClB;gBACA,OAAO,SAAS,IAAI;YACtB;;QACA,SAAS,CAAC,CAAC;IACb;AACF;IAZgB;;QACP,0LAAQ;;;AAcV,SAAS;;IACd,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;8CAAE,OAAO;gBACjB,MAAM,WAAW,MAAM,MAAM,qBAAqB;oBAChD,QAAQ;oBACR,SAAS;wBACP,gBAAgB;oBAClB;oBACA,MAAM,KAAK,SAAS,CAAC;gBACvB;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;oBACjC,MAAM,IAAI,MAAM,MAAM,KAAK,IAAI;gBACjC;gBAEA,OAAO,SAAS,IAAI;YACtB;;QACA,SAAS;8CAAE;gBACT,YAAY,iBAAiB,CAAC;oBAAE,UAAU,cAAc,KAAK;gBAAG;gBAChE,oJAAK,CAAC,OAAO,CAAC;YAChB;;QACA,OAAO;8CAAE,CAAC;gBACR,oJAAK,CAAC,KAAK,CAAC,MAAM,OAAO;YAC3B;;IACF;AACF;IA5BgB;;QACM,2MAAc;QAE3B,gMAAW;;;AA4Bb,SAAS,mBAAmB,EAAU;;IAC3C,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;8CAAE,OAAO;gBACjB,MAAM,WAAW,MAAM,MAAM,AAAC,qBAAuB,OAAH,KAAM;oBACtD,QAAQ;oBACR,SAAS;wBACP,gBAAgB;oBAClB;oBACA,MAAM,KAAK,SAAS,CAAC;gBACvB;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;oBACjC,MAAM,IAAI,MAAM,MAAM,KAAK,IAAI;gBACjC;gBAEA,OAAO,SAAS,IAAI;YACtB;;QACA,SAAS;8CAAE;gBACT,YAAY,iBAAiB,CAAC;oBAAE,UAAU,cAAc,KAAK;gBAAG;gBAChE,YAAY,iBAAiB,CAAC;oBAAE,UAAU,cAAc,MAAM,CAAC;gBAAI;gBACnE,oJAAK,CAAC,OAAO,CAAC;YAChB;;QACA,OAAO;8CAAE,CAAC;gBACR,oJAAK,CAAC,KAAK,CAAC,MAAM,OAAO;YAC3B;;IACF;AACF;IA7BgB;;QACM,2MAAc;QAE3B,gMAAW;;;AA6Bb,SAAS;;IACd,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;8CAAE,OAAO;gBACjB,MAAM,WAAW,MAAM,MAAM,AAAC,qBAAuB,OAAH,KAAM;oBACtD,QAAQ;gBACV;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;oBACjC,MAAM,IAAI,MAAM,MAAM,KAAK,IAAI;gBACjC;gBAEA,OAAO,SAAS,IAAI;YACtB;;QACA,SAAS;8CAAE;gBACT,YAAY,iBAAiB,CAAC;oBAAE,UAAU,cAAc,KAAK;gBAAG;gBAChE,oJAAK,CAAC,OAAO,CAAC;YAChB;;QACA,OAAO;8CAAE,CAAC;gBACR,oJAAK,CAAC,KAAK,CAAC,MAAM,OAAO;YAC3B;;IACF;AACF;IAxBgB;;QACM,2MAAc;QAE3B,gMAAW;;;AAwBb,SAAS;;IACd,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;+CAAE,OAAO;gBACjB,MAAM,WAAW,MAAM,MAAM,AAAC,qBAAuB,OAAH,IAAG,aAAW;oBAC9D,QAAQ;oBACR,SAAS;wBACP,gBAAgB;oBAClB;gBACF;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;oBACjC,MAAM,IAAI,MAAM,MAAM,KAAK,IAAI;gBACjC;gBAEA,OAAO,SAAS,IAAI;YACtB;;QACA,SAAS;+CAAE;gBACT,YAAY,iBAAiB,CAAC;oBAAE,UAAU,cAAc,KAAK;gBAAG;gBAChE,oJAAK,CAAC,OAAO,CAAC;YAChB;;QACA,OAAO;+CAAE,CAAC;gBACR,oJAAK,CAAC,KAAK,CAAC,MAAM,OAAO;YAC3B;;IACF;AACF;IA3BgB;;QACM,2MAAc;QAE3B,gMAAW;;;AA2Bb,SAAS;;IACd,OAAO,eAAe;QACpB,UAAU;QACV,MAAM;QACN,UAAU;IACZ;AACF;IANgB;;QACP;;;AAQF,SAAS,sBAAsB,SAAkB;;IACtD,OAAO,eAAe;QACpB,YAAY;QACZ,MAAM;QACN,UAAU;IACZ;AACF;IANgB;;QACP;;;AAOF,SAAS,mBAAmB,MAAe;;IAChD,OAAO,eAAe;QACpB,SAAS;QACT,MAAM;QACN,UAAU;IACZ;AACF;IANgB;;QACP;;;AAOF,SAAS,mBAAmB,MAAe;;IAChD,OAAO,eAAe;QACpB,SAAS;QACT,MAAM;QACN,UAAU;IACZ;AACF;IANgB;;QACP;;;AAQF,SAAS;;IACd,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU,cAAc,MAAM;QAC9B,OAAO;sCAAE;gBACP,MAAM,WAAW,MAAM,MAAM;gBAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,IAAI,MAAM;gBAClB;gBACA,OAAO,SAAS,IAAI;YACtB;;QACA,WAAW,KAAK,KAAK;IACvB;AACF;KAZgB;;QACP,0LAAQ","debugId":null}},
    {"offset": {"line": 674, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-crews.ts"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\n\nexport interface Crew {\n  id: string;\n  name: string;\n  project_id?: string;\n  foreman_user_id?: string;\n  project_name?: string;\n  foreman_name?: string;\n  member_count: number;\n}\n\nconst api = {\n  getCrews: async (): Promise<Crew[]> => {\n    const response = await fetch('/api/crews');\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch crews');\n    }\n\n    return response.json();\n  },\n};\n\nexport function useCrews() {\n  return useQuery({\n    queryKey: ['crews'],\n    queryFn: api.getCrews,\n  });\n}"],"names":[],"mappings":";;;;AAAA;;;AAYA,MAAM,MAAM;IACV,UAAU;QACR,MAAM,WAAW,MAAM,MAAM;QAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,SAAS,IAAI;IACtB;AACF;AAEO,SAAS;;IACd,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU;YAAC;SAAQ;QACnB,SAAS,IAAI,QAAQ;IACvB;AACF;GALgB;;QACP,0LAAQ","debugId":null}},
    {"offset": {"line": 711, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-financial.ts"],"sourcesContent":["'use client';\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\nimport type {\n  Transaction,\n  CreateTransactionRequest,\n  FinancialFilters,\n  FinancialSummary\n} from '@/types';\n\nexport interface TransactionsResponse {\n  transactions: Transaction[];\n  total: number;\n  page: number;\n  per_page: number;\n  total_pages: number;\n}\n\n// Query keys\nexport const financialKeys = {\n  all: ['financial'] as const,\n  transactions: () => [...financialKeys.all, 'transactions'] as const,\n  transactionsList: (filters: FinancialFilters) => [...financialKeys.transactions(), filters] as const,\n  summary: (filters: Omit<FinancialFilters, 'page' | 'per_page'>) =>\n    [...financialKeys.all, 'summary', filters] as const,\n};\n\n// Fetch transactions with filters\nexport function useTransactions(filters: FinancialFilters = {}) {\n  const searchParams = new URLSearchParams();\n\n  Object.entries(filters).forEach(([key, value]) => {\n    if (value !== undefined && value !== null && value !== '') {\n      searchParams.append(key, value.toString());\n    }\n  });\n\n  return useQuery({\n    queryKey: financialKeys.transactionsList(filters),\n    queryFn: async (): Promise<TransactionsResponse> => {\n      const response = await fetch(`/api/transactions?${searchParams.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch transactions');\n      }\n      return response.json();\n    },\n  });\n}\n\n// Fetch financial summary\nexport function useFinancialSummary(filters: Omit<FinancialFilters, 'page' | 'per_page'> = {}) {\n  const searchParams = new URLSearchParams();\n\n  Object.entries(filters).forEach(([key, value]) => {\n    if (value !== undefined && value !== null && value !== '') {\n      searchParams.append(key, value.toString());\n    }\n  });\n\n  return useQuery({\n    queryKey: financialKeys.summary(filters),\n    queryFn: async (): Promise<FinancialSummary> => {\n      const response = await fetch(`/api/financial/summary?${searchParams.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch financial summary');\n      }\n      return response.json();\n    },\n  });\n}\n\n// Create new transaction\nexport function useCreateTransaction() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: CreateTransactionRequest) => {\n      const response = await fetch('/api/transactions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create transaction');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all financial queries to refresh data\n      queryClient.invalidateQueries({ queryKey: financialKeys.all });\n      toast.success('Transaction created successfully');\n    },\n    onError: (error: Error) => {\n      console.error('Failed to create transaction:', error);\n      toast.error(error.message || 'Failed to create transaction');\n    },\n  });\n}\n\n// Specialized hooks for common use cases\nexport function useProjectTransactions(projectId?: string) {\n  return useTransactions({\n    project_id: projectId,\n    page: 1,\n    per_page: 20,\n  });\n}\n\nexport function useRecentTransactions(limit = 10) {\n  return useTransactions({\n    page: 1,\n    per_page: limit,\n  });\n}\n\nexport function useExpensesByCategory(category?: string) {\n  return useTransactions({\n    type: 'expense',\n    category: category as any,\n    page: 1,\n    per_page: 50,\n  });\n}\n\nexport function useIncomeTransactions() {\n  return useTransactions({\n    type: 'income',\n    page: 1,\n    per_page: 50,\n  });\n}\n\nexport function usePendingTransactions() {\n  return useTransactions({\n    approved: false,\n    page: 1,\n    per_page: 50,\n  });\n}\n\n// Transaction categories for filtering and forms\nexport const TRANSACTION_CATEGORIES = [\n  'material_cost',\n  'equipment_rental',\n  'labor_cost',\n  'vehicle_expense',\n  'fuel',\n  'maintenance',\n  'insurance',\n  'permit_fee',\n  'subcontractor',\n  'overtime',\n  'bonus',\n  'fine',\n  'utility',\n  'office_expense',\n  'travel',\n  'accommodation',\n  'meal',\n  'communication',\n  'software_license',\n  'training',\n  'safety_equipment',\n  'other',\n] as const;\n\nexport type TransactionCategory = typeof TRANSACTION_CATEGORIES[number];\n\n// Payment methods\nexport const PAYMENT_METHODS = [\n  'cash',\n  'bank_transfer',\n  'credit_card',\n  'check',\n  'invoice',\n] as const;\n\nexport type PaymentMethod = typeof PAYMENT_METHODS[number];\n\n// Helper function to get category label\nexport function getCategoryLabel(category: string): string {\n  const labels: Record<string, string> = {\n    material_cost: 'Material Cost',\n    equipment_rental: 'Equipment Rental',\n    labor_cost: 'Labor Cost',\n    vehicle_expense: 'Vehicle Expense',\n    fuel: 'Fuel',\n    maintenance: 'Maintenance',\n    insurance: 'Insurance',\n    permit_fee: 'Permit Fee',\n    subcontractor: 'Subcontractor',\n    overtime: 'Overtime',\n    bonus: 'Bonus',\n    fine: 'Fine',\n    utility: 'Utility',\n    office_expense: 'Office Expense',\n    travel: 'Travel',\n    accommodation: 'Accommodation',\n    meal: 'Meal',\n    communication: 'Communication',\n    software_license: 'Software License',\n    training: 'Training',\n    safety_equipment: 'Safety Equipment',\n    other: 'Other',\n  };\n\n  return labels[category] || category.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\n// Helper function to get category color\nexport function getCategoryColor(category: string): string {\n  const colors: Record<string, string> = {\n    material_cost: 'bg-blue-100 text-blue-800',\n    equipment_rental: 'bg-purple-100 text-purple-800',\n    labor_cost: 'bg-green-100 text-green-800',\n    vehicle_expense: 'bg-orange-100 text-orange-800',\n    fuel: 'bg-red-100 text-red-800',\n    maintenance: 'bg-yellow-100 text-yellow-800',\n    insurance: 'bg-indigo-100 text-indigo-800',\n    permit_fee: 'bg-pink-100 text-pink-800',\n    subcontractor: 'bg-teal-100 text-teal-800',\n    overtime: 'bg-emerald-100 text-emerald-800',\n    bonus: 'bg-cyan-100 text-cyan-800',\n    fine: 'bg-rose-100 text-rose-800',\n    utility: 'bg-slate-100 text-slate-800',\n    office_expense: 'bg-zinc-100 text-zinc-800',\n    travel: 'bg-violet-100 text-violet-800',\n    accommodation: 'bg-fuchsia-100 text-fuchsia-800',\n    meal: 'bg-lime-100 text-lime-800',\n    communication: 'bg-sky-100 text-sky-800',\n    software_license: 'bg-amber-100 text-amber-800',\n    training: 'bg-stone-100 text-stone-800',\n    safety_equipment: 'bg-neutral-100 text-neutral-800',\n    other: 'bg-gray-100 text-gray-800',\n  };\n\n  return colors[category] || 'bg-gray-100 text-gray-800';\n}\n\n// Helper function to get payment method label\nexport function getPaymentMethodLabel(method: string): string {\n  const labels: Record<string, string> = {\n    cash: 'Cash',\n    bank_transfer: 'Bank Transfer',\n    credit_card: 'Credit Card',\n    check: 'Check',\n    invoice: 'Invoice',\n  };\n\n  return labels[method] || method.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\n// Helper function to format currency\nexport function formatCurrency(amount: number, currency = 'EUR'): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n}\n\n// Helper function to get transaction type color\nexport function getTransactionTypeColor(type: string): string {\n  switch (type) {\n    case 'income':\n      return 'text-green-600';\n    case 'expense':\n      return 'text-red-600';\n    case 'transfer':\n      return 'text-blue-600';\n    default:\n      return 'text-gray-600';\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1059, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-materials.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport {\n  materialsApi,\n  suppliersApi,\n  materialAllocationsApi,\n  materialOrdersApi,\n  type Material,\n  type Supplier,\n  type MaterialAllocation,\n  type MaterialOrder,\n  type MaterialFilters,\n  type AllocationFilters,\n  type OrderFilters,\n  type AllocationRequest,\n  type MaterialOrderStatus,\n  type PaginatedResponse,\n} from \"@/lib/api-client\";\n\n// Query keys\nexport const materialKeys = {\n  all: [\"materials\"] as const,\n  lists: () => [...materialKeys.all, \"list\"] as const,\n  list: (filters: MaterialFilters) => [...materialKeys.lists(), filters] as const,\n  details: () => [...materialKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...materialKeys.details(), id] as const,\n  lowStock: () => [...materialKeys.all, \"low-stock\"] as const,\n};\n\nexport const supplierKeys = {\n  all: [\"suppliers\"] as const,\n  lists: () => [...supplierKeys.all, \"list\"] as const,\n  details: () => [...supplierKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...supplierKeys.details(), id] as const,\n};\n\nexport const allocationKeys = {\n  all: [\"allocations\"] as const,\n  lists: () => [...allocationKeys.all, \"list\"] as const,\n  list: (filters: AllocationFilters) => [...allocationKeys.lists(), filters] as const,\n  details: () => [...allocationKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...allocationKeys.details(), id] as const,\n};\n\nexport const orderKeys = {\n  all: [\"orders\"] as const,\n  lists: () => [...orderKeys.all, \"list\"] as const,\n  list: (filters: OrderFilters) => [...orderKeys.lists(), filters] as const,\n  details: () => [...orderKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...orderKeys.details(), id] as const,\n};\n\n// Centralized cache invalidation function for all material-related queries\nexport function invalidateAllMaterialQueries(queryClient: any) {\n  // Invalidate all material queries\n  queryClient.invalidateQueries({ queryKey: materialKeys.all });\n  queryClient.invalidateQueries({ queryKey: allocationKeys.all });\n  queryClient.invalidateQueries({ queryKey: orderKeys.all });\n\n  // Invalidate unified material views\n  queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n  queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n\n  // Force refetch critical queries\n  queryClient.refetchQueries({\n    queryKey: [...materialKeys.all, \"unified-warehouse\"],\n    type: 'active'\n  });\n}\n\n// Unified Material Hooks with consistent data source\nexport function useMaterials(filters?: MaterialFilters) {\n  return useQuery({\n    queryKey: materialKeys.list(filters || {}),\n    queryFn: () => materialsApi.getMaterials(filters),\n    staleTime: 2 * 60 * 1000, // 2 minutes - shorter for inventory accuracy\n  });\n}\n\nexport function useMaterial(id: string) {\n  return useQuery({\n    queryKey: materialKeys.detail(id),\n    queryFn: () => materialsApi.getMaterial(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  });\n}\n\nexport function useLowStockMaterials() {\n  return useQuery({\n    queryKey: materialKeys.lowStock(),\n    queryFn: async () => {\n      const response = await fetch('/api/materials/low-stock');\n      if (!response.ok) {\n        throw new Error('Failed to fetch low stock materials');\n      }\n      const data = await response.json();\n      return data.materials || []; // Extract materials array from API response\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes - more frequent updates for stock alerts\n  });\n}\n\n// Unified Warehouse Materials Hook - Single source of truth for inventory\nexport function useUnifiedWarehouseMaterials() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"unified-warehouse\"],\n    queryFn: async () => {\n      const response = await fetch('/api/materials/unified?view=warehouse');\n      if (!response.ok) {\n        throw new Error('Failed to fetch warehouse materials');\n      }\n      const data = await response.json();\n      return data.materials || [];\n    },\n    staleTime: 30 * 1000, // 30 seconds for faster updates\n    gcTime: 5 * 60 * 1000, // Keep in cache for 5 minutes\n    refetchOnWindowFocus: true, // Refetch when user returns to window\n    refetchInterval: 60 * 1000, // Auto-refetch every minute\n  });\n}\n\n// Project Material Allocations Hook with unified data\nexport function useUnifiedProjectMaterials(projectId: string) {\n  return useQuery({\n    queryKey: [...allocationKeys.all, \"project\", projectId, \"unified\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/materials/unified?view=project_allocations&project_id=${projectId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch project materials');\n      }\n      const data = await response.json();\n      return { materials: data.materials || [], summary: data.allocation_summary };\n    },\n    enabled: !!projectId,\n    staleTime: 1 * 60 * 1000, // 1 minute\n    gcTime: 5 * 60 * 1000,\n  });\n}\n\n// Material Allocation Targets Hook\nexport function useMaterialAllocationTargets() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"allocation-targets\"],\n    queryFn: async () => {\n      const response = await fetch('/api/materials/unified?view=allocation_targets');\n      if (!response.ok) {\n        throw new Error('Failed to fetch allocation targets');\n      }\n      const data = await response.json();\n      return data.materials || [];\n    },\n    staleTime: 30 * 1000, // 30 seconds for responsive allocation targets\n    refetchOnWindowFocus: true,\n  });\n}\n\nexport function useCreateMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<Material>) => materialsApi.createMaterial(data),\n    onSuccess: (newMaterial) => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.setQueryData(materialKeys.detail(newMaterial.id), newMaterial);\n      toast.success(\"Material created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create material: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Material> }) =>\n      materialsApi.updateMaterial(id, data),\n    onMutate: async ({ id, data }) => {\n      await queryClient.cancelQueries({ queryKey: materialKeys.detail(id) });\n      const previousMaterial = queryClient.getQueryData(materialKeys.detail(id));\n\n      queryClient.setQueryData(materialKeys.detail(id), (old: Material | undefined) => {\n        if (!old) return old;\n        return { ...old, ...data };\n      });\n\n      return { previousMaterial };\n    },\n    onError: (error, { id }, context) => {\n      if (context?.previousMaterial) {\n        queryClient.setQueryData(materialKeys.detail(id), context.previousMaterial);\n      }\n      toast.error(`Failed to update material: ${error.message}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      toast.success(\"Material updated successfully\");\n    },\n    onSettled: (data, error, { id }) => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.detail(id) });\n    },\n  });\n}\n\nexport function useDeleteMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => materialsApi.deleteMaterial(id),\n    onSuccess: (_, deletedId) => {\n      queryClient.removeQueries({ queryKey: materialKeys.detail(deletedId) });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      toast.success(\"Material deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete material: ${error.message}`);\n    },\n  });\n}\n\nexport function useAdjustStock() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, adjustment }: { id: string; adjustment: { quantity: number; reason: string } }) =>\n      materialsApi.adjustStock(id, adjustment),\n    onSuccess: (updatedMaterial) => {\n      queryClient.setQueryData(materialKeys.detail(updatedMaterial.id), updatedMaterial);\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      // Invalidate unified warehouse and allocation views\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n      toast.success(\"Stock adjusted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to adjust stock: ${error.message}`);\n    },\n  });\n}\n\n// Material Consumption Hook\nexport function useConsumeMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: {\n      allocation_id: string;\n      consumed_qty: number;\n      work_entry_id?: string;\n      notes?: string\n    }) => {\n      return fetch('/api/materials/consume', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      }).then(response => {\n        if (!response.ok) {\n          return response.json().then(err => Promise.reject(new Error(err.error || 'Failed to consume material')));\n        }\n        return response.json();\n      });\n    },\n    onSuccess: (result, variables) => {\n      // Invalidate all material-related queries to ensure consistency\n      queryClient.invalidateQueries({ queryKey: materialKeys.all });\n      queryClient.invalidateQueries({ queryKey: [...allocationKeys.all] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n\n      // If we know the project, invalidate project-specific queries\n      if (variables.work_entry_id) {\n        queryClient.invalidateQueries({ queryKey: [...allocationKeys.all, \"project\"] });\n      }\n\n      toast.success(result.message || \"Material consumed successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to consume material: ${error.message}`);\n    },\n  });\n}\n\n// Supplier Hooks\nexport function useSuppliers() {\n  return useQuery({\n    queryKey: supplierKeys.lists(),\n    queryFn: () => suppliersApi.getSuppliers(),\n    staleTime: 10 * 60 * 1000, // 10 minutes - suppliers change less frequently\n  });\n}\n\nexport function useSupplier(id: string) {\n  return useQuery({\n    queryKey: supplierKeys.detail(id),\n    queryFn: () => suppliersApi.getSupplier(id),\n    enabled: !!id,\n    staleTime: 10 * 60 * 1000,\n  });\n}\n\nexport function useCreateSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<Supplier>) => suppliersApi.createSupplier(data),\n    onSuccess: (newSupplier) => {\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      queryClient.setQueryData(supplierKeys.detail(newSupplier.id), newSupplier);\n      toast.success(\"Supplier created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create supplier: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Supplier> }) =>\n      suppliersApi.updateSupplier(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      toast.success(\"Supplier updated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to update supplier: ${error.message}`);\n    },\n  });\n}\n\nexport function useDeleteSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => suppliersApi.deleteSupplier(id),\n    onSuccess: (_, deletedId) => {\n      queryClient.removeQueries({ queryKey: supplierKeys.detail(deletedId) });\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      toast.success(\"Supplier deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete supplier: ${error.message}`);\n    },\n  });\n}\n\n// Allocation Hooks\nexport function useAllocations(filters?: AllocationFilters) {\n  return useQuery({\n    queryKey: allocationKeys.list(filters || {}),\n    queryFn: () => materialAllocationsApi.getAllocations(filters),\n    staleTime: 2 * 60 * 1000, // 2 minutes - allocations change frequently\n  });\n}\n\nexport function useAllocation(id: string) {\n  return useQuery({\n    queryKey: allocationKeys.detail(id),\n    queryFn: () => materialAllocationsApi.getAllocation(id),\n    enabled: !!id,\n    staleTime: 2 * 60 * 1000,\n  });\n}\n\nexport function useCreateAllocation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: AllocationRequest) => materialAllocationsApi.createAllocation(data),\n    onSuccess: (newAllocation) => {\n      queryClient.invalidateQueries({ queryKey: allocationKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      queryClient.setQueryData(allocationKeys.detail(newAllocation.id), newAllocation);\n      toast.success(\"Material allocated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to allocate material: ${error.message}`);\n    },\n  });\n}\n\nexport function useRecordUsage() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, usage }: { id: string; usage: { used_qty: number; notes?: string } }) =>\n      materialAllocationsApi.recordUsage(id, usage),\n    onSuccess: (updatedAllocation) => {\n      queryClient.setQueryData(allocationKeys.detail(updatedAllocation.id), updatedAllocation);\n      queryClient.invalidateQueries({ queryKey: allocationKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      toast.success(\"Usage recorded successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to record usage: ${error.message}`);\n    },\n  });\n}\n\n// Order Hooks\nexport function useOrders(filters?: OrderFilters) {\n  return useQuery({\n    queryKey: orderKeys.list(filters || {}),\n    queryFn: () => materialOrdersApi.getOrders(filters),\n    staleTime: 3 * 60 * 1000, // 3 minutes\n  });\n}\n\nexport function useOrder(id: string) {\n  return useQuery({\n    queryKey: orderKeys.detail(id),\n    queryFn: () => materialOrdersApi.getOrder(id),\n    enabled: !!id,\n    staleTime: 3 * 60 * 1000,\n  });\n}\n\nexport function useCreateOrder() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<MaterialOrder>) => materialOrdersApi.createOrder(data),\n    onSuccess: (newOrder) => {\n      queryClient.invalidateQueries({ queryKey: orderKeys.lists() });\n      queryClient.setQueryData(orderKeys.detail(newOrder.id), newOrder);\n      toast.success(\"Order created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create order: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateOrderStatus() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, status }: { id: string; status: MaterialOrderStatus }) =>\n      materialOrdersApi.updateOrderStatus(id, status),\n    onSuccess: (updatedOrder) => {\n      queryClient.setQueryData(orderKeys.detail(updatedOrder.id), updatedOrder);\n      queryClient.invalidateQueries({ queryKey: orderKeys.lists() });\n\n      // If order is delivered, update material stock levels\n      if (updatedOrder.status === \"delivered\") {\n        queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n        queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      }\n\n      toast.success(\"Order status updated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to update order status: ${error.message}`);\n    },\n  });\n}\n\n// Specialized hooks\nexport function useProjectAllocations(projectId: string) {\n  return useAllocations({ project_id: projectId });\n}\n\nexport function useTeamAllocations(teamId: string) {\n  return useAllocations({ team_id: teamId });\n}\n\nexport function usePendingOrders() {\n  return useOrders({ status: \"pending\" });\n}\n\nexport function useSupplierOrders(supplierId: string) {\n  return useOrders({ supplier_id: supplierId });\n}\n\n// Project Preparation specific hooks\nexport interface ProjectMaterial {\n  id: string;\n  material_id: string;\n  name: string;\n  sku?: string;\n  unit: string;\n  description?: string;\n  allocated_qty: number;\n  unit_price: number;\n  total_cost: number;\n  allocation_date: string;\n  return_date?: string;\n  status: 'allocated' | 'used' | 'returned' | 'cancelled';\n  notes?: string;\n  allocated_by_name?: string;\n}\n\nexport interface WarehouseMaterial {\n  id: string;\n  name: string;\n  sku?: string;\n  unit: string;\n  description?: string;\n  available_qty: number;\n  total_qty: number;\n  reserved_qty: number;\n  min_stock: number;\n  price: number;\n}\n\nexport interface ProjectMaterialsResponse {\n  materials: ProjectMaterial[];\n  summary: {\n    total_materials: number;\n    pending_count: number;\n    used_count: number;\n    total_cost: number;\n  };\n}\n\nexport interface MaterialAssignmentData {\n  project_id: string;\n  material_id: string;\n  quantity: number;\n  from_date: string;\n  to_date?: string;\n  notes?: string;\n}\n\nexport interface UpdateMaterialAssignmentData {\n  assignment_id: string;\n  quantity: number;\n  unit_price: number;\n  from_date: string;\n  to_date?: string;\n  notes?: string;\n}\n\nexport function useProjectMaterials(projectId: string) {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"project\", projectId],\n    queryFn: async (): Promise<ProjectMaterialsResponse> => {\n      const response = await fetch(`/api/materials/project/${projectId}`, {\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch project materials');\n      }\n      return response.json();\n    },\n    enabled: !!projectId,\n    staleTime: 0, // Force fresh data every time\n    gcTime: 0, // Don't keep old data in memory\n  });\n}\n\nexport function useWarehouseMaterials() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"warehouse\"],\n    queryFn: async (): Promise<WarehouseMaterial[]> => {\n      const response = await fetch('/api/materials/warehouse');\n      if (!response.ok) {\n        throw new Error('Failed to fetch warehouse materials');\n      }\n      return response.json();\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n}\n\nexport function useAssignMaterialToProject() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: MaterialAssignmentData) => {\n      const response = await fetch('/api/materials/assignments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to assign material');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate legacy project materials\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"project\", variables.project_id]\n      });\n\n      // Invalidate unified project materials\n      queryClient.invalidateQueries({\n        queryKey: [...allocationKeys.all, \"project\", variables.project_id, \"unified\"]\n      });\n\n      // Invalidate warehouse materials (stock has changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      // Invalidate unified warehouse materials\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      // Invalidate allocation targets (availability may have changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      // Force immediate refetch for real-time updates\n      queryClient.refetchQueries({\n        queryKey: [...allocationKeys.all, \"project\", variables.project_id, \"unified\"]\n      });\n\n      queryClient.refetchQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      toast.success('Material assigned successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to assign material: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateMaterialAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: UpdateMaterialAssignmentData) => {\n      const { assignment_id, ...updateData } = data;\n      const response = await fetch(`/api/materials/assignments/${assignment_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update material assignment');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate legacy project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey[0] === \"materials\" &&\n                 query.queryKey[1] === \"project\";\n        }\n      });\n\n      // Invalidate unified project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey.includes(\"unified\");\n        }\n      });\n\n      // Invalidate warehouse and allocation targets (stock may have changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      toast.success('Material assignment updated successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to update material assignment: ${error.message}`);\n    },\n  });\n}\n\nexport function useDeleteMaterialAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (assignmentId: string) => {\n      const response = await fetch(`/api/materials/assignments/${assignmentId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete material assignment');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, assignmentId) => {\n      // Invalidate all legacy project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey[0] === \"materials\" &&\n                 query.queryKey[1] === \"project\";\n        }\n      });\n\n      // Invalidate all unified queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey.includes(\"unified\");\n        }\n      });\n\n      // Invalidate warehouse materials (stock has been restored)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      // Invalidate allocation targets (availability increased)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      toast.success('Material assignment deleted successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete material assignment: ${error.message}`);\n    },\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2318, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-equipment.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\n\nexport interface Equipment {\n  id: string;\n  type: 'machine' | 'tool' | 'measuring_device';\n  name: string;\n  inventory_no?: string;\n  owned: boolean;\n  status: 'available' | 'in_use' | 'maintenance' | 'broken';\n  purchase_price_eur: number;\n  rental_price_per_day_eur: number;\n  rental_price_per_hour_eur: number;\n  current_location?: string;\n  quantity?: number; // Available quantity in inventory\n}\n\nexport interface EquipmentAssignment {\n  id: string;\n  equipment_id: string;\n  resource_id?: string; // For unified assignments\n  project_id?: string; // Now optional - crew-based logic\n  cabinet_id?: string;\n  crew_id: string; // Now required - crew-based logic\n  from_ts: string;\n  to_ts?: string;\n  is_permanent: boolean;\n  rental_cost_per_day: number;\n  equipment: {\n    name: string;\n    type: string;\n    inventory_no?: string;\n  };\n  project_name?: string;\n  crew_name?: string;\n  is_active: boolean;\n  assignment_type?: 'equipment' | 'vehicle'; // For unified assignments\n  resource_type?: 'equipment' | 'vehicle'; // For UI distinction\n}\n\nexport interface CreateEquipmentData {\n  type: string;\n  name: string;\n  inventory_no?: string;\n  owned?: boolean;\n  status?: string;\n  purchase_price_eur?: number;\n  rental_price_per_day_eur?: number;\n  rental_price_per_hour_eur?: number;\n  current_location?: string;\n}\n\nexport interface CreateAssignmentData {\n  equipment_id: string;\n  project_id?: string; // Now optional - crew-based logic\n  cabinet_id?: string;\n  crew_id: string; // Now required - crew-based logic\n  from_ts: string;\n  to_ts?: string;\n  is_permanent?: boolean;\n  rental_cost_per_day?: number;\n}\n\nexport interface EquipmentAnalytics {\n  overview: {\n    totalHours: number;\n    efficiencyScore: number;\n    downtimeRate: number;\n    revenueGenerated: number;\n  };\n  statusDistribution: {\n    name: string;\n    value: number;\n    color: string;\n  }[];\n  utilization: {\n    name: string;\n    hours: number;\n    revenue: number;\n    assignments: number;\n  }[];\n  assignments: {\n    total: number;\n    active: number;\n    averageDailyCost: number;\n    totalDailyRevenue: number;\n    averageDuration: number;\n  };\n  equipment: {\n    totalCount: number;\n    byType: Record<string, { count: number; value: number }>;\n    byStatus: Record<string, number>;\n  };\n}\n\ninterface EquipmentFilters {\n  type?: string;\n  status?: string;\n  owned?: string;\n  search?: string;\n  page?: number;\n  per_page?: number;\n}\n\ninterface AssignmentFilters {\n  equipment_id?: string;\n  project_id?: string;\n  crew_id?: string;\n  active_only?: boolean;\n}\n\nconst api = {\n  getEquipment: async (filters?: EquipmentFilters): Promise<{ items: Equipment[]; total: number; page: number; per_page: number; total_pages: number }> => {\n    const params = new URLSearchParams();\n    if (filters?.type) params.append('type', filters.type);\n    if (filters?.status) params.append('status', filters.status);\n    if (filters?.owned) params.append('owned', filters.owned);\n    if (filters?.search) params.append('search', filters.search);\n    if (filters?.page) params.append('page', filters.page.toString());\n    if (filters?.per_page) params.append('per_page', filters.per_page.toString());\n\n    const url = `/api/equipment${params.toString() ? `?${params.toString()}` : ''}`;\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch equipment');\n    }\n\n    return response.json();\n  },\n\n  getEquipmentItem: async (id: string): Promise<Equipment> => {\n    const response = await fetch(`/api/equipment/${id}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch equipment');\n    }\n\n    return response.json();\n  },\n\n  createEquipment: async (data: CreateEquipmentData): Promise<Equipment> => {\n    const response = await fetch('/api/equipment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create equipment');\n    }\n\n    return response.json();\n  },\n\n  updateEquipment: async (id: string, data: Partial<Equipment>): Promise<{ success: boolean }> => {\n    const response = await fetch(`/api/equipment/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update equipment');\n    }\n\n    return response.json();\n  },\n\n  deleteEquipment: async (id: string): Promise<{ success: boolean }> => {\n    const response = await fetch(`/api/equipment/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete equipment');\n    }\n\n    return response.json();\n  },\n\n  getAssignments: async (filters?: AssignmentFilters): Promise<EquipmentAssignment[]> => {\n    const params = new URLSearchParams();\n    if (filters?.equipment_id) params.append('equipment_id', filters.equipment_id);\n    if (filters?.project_id) params.append('project_id', filters.project_id);\n    if (filters?.crew_id) params.append('crew_id', filters.crew_id);\n    if (filters?.active_only) params.append('active_only', filters.active_only.toString());\n\n    // Use our new equipment assignments API\n    const url = `/api/equipment/assignments${params.toString() ? `?${params.toString()}` : ''}`;\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch equipment assignments');\n    }\n\n    const data = await response.json();\n\n    // Transform our API response to match expected format\n    const assignments = data.items || data;\n\n    // For now, use basic transformation. TODO: Enhance with actual equipment/crew names\n    return assignments.map((assignment: any) => ({\n      id: assignment.id,\n      equipment_id: assignment.equipment_id || assignment.resource_id,\n      project_id: assignment.project_id,\n      crew_id: assignment.crew_id,\n      from_ts: assignment.assigned_at,\n      to_ts: assignment.returned_at,\n      is_permanent: !assignment.returned_at, // If no return date, consider permanent\n      rental_cost_per_day: assignment.daily_rental_cost || 0,\n      equipment: {\n        name: assignment.equipment_name || `Equipment ${assignment.equipment_id?.slice(-8) || 'Unknown'}`,\n        type: assignment.resource_type || 'equipment',\n        inventory_no: assignment.equipment_id\n      },\n      project_name: assignment.project_name || (assignment.project_id ? `Project ${assignment.project_id.slice(-8)}` : undefined),\n      crew_name: assignment.crew_name || (assignment.crew_id ? `Crew ${assignment.crew_id.slice(-8)}` : undefined),\n      is_active: !assignment.returned_at,\n      assignment_type: assignment.resource_type,\n      resource_type: assignment.resource_type,\n      notes: assignment.notes\n    }));\n  },\n\n  createAssignment: async (data: CreateAssignmentData): Promise<{ success: boolean; assignment_id: string; message: string }> => {\n    const response = await fetch('/api/resources/equipment-assignments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create assignment');\n    }\n\n    return response.json();\n  },\n\n  updateAssignment: async (id: string, data: Partial<EquipmentAssignment>): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/resources/equipment-assignments/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update assignment');\n    }\n\n    return response.json();\n  },\n\n  deleteAssignment: async (id: string): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/resources/equipment-assignments/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete assignment');\n    }\n\n    return response.json();\n  },\n\n  getAnalytics: async (): Promise<EquipmentAnalytics> => {\n    const response = await fetch('/api/equipment/analytics');\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch equipment analytics');\n    }\n\n    return response.json();\n  },\n};\n\nexport function useEquipment(filters?: EquipmentFilters) {\n  return useQuery({\n    queryKey: ['equipment', filters],\n    queryFn: () => api.getEquipment(filters),\n  });\n}\n\nexport function useEquipmentItem(id: string) {\n  return useQuery({\n    queryKey: ['equipment', id],\n    queryFn: () => api.getEquipmentItem(id),\n    enabled: !!id,\n  });\n}\n\nexport function useCreateEquipment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.createEquipment,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['equipment'] });\n      toast.success('Equipment created successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useUpdateEquipment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Equipment> }) =>\n      api.updateEquipment(id, data),\n    onSuccess: (_, { id }) => {\n      queryClient.invalidateQueries({ queryKey: ['equipment'] });\n      queryClient.invalidateQueries({ queryKey: ['equipment', id] });\n      toast.success('Equipment updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useDeleteEquipment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.deleteEquipment,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['equipment'] });\n      toast.success('Equipment deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useEquipmentAssignments(filters?: AssignmentFilters) {\n  return useQuery({\n    queryKey: ['equipment-assignments', filters],\n    queryFn: () => api.getAssignments(filters),\n    staleTime: 30 * 1000, // 30 seconds - crew assignments change frequently\n  });\n}\n\nexport function useCreateAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.createAssignment,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['equipment-assignments'] });\n      queryClient.invalidateQueries({ queryKey: ['equipment'] });\n      queryClient.invalidateQueries({ queryKey: ['crews'] }); // Also invalidate crew queries\n      toast.success(data.message || 'Assignment created successfully');\n    },\n    onError: (error: Error) => {\n      // Enhanced error handling for crew validation\n      if (error.message.includes('Crew not found') || error.message.includes('CREW_NOT_FOUND')) {\n        toast.error('Selected crew is not found or inactive. Please select a valid crew.');\n      } else if (error.message.includes('crew_id') || error.message.includes('Crew ID')) {\n        toast.error('Crew selection is required. Please select a crew for this assignment.');\n      } else {\n        toast.error(error.message);\n      }\n    },\n  });\n}\n\nexport function useUpdateAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<EquipmentAssignment> }) =>\n      api.updateAssignment(id, data),\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['equipment-assignments'] });\n      queryClient.invalidateQueries({ queryKey: ['equipment'] });\n      toast.success(data.message || 'Assignment updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useDeleteAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.deleteAssignment,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['equipment-assignments'] });\n      queryClient.invalidateQueries({ queryKey: ['equipment'] });\n      toast.success(data.message || 'Assignment deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useEquipmentAnalytics() {\n  return useQuery({\n    queryKey: ['equipment-analytics'],\n    queryFn: () => api.getAnalytics(),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\n// New hook for crew-based equipment assignments (only equipment)\nexport function useCrewEquipmentAssignments(crew_id?: string) {\n  return useQuery({\n    queryKey: ['equipment-assignments', 'crew', crew_id],\n    queryFn: async () => {\n      const response = await fetch(`/api/resources/equipment-assignments?crew_id=${crew_id}&active_only=true`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch equipment assignments');\n      }\n      return response.json();\n    },\n    enabled: !!crew_id,\n    staleTime: 30 * 1000, // 30 seconds - crew assignments change frequently\n  });\n}\n\n// Hook for getting equipment assignments by project (filtered through crew assignments)\nexport function useProjectEquipmentAssignments(project_id?: string) {\n  return useQuery({\n    queryKey: ['equipment-assignments', 'project', project_id],\n    queryFn: () => api.getAssignments({ project_id }),\n    enabled: !!project_id,\n    staleTime: 60 * 1000, // 1 minute - project assignments are more stable\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2836, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-allocations.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\nimport { invalidateAllMaterialQueries } from './use-materials';\n\nexport interface MaterialAllocation {\n  id: string;\n  material_id: string;\n  project_id?: string;\n  crew_id?: string;\n  quantity_allocated: number;\n  quantity_used: number;\n  quantity_remaining: number;\n  allocated_date: string;\n  return_date?: string;\n  status: 'allocated' | 'partially_used' | 'fully_used' | 'returned';\n  notes?: string;\n  allocated_by?: string;\n  material?: {\n    id: string;\n    name: string;\n    category: string;\n    unit: string;\n    unit_price_eur: number;\n    supplier_name: string;\n  };\n  project?: {\n    id: string;\n    name: string;\n    city: string;\n    address: string;\n  };\n  allocator?: {\n    id: string;\n    name: string;\n    first_name: string;\n    last_name: string;\n    email: string;\n    role: string;\n  };\n  total_value: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateAllocationData {\n  material_id: string;\n  project_id?: string;\n  crew_id?: string;\n  quantity_allocated: number;\n  allocated_date: string;\n  notes?: string;\n  allocated_by?: string;\n}\n\nexport interface UpdateAllocationData {\n  quantity_used?: number;\n  status?: string;\n  notes?: string;\n  return_date?: string;\n}\n\ninterface AllocationsFilters {\n  project_id?: string;\n  crew_id?: string;\n  status?: string;\n  material_id?: string;\n}\n\nconst api = {\n  getAllocations: async (filters?: AllocationsFilters): Promise<MaterialAllocation[]> => {\n    const params = new URLSearchParams();\n    if (filters?.project_id) params.append('project_id', filters.project_id);\n    if (filters?.crew_id) params.append('crew_id', filters.crew_id);\n    if (filters?.status) params.append('status', filters.status);\n    if (filters?.material_id) params.append('material_id', filters.material_id);\n\n    const url = `/api/materials/allocations${params.toString() ? `?${params.toString()}` : ''}`;\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch allocations');\n    }\n\n    const data = await response.json();\n    return data.allocations || [];\n  },\n\n  getAllocation: async (id: string): Promise<MaterialAllocation> => {\n    const response = await fetch(`/api/materials/allocations/${id}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch allocation');\n    }\n\n    return response.json();\n  },\n\n  createAllocation: async (data: CreateAllocationData): Promise<{ success: boolean; allocation_id: string; message: string }> => {\n    const response = await fetch('/api/materials/allocations', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create allocation');\n    }\n\n    return response.json();\n  },\n\n  updateAllocation: async (id: string, data: UpdateAllocationData): Promise<{ success: boolean }> => {\n    const response = await fetch(`/api/materials/allocations/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update allocation');\n    }\n\n    return response.json();\n  },\n\n  deleteAllocation: async (id: string): Promise<{ success: boolean }> => {\n    const response = await fetch(`/api/materials/allocations/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete allocation');\n    }\n\n    return response.json();\n  },\n};\n\nexport function useAllocations(filters?: AllocationsFilters) {\n  return useQuery({\n    queryKey: ['allocations', filters],\n    queryFn: () => api.getAllocations(filters),\n  });\n}\n\nexport function useAllocation(id: string) {\n  return useQuery({\n    queryKey: ['allocation', id],\n    queryFn: () => api.getAllocation(id),\n    enabled: !!id,\n  });\n}\n\nexport function useCreateAllocation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.createAllocation,\n    onSuccess: (data) => {\n      // Use centralized cache invalidation for consistency\n      invalidateAllMaterialQueries(queryClient);\n\n      // Invalidate project-specific allocation views\n      queryClient.invalidateQueries({ queryKey: ['allocations', 'project'] });\n\n      toast.success(data.message || 'Allocation created successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useUpdateAllocation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdateAllocationData }) =>\n      api.updateAllocation(id, data),\n    onSuccess: (_, { id }) => {\n      // Use centralized cache invalidation\n      invalidateAllMaterialQueries(queryClient);\n      queryClient.invalidateQueries({ queryKey: ['allocation', id] });\n\n      toast.success('Allocation updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useDeleteAllocation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.deleteAllocation,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['allocations'] });\n      queryClient.invalidateQueries({ queryKey: ['materials'] });\n      toast.success('Allocation deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3062, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/%28dashboard%29/dashboard/reports/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useMemo } from \"react\";\nimport {\n  BarChart3,\n  FileText,\n  Download,\n  Calendar,\n  Users,\n  Activity,\n  DollarSign,\n  TrendingUp,\n  Building2,\n  Clock,\n  MapPin,\n  Filter,\n  Package,\n  Truck,\n  Settings,\n  AlertTriangle,\n  CheckCircle,\n  TrendingDown\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line, Area, AreaChart } from 'recharts';\n\n// Import hooks for real data\nimport { useProjects } from \"@/hooks/use-projects\";\nimport { useWorkEntries } from \"@/hooks/use-work-entries\";\nimport { useCrews } from \"@/hooks/use-crews\";\nimport { useFinancialSummary } from \"@/hooks/use-financial\";\nimport { useMaterials } from \"@/hooks/use-materials\";\nimport { useEquipment } from \"@/hooks/use-equipment\";\nimport { useAllocations } from \"@/hooks/use-allocations\";\nimport { useOrders } from \"@/hooks/use-materials\";\n\nexport default function ReportsPage() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"month\");\n  const [selectedProject, setSelectedProject] = useState(\"all\");\n\n  // Fetch real data from hooks\n  const { data: projectsResponse, isLoading: projectsLoading } = useProjects({ page: 1, per_page: 1000 });\n  const { data: workEntriesResponse, isLoading: workEntriesLoading } = useWorkEntries({ page: 1, per_page: 1000 });\n  const { data: crewsResponse, isLoading: crewsLoading } = useCrews({ page: 1, per_page: 1000 });\n  const { data: financialResponse, isLoading: financialLoading } = useFinancialSummary();\n  const { data: materialsResponse, isLoading: materialsLoading } = useMaterials({ page: 1, per_page: 1000 });\n  const { data: equipmentResponse, isLoading: equipmentLoading } = useEquipment({ per_page: 1000 });\n  const { data: allocationsResponse, isLoading: allocationsLoading } = useAllocations({ page: 1, per_page: 1000 });\n  const { data: ordersResponse, isLoading: ordersLoading } = useOrders({ page: 1, per_page: 1000 });\n\n  // Extract data arrays\n  const projects = projectsResponse?.items || [];\n  const workEntries = workEntriesResponse?.items || [];\n  const crews = crewsResponse?.items || [];\n  const materials = materialsResponse?.items || [];\n  const equipment = equipmentResponse?.items || [];\n  const allocations = allocationsResponse?.items || [];\n  const orders = ordersResponse?.items || [];\n\n  // Calculate real metrics\n  const reportMetrics = useMemo(() => {\n    // Project Progress\n    const completedProjects = projects.filter(p => p.status === 'completed').length;\n    const totalProjects = projects.length;\n    const projectProgress = totalProjects > 0 ? Math.round((completedProjects / totalProjects) * 100) : 0;\n\n    // Active Teams/Crews\n    const activeCrews = crews.filter(c => c.status === 'active').length;\n\n    // Work Entries (current month)\n    const currentMonth = new Date().getMonth();\n    const currentYear = new Date().getFullYear();\n    const monthlyWorkEntries = workEntries.filter(entry => {\n      if (!entry.created_at) return false;\n      const entryDate = new Date(entry.created_at);\n      return entryDate.getMonth() === currentMonth && entryDate.getFullYear() === currentYear;\n    }).length;\n\n    // Budget/Financial data\n    const totalBudget = projects.reduce((sum, project) => sum + (project.budget || 0), 0);\n    const totalSpent = financialResponse?.summary?.total_expenses || 0;\n\n    return {\n      projectProgress,\n      activeCrews,\n      monthlyWorkEntries,\n      totalBudget,\n      totalSpent,\n      budgetUtilization: totalBudget > 0 ? Math.round((totalSpent / totalBudget) * 100) : 0\n    };\n  }, [projects, workEntries, crews, financialResponse]);\n\n  // Real report cards based on actual data\n  const reportCards = [\n    {\n      title: \"Project Progress\",\n      description: \"Overall project completion status\",\n      icon: Building2,\n      value: `${reportMetrics.projectProgress}%`,\n      trend: `${projects.filter(p => p.status === 'completed').length}/${projects.length}`,\n      trendUp: reportMetrics.projectProgress > 50,\n    },\n    {\n      title: \"Active Teams\",\n      description: \"Currently working crews\",\n      icon: Users,\n      value: reportMetrics.activeCrews.toString(),\n      trend: `${crews.length} total`,\n      trendUp: reportMetrics.activeCrews > 0,\n    },\n    {\n      title: \"Work Entries\",\n      description: \"Total work entries this month\",\n      icon: Activity,\n      value: reportMetrics.monthlyWorkEntries.toString(),\n      trend: `${workEntries.length} total`,\n      trendUp: reportMetrics.monthlyWorkEntries > 0,\n    },\n    {\n      title: \"Budget Utilization\",\n      description: \"Current budget usage\",\n      icon: DollarSign,\n      value: new Intl.NumberFormat(\"de-DE\", { style: \"currency\", currency: \"EUR\" }).format(reportMetrics.totalSpent),\n      trend: `${reportMetrics.budgetUtilization}% used`,\n      trendUp: reportMetrics.budgetUtilization < 80,\n    },\n  ];\n\n  // Dynamic report generation based on real data availability\n  const availableReports = [\n    {\n      id: \"project-summary\",\n      name: \"Project Summary Report\",\n      description: `Comprehensive overview of ${projects.length} projects`,\n      category: \"Project\",\n      format: [\"PDF\", \"Excel\"],\n      dataCount: projects.length,\n      enabled: projects.length > 0,\n    },\n    {\n      id: \"team-performance\",\n      name: \"Team Performance Report\",\n      description: `Performance metrics for ${crews.length} teams`,\n      category: \"Team\",\n      format: [\"PDF\", \"Excel\"],\n      dataCount: crews.length,\n      enabled: crews.length > 0,\n    },\n    {\n      id: \"financial-summary\",\n      name: \"Financial Summary\",\n      description: \"Budget, costs, and financial tracking\",\n      category: \"Financial\",\n      format: [\"PDF\", \"Excel\"],\n      dataCount: projects.filter(p => p.budget).length,\n      enabled: projects.some(p => p.budget),\n    },\n    {\n      id: \"materials-usage\",\n      name: \"Materials Usage Report\",\n      description: `Material consumption for ${materials.length} items`,\n      category: \"Materials\",\n      format: [\"PDF\", \"Excel\"],\n      dataCount: materials.length,\n      enabled: materials.length > 0,\n    },\n    {\n      id: \"work-progress\",\n      name: \"Work Progress Report\",\n      description: `Analysis of ${workEntries.length} work entries`,\n      category: \"Progress\",\n      format: [\"PDF\", \"Excel\"],\n      dataCount: workEntries.length,\n      enabled: workEntries.length > 0,\n    },\n    {\n      id: \"equipment-usage\",\n      name: \"Equipment Usage Report\",\n      description: `Utilization of ${equipment.length} equipment items`,\n      category: \"Equipment\",\n      format: [\"PDF\", \"Excel\"],\n      dataCount: equipment.length,\n      enabled: equipment.length > 0,\n    },\n    {\n      id: \"material-orders\",\n      name: \"Material Orders Report\",\n      description: `Status of ${orders.length} purchase orders`,\n      category: \"Orders\",\n      format: [\"PDF\", \"Excel\"],\n      dataCount: orders.length,\n      enabled: orders.length > 0,\n    },\n    {\n      id: \"allocations-summary\",\n      name: \"Resource Allocations Report\",\n      description: `Overview of ${allocations.length} resource allocations`,\n      category: \"Allocations\",\n      format: [\"PDF\", \"Excel\"],\n      dataCount: allocations.length,\n      enabled: allocations.length > 0,\n    },\n  ];\n\n  const handleGenerateReport = async (reportId: string, format: string) => {\n    try {\n      // Real report generation API call\n      const response = await fetch('/api/reports/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          reportId,\n          format,\n          period: selectedPeriod,\n          project: selectedProject,\n        }),\n      });\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${reportId}-${new Date().toISOString().split('T')[0]}.${format.toLowerCase()}`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      } else {\n        console.error('Failed to generate report');\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      Project: \"bg-blue-100 text-blue-800\",\n      Team: \"bg-green-100 text-green-800\",\n      Financial: \"bg-yellow-100 text-yellow-800\",\n      Materials: \"bg-purple-100 text-purple-800\",\n      Progress: \"bg-indigo-100 text-indigo-800\",\n      Equipment: \"bg-red-100 text-red-800\",\n      Orders: \"bg-orange-100 text-orange-800\",\n      Allocations: \"bg-teal-100 text-teal-800\",\n    };\n    return colors[category] || \"bg-gray-100 text-gray-800\";\n  };\n\n  // Loading state\n  const isLoading = projectsLoading || workEntriesLoading || crewsLoading ||\n                   financialLoading || materialsLoading || equipmentLoading ||\n                   allocationsLoading || ordersLoading;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Reports</h1>\n            <p className=\"text-muted-foreground\">Loading reports data...</p>\n          </div>\n        </div>\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse space-y-2\">\n                  <div className=\"h-4 bg-muted rounded w-1/2\" />\n                  <div className=\"h-8 bg-muted rounded w-3/4\" />\n                  <div className=\"h-3 bg-muted rounded w-full\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Reports & Analytics</h1>\n          <p className=\"text-muted-foreground\">\n            Real-time data insights and comprehensive project reports\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue placeholder=\"Select period\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"week\">This Week</SelectItem>\n              <SelectItem value=\"month\">This Month</SelectItem>\n              <SelectItem value=\"quarter\">This Quarter</SelectItem>\n              <SelectItem value=\"year\">This Year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={selectedProject} onValueChange={setSelectedProject}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"All Projects\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Projects</SelectItem>\n              {projects.map((project) => (\n                <SelectItem key={project.id} value={project.id}>\n                  {project.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Overview Cards */}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        {reportCards.map((card) => {\n          const Icon = card.icon;\n          return (\n            <Card key={card.title}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">{card.title}</CardTitle>\n                <Icon className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{card.value}</div>\n                <div className=\"flex items-center text-xs text-muted-foreground mt-1\">\n                  {card.trendUp ? (\n                    <TrendingUp className=\"mr-1 h-3 w-3 text-green-600\" />\n                  ) : (\n                    <TrendingDown className=\"mr-1 h-3 w-3 text-red-600\" />\n                  )}\n                  <span className={card.trendUp ? \"text-green-600\" : \"text-red-600\"}>\n                    {card.trend}\n                  </span>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {card.description}\n                </p>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Analytics Dashboard */}\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Project Status Distribution</CardTitle>\n            <CardDescription>Current status of all projects</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ProjectStatusChart projects={projects} />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Work Activity Trends</CardTitle>\n            <CardDescription>Work entries over the last 30 days</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <WorkActivityChart workEntries={workEntries} />\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Material Usage Overview</CardTitle>\n            <CardDescription>Current inventory and allocation status</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <MaterialUsageChart materials={materials} allocations={allocations} />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Budget Utilization</CardTitle>\n            <CardDescription>Project budget vs actual spending</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <BudgetChart projects={projects} financialData={financialResponse} />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Available Reports */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <FileText className=\"h-5 w-5\" />\n            <span>Available Reports</span>\n          </CardTitle>\n          <CardDescription>\n            Generate and download comprehensive project reports\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-1 lg:grid-cols-2\">\n            {availableReports.filter(report => report.enabled).map((report) => (\n              <Card key={report.id} className=\"p-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <h3 className=\"font-semibold\">{report.name}</h3>\n                      <Badge\n                        variant=\"secondary\"\n                        className={getCategoryColor(report.category)}\n                      >\n                        {report.category}\n                      </Badge>\n                      <Badge variant=\"outline\">\n                        {report.dataCount} items\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {report.description}\n                    </p>\n                    <div className=\"flex items-center text-xs text-muted-foreground\">\n                      <CheckCircle className=\"mr-1 h-3 w-3 text-green-600\" />\n                      Data available: {report.dataCount} records\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col space-y-1\">\n                    {report.format.map((format) => (\n                      <Button\n                        key={format}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleGenerateReport(report.id, format)}\n                        className=\"min-w-20\"\n                      >\n                        <Download className=\"mr-1 h-3 w-3\" />\n                        {format}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n\n          {availableReports.filter(report => !report.enabled).length > 0 && (\n            <div className=\"mt-6\">\n              <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">\n                Reports with no data available:\n              </h4>\n              <div className=\"grid gap-2 md:grid-cols-2\">\n                {availableReports.filter(report => !report.enabled).map((report) => (\n                  <div key={report.id} className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <span>{report.name}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            <span>Quick Analysis</span>\n          </CardTitle>\n          <CardDescription>\n            Instant insights from current data\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-4\">\n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Activity className=\"h-6 w-6 text-blue-600\" />\n                <div>\n                  <div className=\"text-lg font-semibold\">{workEntries.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Work Entries</div>\n                </div>\n              </div>\n            </Card>\n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-6 w-6 text-green-600\" />\n                <div>\n                  <div className=\"text-lg font-semibold\">{crews.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Active Teams</div>\n                </div>\n              </div>\n            </Card>\n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Package className=\"h-6 w-6 text-purple-600\" />\n                <div>\n                  <div className=\"text-lg font-semibold\">{materials.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Material Types</div>\n                </div>\n              </div>\n            </Card>\n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Settings className=\"h-6 w-6 text-red-600\" />\n                <div>\n                  <div className=\"text-lg font-semibold\">{equipment.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Equipment Items</div>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Chart Components\nconst ProjectStatusChart = ({ projects }: { projects: any[] }) => {\n  const statusData = projects.reduce((acc, project) => {\n    const status = project.status || 'unknown';\n    const existing = acc.find(item => item.status === status);\n    if (existing) {\n      existing.count += 1;\n    } else {\n      acc.push({ status: status.charAt(0).toUpperCase() + status.slice(1), count: 1 });\n    }\n    return acc;\n  }, [] as Array<{ status: string; count: number }>);\n\n  const COLORS = ['#3b82f6', '#22c55e', '#f59e0b', '#ef4444', '#8b5cf6'];\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <PieChart>\n        <Pie\n          data={statusData}\n          cx=\"50%\"\n          cy=\"50%\"\n          labelLine={false}\n          label={({ status, count }) => `${status}: ${count}`}\n          outerRadius={80}\n          fill=\"#8884d8\"\n          dataKey=\"count\"\n        >\n          {statusData.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n          ))}\n        </Pie>\n        <Tooltip />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst WorkActivityChart = ({ workEntries }: { workEntries: any[] }) => {\n  // Group work entries by day for the last 30 days\n  const last30Days = Array.from({ length: 30 }, (_, i) => {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    return {\n      date: date.toISOString().split('T')[0],\n      day: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n      count: 0\n    };\n  }).reverse();\n\n  workEntries.forEach(entry => {\n    if (entry.created_at) {\n      const entryDate = new Date(entry.created_at).toISOString().split('T')[0];\n      const dayData = last30Days.find(d => d.date === entryDate);\n      if (dayData) {\n        dayData.count += 1;\n      }\n    }\n  });\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <AreaChart data={last30Days}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"day\" />\n        <YAxis />\n        <Tooltip />\n        <Area type=\"monotone\" dataKey=\"count\" stroke=\"#3b82f6\" fill=\"#3b82f6\" fillOpacity={0.6} />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst MaterialUsageChart = ({ materials, allocations }: { materials: any[]; allocations: any[] }) => {\n  const usageData = materials.map(material => {\n    const allocated = allocations\n      .filter(alloc => alloc.material?.id === material.id)\n      .reduce((sum, alloc) => sum + (alloc.allocated_qty || 0), 0);\n\n    return {\n      name: material.name.length > 15 ? material.name.substring(0, 15) + '...' : material.name,\n      stock: material.current_stock_qty || 0,\n      allocated: allocated\n    };\n  }).slice(0, 8); // Show top 8 materials\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart data={usageData}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"stock\" fill=\"#22c55e\" name=\"In Stock\" />\n        <Bar dataKey=\"allocated\" fill=\"#3b82f6\" name=\"Allocated\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst BudgetChart = ({ projects, financialData }: { projects: any[]; financialData: any }) => {\n  const budgetData = projects\n    .filter(p => p.budget && p.budget > 0)\n    .map(project => ({\n      name: project.name.length > 20 ? project.name.substring(0, 20) + '...' : project.name,\n      budget: project.budget,\n      spent: 0 // Would need to calculate actual spending per project\n    }))\n    .slice(0, 6); // Show top 6 projects\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart data={budgetData}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip formatter={(value: any) => [`€${value.toLocaleString()}`, '']} />\n        <Bar dataKey=\"budget\" fill=\"#3b82f6\" name=\"Budget\" />\n        <Bar dataKey=\"spent\" fill=\"#ef4444\" name=\"Spent\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};"],"names":[],"mappings":"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","debugId":null}}]
}