{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/components/project-preparation/readiness.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Progress } from '@/components/ui/progress';\nimport { AlertCircle, CheckCircle, Clock, AlertTriangle, FileText, Users, Package, Home, Settings, Rocket, FileCheck, MessageSquare, PlayCircle, PauseCircle, BarChart3, Cog } from 'lucide-react';\nimport { useProjectReadiness, useUpdateProjectStatus, useCreateProjectActivation, useProjectChecklist } from '@/hooks/use-project-readiness';\nimport { useForm } from 'react-hook-form';\nimport { toast } from 'sonner';\n\ninterface ReadinessProps {\n  projectId: string;\n}\n\ninterface ActivationForm {\n  activation_date: string;\n  activation_notes?: string;\n  responsible_manager: string;\n  notify_stakeholders: boolean;\n}\n\nconst READINESS_CATEGORIES = [\n  {\n    id: 'documentation',\n    title: 'Documentation',\n    description: 'All required documents and plans',\n    icon: FileText,\n    color: 'text-blue-600',\n    checks: [\n      'Project plans uploaded',\n      'Utility contact information complete',\n      'Building permits obtained',\n      'Safety documentation complete'\n    ]\n  },\n  {\n    id: 'resources',\n    title: 'Resources',\n    description: 'Teams, equipment, and materials',\n    icon: Users,\n    color: 'text-green-600',\n    checks: [\n      'Team assignments complete',\n      'Equipment allocation finalized',\n      'Material inventory sufficient',\n      'Subcontractors confirmed'\n    ]\n  },\n  {\n    id: 'infrastructure',\n    title: 'Infrastructure',\n    description: 'Zone layout and house connections',\n    icon: Settings,\n    color: 'text-orange-600',\n    checks: [\n      'Zone layout confirmed',\n      'Cabinet locations defined',\n      'House connections mapped',\n      'Network segments planned'\n    ]\n  },\n  {\n    id: 'approvals',\n    title: 'Approvals',\n    description: 'Required authorizations and sign-offs',\n    icon: CheckCircle,\n    color: 'text-purple-600',\n    checks: [\n      'Management approval obtained',\n      'Customer agreements signed',\n      'Regulatory clearances complete',\n      'Budget authorization confirmed'\n    ]\n  }\n];\n\nconst PROJECT_STATUSES = [\n  { value: 'planning', label: 'Planning', color: 'bg-blue-100 text-blue-800', icon: FileText },\n  { value: 'ready', label: '\u0005Ready', color: 'bg-green-100 text-green-800', icon: CheckCircle },\n  { value: 'active', label: 'Active', color: 'bg-orange-100 text-orange-800', icon: Rocket },\n  { value: 'on_hold', label: 'On Hold', color: 'bg-yellow-100 text-yellow-800', icon: PauseCircle },\n  { value: 'completed', label: 'Completed', color: 'bg-emerald-100 text-emerald-800', icon: CheckCircle },\n];\n\nexport default function Readiness({ projectId }: ReadinessProps) {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\n  const { data: readinessData, isLoading, error, refetch } = useProjectReadiness(projectId);\n  const { data: checklist } = useProjectChecklist(projectId);\n  const updateStatus = useUpdateProjectStatus();\n  const createActivation = useCreateProjectActivation();\n\n  const activationForm = useForm<ActivationForm>();\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-1/3\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Skeleton className=\"h-24\" />\n          <Skeleton className=\"h-24\" />\n          <Skeleton className=\"h-24\" />\n          <Skeleton className=\"h-24\" />\n        </div>\n        <Skeleton className=\"h-96\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">Error Loading Readiness Data</h3>\n            <p className=\"text-gray-600 mb-4\">{error.message}</p>\n            <Button onClick={() => refetch()}>Try Again</Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const handleStatusUpdate = async (newStatus: string) => {\n    try {\n      await updateStatus.mutateAsync({\n        project_id: projectId,\n        status: newStatus,\n      });\n      refetch();\n      toast.success(`Project status updated to ${newStatus}`);\n    } catch (error) {\n      toast.error('Failed to update project status');\n    }\n  };\n\n  const handleActivation = async (data: ActivationForm) => {\n    try {\n      await createActivation.mutateAsync({\n        ...data,\n        project_id: projectId,\n      });\n      activationForm.reset();\n      refetch();\n      toast.success('Project activation initiated successfully');\n    } catch (error) {\n      toast.error('Failed to activate project');\n    }\n  };\n\n  const overallReadiness = readinessData?.overall_readiness || 0;\n  const totalChecks = readinessData?.total_checks || 0;\n  const completedChecks = readinessData?.completed_checks || 0;\n  const currentStatus = readinessData?.project_status || 'planning';\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <div className=\"flex items-center space-x-2\">\n            <Rocket className=\"w-6 h-6 text-blue-600\" />\n            <h3 className=\"text-2xl font-bold\">Project Readiness & Activation</h3>\n          </div>\n          <p className=\"text-gray-600\">Final checks and project activation management</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge className={PROJECT_STATUSES.find(s => s.value === currentStatus)?.color || 'bg-gray-100 text-gray-800'}>\n            {PROJECT_STATUSES.find(s => s.value === currentStatus)?.label || currentStatus}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Overall Readiness Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Rocket className=\"w-5 h-5 text-blue-500\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">Overall Readiness</p>\n                <p className=\"text-2xl font-bold\">{overallReadiness}%</p>\n                <Progress value={overallReadiness} className=\"mt-2\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-500\" />\n              <div>\n                <p className=\"text-sm font-medium\">Checks Complete</p>\n                <p className=\"text-2xl font-bold\">{completedChecks}/{totalChecks}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"w-5 h-5 text-orange-500\" />\n              <div>\n                <p className=\"text-sm font-medium\">Days to Start</p>\n                <p className=\"text-2xl font-bold\">{readinessData?.days_to_start || '--'}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <AlertTriangle className=\"w-5 h-5 text-red-500\" />\n              <div>\n                <p className=\"text-sm font-medium\">Critical Issues</p>\n                <p className=\"text-2xl font-bold\">{readinessData?.critical_issues || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Readiness Management Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"overview\">Readiness Overview</TabsTrigger>\n          <TabsTrigger value=\"checklist\">\u0005Checklist</TabsTrigger>\n          <TabsTrigger value=\"activation\">Activation</TabsTrigger>\n        </TabsList>\n\n        {/* Readiness Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {READINESS_CATEGORIES.map((category) => {\n              const categoryData = readinessData?.categories?.[category.id];\n              const completedCount = categoryData?.completed || 0;\n              const totalCount = category.checks.length;\n              const percentage = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;\n              const Icon = category.icon;\n\n              return (\n                <Card\n                  key={category.id}\n                  className={`cursor-pointer transition-all ${selectedCategory === category.id ? 'ring-2 ring-blue-500' : ''}`}\n                  onClick={() => setSelectedCategory(selectedCategory === category.id ? null : category.id)}\n                >\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Icon className={`w-5 h-5 ${category.color}`} />\n                        <CardTitle className=\"text-lg\">{category.title}</CardTitle>\n                      </div>\n                      <Badge variant={percentage === 100 ? 'default' : 'secondary'}>\n                        {completedCount}/{totalCount}\n                      </Badge>\n                    </div>\n                    <CardDescription>{category.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Progress</span>\n                        <span>{percentage}%</span>\n                      </div>\n                      <Progress value={percentage} />\n\n                      {selectedCategory === category.id && (\n                        <div className=\"pt-3 space-y-2\">\n                          {category.checks.map((check, index) => {\n                            const isCompleted = categoryData?.completed_checks?.includes(index) || false;\n                            return (\n                              <div key={index} className=\"flex items-center space-x-2\">\n                                {isCompleted ? (\n                                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                                ) : (\n                                  <Clock className=\"w-4 h-4 text-gray-400\" />\n                                )}\n                                <span className={`text-sm ${isCompleted ? 'text-green-700' : 'text-gray-600'}`}>\n                                  {check}\n                                </span>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Critical Issues */}\n          {readinessData?.issues && readinessData.issues.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"w-5 h-5 text-red-500\" />\n                  <span>Critical Issues</span>\n                </CardTitle>\n                <CardDescription>\n                  Issues that must be resolved before project activation\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {readinessData.issues.map((issue, index) => (\n                    <div key={index} className=\"flex items-start space-x-3 p-3 border-l-4 border-l-red-500 bg-red-50\">\n                      <AlertTriangle className=\"w-5 h-5 text-red-500 mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-red-800\">{issue.title}</p>\n                        <p className=\"text-sm text-red-600\">{issue.description}</p>\n                        {issue.action_required && (\n                          <p className=\"text-sm font-medium text-red-700 mt-1\">\n                            Action Required: {issue.action_required}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Checklist Tab */}\n        <TabsContent value=\"checklist\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>\u0005Project Readiness Checklist</CardTitle>\n              <CardDescription>\n                Complete all items below before activating the project\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {checklist && checklist.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {checklist.map((item, index) => (\n                    <div key={index} className=\"flex items-start space-x-3 p-4 border rounded-lg\">\n                      <div className=\"flex-shrink-0 mt-1\">\n                        {item.completed ? (\n                          <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                        ) : item.required ? (\n                          <AlertCircle className=\"w-5 h-5 text-red-500\" />\n                        ) : (\n                          <Clock className=\"w-5 h-5 text-gray-400\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className={`font-medium ${item.completed ? 'text-green-700' : 'text-gray-900'}`}>\n                            {item.title}\n                          </h4>\n                          <div className=\"flex items-center space-x-2\">\n                            {item.required && (\n                              <Badge variant=\"destructive\" size=\"sm\">Required</Badge>\n                            )}\n                            <Badge variant={item.completed ? 'default' : 'secondary'} size=\"sm\">\n                              {item.category}\n                            </Badge>\n                          </div>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mt-1\">{item.description}</p>\n                        {item.completed && item.completed_date && (\n                          <p className=\"text-xs text-green-600 mt-1\">\n                            Completed: {item.completed_date}\n                          </p>\n                        )}\n                        {!item.completed && item.action_required && (\n                          <p className=\"text-sm font-medium text-orange-600 mt-1\">\n                            Action: {item.action_required}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <FileCheck className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No Checklist Available</h3>\n                  <p className=\"text-gray-600\">\n                    The readiness checklist will be generated based on project requirements.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Activation Tab */}\n        <TabsContent value=\"activation\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Status Management */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Project Status Management</CardTitle>\n                <CardDescription>\n                  Update project status based on readiness\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Current Status</Label>\n                    <div className=\"mt-1\">\n                      <Badge className={PROJECT_STATUSES.find(s => s.value === currentStatus)?.color || 'bg-gray-100 text-gray-800'}>\n                        {PROJECT_STATUSES.find(s => s.value === currentStatus)?.label || currentStatus}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Change Status</Label>\n                    <div className=\"grid grid-cols-1 gap-2\">\n                      {PROJECT_STATUSES.map((status) => (\n                        <Button\n                          key={status.value}\n                          variant={currentStatus === status.value ? 'default' : 'outline'}\n                          size=\"sm\"\n                          onClick={() => handleStatusUpdate(status.value)}\n                          disabled={updateStatus.isPending || currentStatus === status.value}\n                          className=\"justify-start\"\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            {status.icon && <status.icon className=\"w-4 h-4\" />}\n                            <span>{status.label}</span>\n                          </div>\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Project Activation */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Project Activation</CardTitle>\n                <CardDescription>\n                  Activate the project when all requirements are met\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {overallReadiness >= 90 ? (\n                  <form onSubmit={activationForm.handleSubmit(handleActivation)} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"activation_date\">Activation Date</Label>\n                      <Input\n                        type=\"date\"\n                        {...activationForm.register('activation_date', { required: true })}\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"responsible_manager\">Responsible Manager</Label>\n                      <Input\n                        placeholder=\"Project Manager Name\"\n                        {...activationForm.register('responsible_manager', { required: true })}\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"activation_notes\">Activation Notes</Label>\n                      <Textarea\n                        placeholder=\"Special instructions or notes for activation...\"\n                        {...activationForm.register('activation_notes')}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"notify_stakeholders\"\n                        {...activationForm.register('notify_stakeholders')}\n                      />\n                      <Label htmlFor=\"notify_stakeholders\" className=\"text-sm\">\n                        Notify all stakeholders\n                      </Label>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={createActivation.isPending}\n                    >\n                      {createActivation.isPending ? 'Activating...' : 'Activate Project'}\n                    </Button>\n                  </form>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <AlertTriangle className=\"mx-auto h-12 w-12 text-orange-400 mb-4\" />\n                    <h3 className=\"text-lg font-medium mb-2\">Project Not Ready</h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Project must be at least 90% ready for activation.\n                      Current readiness: {overallReadiness}%\n                    </p>\n                    <p className=\"text-sm text-gray-500\">\n                      Complete the missing requirements in the checklist to enable activation.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}