{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-projects.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport {\n  projectsApi,\n  type Project,\n  type ProjectFilters,\n  type CreateProjectRequest,\n  type UpdateProjectRequest,\n  type PaginatedResponse,\n} from \"@/lib/api-client\";\n\n// Query keys\nexport const projectKeys = {\n  all: [\"projects\"] as const,\n  lists: () => [...projectKeys.all, \"list\"] as const,\n  list: (filters: ProjectFilters) => [...projectKeys.lists(), filters] as const,\n  details: () => [...projectKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...projectKeys.details(), id] as const,\n};\n\n// Hooks\nexport function useProjects(filters?: ProjectFilters) {\n  return useQuery({\n    queryKey: projectKeys.list(filters || {}),\n    queryFn: () => projectsApi.getProjects(filters),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useProject(id: string) {\n  return useQuery({\n    queryKey: projectKeys.detail(id),\n    queryFn: () => projectsApi.getProject(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useCreateProject() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: CreateProjectRequest) => projectsApi.createProject(data),\n    onSuccess: (newProject) => {\n      // Invalidate and refetch projects list\n      queryClient.invalidateQueries({ queryKey: projectKeys.lists() });\n\n      // Add the new project to the cache\n      queryClient.setQueryData(projectKeys.detail(newProject.id), newProject);\n\n      toast.success(\"Project created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create project: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateProject() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdateProjectRequest }) =>\n      projectsApi.updateProject(id, data),\n    onMutate: async ({ id, data }) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: projectKeys.detail(id) });\n\n      // Snapshot the previous value\n      const previousProject = queryClient.getQueryData(projectKeys.detail(id));\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(projectKeys.detail(id), (old: Project | undefined) => {\n        if (!old) return old;\n        return { ...old, ...data };\n      });\n\n      // Return a context object with the snapshotted value\n      return { previousProject };\n    },\n    onError: (error, { id }, context) => {\n      // If the mutation fails, use the context returned from onMutate to roll back\n      if (context?.previousProject) {\n        queryClient.setQueryData(projectKeys.detail(id), context.previousProject);\n      }\n      toast.error(`Failed to update project: ${error.message}`);\n    },\n    onSuccess: (updatedProject) => {\n      // Invalidate and refetch projects list\n      queryClient.invalidateQueries({ queryKey: projectKeys.lists() });\n      toast.success(\"Project updated successfully\");\n    },\n    onSettled: (data, error, { id }) => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: projectKeys.detail(id) });\n    },\n  });\n}\n\nexport function useDeleteProject() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => projectsApi.deleteProject(id),\n    onSuccess: (_, deletedId) => {\n      // Remove from cache\n      queryClient.removeQueries({ queryKey: projectKeys.detail(deletedId) });\n\n      // Invalidate projects list\n      queryClient.invalidateQueries({ queryKey: projectKeys.lists() });\n\n      toast.success(\"Project deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete project: ${error.message}`);\n    },\n  });\n}\n\n// Optimistic mutations for better UX\nexport function useOptimisticProjectUpdate() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Project> }) =>\n      projectsApi.updateProject(id, data),\n    onMutate: async ({ id, data }) => {\n      await queryClient.cancelQueries({ queryKey: projectKeys.detail(id) });\n\n      const previousProject = queryClient.getQueryData(projectKeys.detail(id));\n\n      queryClient.setQueryData(projectKeys.detail(id), (old: Project | undefined) => {\n        if (!old) return old;\n        return { ...old, ...data };\n      });\n\n      // Also update in lists if present\n      queryClient.setQueriesData(\n        { queryKey: projectKeys.lists() },\n        (old: PaginatedResponse<Project> | undefined) => {\n          if (!old) return old;\n\n          return {\n            ...old,\n            items: old.items.map((project) =>\n              project.id === id ? { ...project, ...data } : project\n            ),\n          };\n        }\n      );\n\n      return { previousProject };\n    },\n    onError: (error, { id }, context) => {\n      if (context?.previousProject) {\n        queryClient.setQueryData(projectKeys.detail(id), context.previousProject);\n      }\n      // Invalidate lists to revert optimistic updates\n      queryClient.invalidateQueries({ queryKey: projectKeys.lists() });\n      toast.error(`Failed to update project: ${error.message}`);\n    },\n    onSuccess: () => {\n      toast.success(\"Project updated successfully\");\n    },\n  });\n}\n\n// Project statistics hook\nexport interface ProjectStats {\n  progress: {\n    totalLength: number;\n    completedLength: number;\n    progressPercentage: number;\n    workEntries: number;\n    pendingApprovals: number;\n    teamMembers: number;\n    materialsCount: number;\n  };\n  phase: {\n    currentPhase: number;\n    totalPhases: number;\n    phaseName: string;\n    phaseProgress: number;\n  };\n  financial: {\n    projectBudget: number;\n    totalSpent: number;\n    spentPercentage: number;\n    remainingBudget: number;\n  };\n}\n\nexport function useProjectStats(projectId: string) {\n  return useQuery({\n    queryKey: [...projectKeys.detail(projectId), \"stats\"],\n    queryFn: async (): Promise<ProjectStats> => {\n      const response = await fetch(`/api/projects/${projectId}/stats`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch project statistics');\n      }\n      return response.json();\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes - stats change more frequently\n    enabled: !!projectId,\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-project-preparation.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\n\nexport interface ProjectPreparation {\n  project: {\n    id: string;\n    name: string;\n    customer?: string;\n    city?: string;\n    address?: string;\n    contact_24h?: string;\n    start_date?: string;\n    end_date_plan?: string;\n    status: string;\n    total_length_m: number;\n    base_rate_per_m: number;\n    pm_user_id?: string;\n    project_manager?: string;\n  };\n  potential_revenue: number;\n  preparation_progress: number;\n  steps_summary: {\n    utility_contacts: number;\n    facilities: number;\n    housing_units: number;\n    crews: number;\n    materials: number;\n    equipment: number;\n  };\n}\n\nexport interface UtilityContact {\n  id: string;\n  kind: string;\n  organization: string;\n  phone?: string;\n  email?: string;\n  contact_person?: string;\n  notes?: string;\n}\n\nexport interface Facility {\n  id: string;\n  type: string;\n  rent_daily_eur: number;\n  service_freq?: string;\n  status: string;\n  start_date?: string;\n  end_date?: string;\n  location_text?: string;\n  supplier_name?: string;\n}\n\nexport interface HousingUnit {\n  id: string;\n  address: string;\n  rooms_total: number;\n  beds_total: number;\n  rent_daily_eur: number;\n  status: string;\n}\n\nexport interface CreateUtilityContactData {\n  project_id: string;\n  kind: string;\n  organization: string;\n  phone?: string;\n  email?: string;\n  contact_person?: string;\n  notes?: string;\n}\n\nexport interface CreateFacilityData {\n  project_id: string;\n  type: string;\n  supplier_id?: string;\n  rent_daily_eur: number;\n  service_freq?: string;\n  status: string;\n  start_date?: string;\n  end_date?: string;\n  location_text?: string;\n}\n\nexport interface CreateHousingData {\n  project_id: string;\n  address: string;\n  rooms_total: number;\n  beds_total: number;\n  rent_daily_eur: number;\n  status: string;\n}\n\nexport interface UpdateProjectStatusData {\n  project_id: string;\n  status: string;\n  reason?: string;\n}\n\nexport interface UpdateUtilityContactData {\n  id: string;\n  kind?: string;\n  organization?: string;\n  phone?: string;\n  email?: string;\n  contact_person?: string;\n  notes?: string;\n}\n\nexport interface UpdateFacilityData {\n  id: string;\n  type?: string;\n  supplier_id?: string;\n  rent_daily_eur?: number;\n  service_freq?: string;\n  status?: string;\n  start_date?: string;\n  end_date?: string;\n  location_text?: string;\n}\n\nexport interface UpdateHousingData {\n  id: string;\n  address?: string;\n  rooms_total?: number;\n  beds_total?: number;\n  rent_daily_eur?: number;\n  status?: string;\n}\n\nexport interface ProjectPlan {\n  id: string;\n  title: string;\n  description?: string;\n  plan_type: string;\n  filename: string;\n  file_path: string;\n  file_size: number;\n  uploaded_at: string;\n  uploaded_by?: string;\n}\n\nexport interface CreateProjectPlanData {\n  project_id: string;\n  title: string;\n  description?: string;\n  plan_type: string;\n  file: File;\n}\n\nconst api = {\n  getProjectPreparation: async (projectId: string): Promise<ProjectPreparation> => {\n    const response = await fetch(`/api/project-preparation?project_id=${projectId}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch project preparation data');\n    }\n\n    return response.json();\n  },\n\n  updateProjectStatus: async (data: UpdateProjectStatusData): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch('/api/project-preparation', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update project status');\n    }\n\n    return response.json();\n  },\n\n  getUtilityContacts: async (projectId: string): Promise<UtilityContact[]> => {\n    const response = await fetch(`/api/project-preparation/utility-contacts?project_id=${projectId}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch utility contacts');\n    }\n\n    return response.json();\n  },\n\n  createUtilityContact: async (data: CreateUtilityContactData): Promise<{ success: boolean; contact_id: string; message: string }> => {\n    const response = await fetch('/api/project-preparation/utility-contacts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create utility contact');\n    }\n\n    return response.json();\n  },\n\n  getFacilities: async (projectId: string): Promise<Facility[]> => {\n    const response = await fetch(`/api/project-preparation/facilities?project_id=${projectId}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch facilities');\n    }\n\n    return response.json();\n  },\n\n  createFacility: async (data: CreateFacilityData): Promise<{ success: boolean; facility_id: string; message: string }> => {\n    const response = await fetch('/api/project-preparation/facilities', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create facility');\n    }\n\n    return response.json();\n  },\n\n  getHousingUnits: async (projectId: string): Promise<HousingUnit[]> => {\n    const response = await fetch(`/api/project-preparation/housing?project_id=${projectId}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch housing units');\n    }\n\n    return response.json();\n  },\n\n  createHousingUnit: async (data: CreateHousingData): Promise<{ success: boolean; housing_id: string; message: string }> => {\n    const response = await fetch('/api/project-preparation/housing', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create housing unit');\n    }\n\n    return response.json();\n  },\n\n  // UPDATE methods\n  updateUtilityContact: async (data: UpdateUtilityContactData): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/project-preparation/utility-contacts/${data.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update utility contact');\n    }\n\n    return response.json();\n  },\n\n  updateFacility: async (data: UpdateFacilityData): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/project-preparation/facilities/${data.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update facility');\n    }\n\n    return response.json();\n  },\n\n  updateHousingUnit: async (data: UpdateHousingData): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/project-preparation/housing/${data.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update housing unit');\n    }\n\n    return response.json();\n  },\n\n  // DELETE methods\n  deleteUtilityContact: async (id: string): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/project-preparation/utility-contacts/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete utility contact');\n    }\n\n    return response.json();\n  },\n\n  deleteFacility: async (id: string): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/project-preparation/facilities/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete facility');\n    }\n\n    return response.json();\n  },\n\n  deleteHousingUnit: async (id: string): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/project-preparation/housing/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete housing unit');\n    }\n\n    return response.json();\n  },\n\n  // Project Plans API\n  getProjectPlans: async (projectId: string): Promise<ProjectPlan[]> => {\n    const response = await fetch(`/api/project-preparation/plans?project_id=${projectId}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch project plans');\n    }\n\n    return response.json();\n  },\n\n  createProjectPlan: async (data: CreateProjectPlanData): Promise<{ success: boolean; plan_id: string; message: string }> => {\n    const formData = new FormData();\n    formData.append('file', data.file);\n    formData.append('title', data.title);\n    formData.append('description', data.description || '');\n    formData.append('plan_type', data.plan_type);\n    formData.append('project_id', data.project_id);\n\n    const response = await fetch('/api/project-preparation/plans', {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to upload plan');\n    }\n\n    return response.json();\n  },\n\n  deleteProjectPlan: async (id: string): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/project-preparation/plans/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete plan');\n    }\n\n    return response.json();\n  },\n};\n\nexport function useProjectPreparation(projectId: string) {\n  return useQuery({\n    queryKey: ['project-preparation', projectId],\n    queryFn: () => api.getProjectPreparation(projectId),\n    enabled: !!projectId,\n  });\n}\n\nexport function useUpdateProjectStatus() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.updateProjectStatus,\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['project-preparation', variables.project_id] });\n      queryClient.invalidateQueries({ queryKey: ['projects'] });\n      toast.success(data.message || 'Project status updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useUtilityContacts(projectId: string) {\n  return useQuery({\n    queryKey: ['utility-contacts', projectId],\n    queryFn: () => api.getUtilityContacts(projectId),\n    enabled: !!projectId,\n  });\n}\n\nexport function useCreateUtilityContact() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.createUtilityContact,\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['utility-contacts', variables.project_id] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation', variables.project_id] });\n      toast.success(data.message || 'Utility contact created successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useFacilities(projectId: string) {\n  return useQuery({\n    queryKey: ['facilities', projectId],\n    queryFn: () => api.getFacilities(projectId),\n    enabled: !!projectId,\n  });\n}\n\nexport function useCreateFacility() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.createFacility,\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['facilities', variables.project_id] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation', variables.project_id] });\n      queryClient.invalidateQueries({ queryKey: ['project-costs', variables.project_id] });\n      toast.success(data.message || 'Facility created successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useHousingUnits(projectId: string) {\n  return useQuery({\n    queryKey: ['housing-units', projectId],\n    queryFn: () => api.getHousingUnits(projectId),\n    enabled: !!projectId,\n  });\n}\n\nexport function useCreateHousingUnit() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.createHousingUnit,\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['housing-units', variables.project_id] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation', variables.project_id] });\n      toast.success(data.message || 'Housing unit created successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\n// UPDATE hooks\nexport function useUpdateUtilityContact() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.updateUtilityContact,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['utility-contacts'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      toast.success(data.message || 'Utility contact updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useUpdateFacility() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.updateFacility,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['facilities'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      toast.success(data.message || 'Facility updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useUpdateHousingUnit() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.updateHousingUnit,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['housing-units'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      toast.success(data.message || 'Housing unit updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\n// DELETE hooks\nexport function useDeleteUtilityContact() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.deleteUtilityContact,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['utility-contacts'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      toast.success(data.message || 'Utility contact deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useDeleteFacility() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.deleteFacility,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['facilities'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      queryClient.invalidateQueries({ queryKey: ['project-costs'] });\n      toast.success(data.message || 'Facility deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useDeleteHousingUnit() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.deleteHousingUnit,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['housing-units'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      queryClient.invalidateQueries({ queryKey: ['project-costs'] });\n      toast.success(data.message || 'Housing unit deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\n// Project Plans hooks\nexport function useProjectPlans(projectId: string) {\n  return useQuery({\n    queryKey: ['project-plans', projectId],\n    queryFn: () => api.getProjectPlans(projectId),\n    enabled: !!projectId,\n  });\n}\n\nexport function useCreateProjectPlan() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.createProjectPlan,\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['project-plans', variables.project_id] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation', variables.project_id] });\n      toast.success(data.message || 'Plan uploaded successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useDeleteProjectPlan() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.deleteProjectPlan,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['project-plans'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      toast.success(data.message || 'Plan deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1080, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-zone-layout.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\n\nexport interface Cabinet {\n  id: string;\n  code: string;\n  name: string;\n  address?: string;\n  notes?: string;\n  segment_count?: number;\n  total_length?: number;\n  status?: string;\n}\n\nexport interface Segment {\n  id: string;\n  cabinet_id: string;\n  cabinet_code: string;\n  name: string;\n  length_planned_m?: number;\n  surface?: string;\n  area?: string;\n  depth_req_m?: number;\n  width_req_m?: number;\n  status?: string;\n}\n\nexport interface CreateCabinetData {\n  project_id: string;\n  code: string;\n  name: string;\n  address?: string;\n  notes?: string;\n}\n\nexport interface UpdateCabinetData {\n  id: string;\n  code?: string;\n  name?: string;\n  address?: string;\n  notes?: string;\n  status?: string;\n}\n\nconst api = {\n  getCabinets: async (projectId: string): Promise<Cabinet[]> => {\n    const response = await fetch(`/api/zone-layout/cabinets?project_id=${projectId}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch cabinets');\n    }\n\n    return response.json();\n  },\n\n  createCabinet: async (data: CreateCabinetData): Promise<{ success: boolean; cabinet_id: string; message: string }> => {\n    const response = await fetch('/api/zone-layout/cabinets', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create cabinet');\n    }\n\n    return response.json();\n  },\n\n  updateCabinet: async (data: UpdateCabinetData): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/zone-layout/cabinets/${data.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update cabinet');\n    }\n\n    return response.json();\n  },\n\n  deleteCabinet: async (id: string): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/zone-layout/cabinets/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete cabinet');\n    }\n\n    return response.json();\n  },\n\n  getSegments: async (projectId: string): Promise<Segment[]> => {\n    const response = await fetch(`/api/zone-layout/segments?project_id=${projectId}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch segments');\n    }\n\n    return response.json();\n  },\n};\n\nexport function useCabinets(projectId: string) {\n  return useQuery({\n    queryKey: ['cabinets', projectId],\n    queryFn: () => api.getCabinets(projectId),\n    enabled: !!projectId,\n  });\n}\n\nexport function useCreateCabinet() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.createCabinet,\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['cabinets', variables.project_id] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation', variables.project_id] });\n      toast.success(data.message || 'Cabinet created successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useUpdateCabinet() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.updateCabinet,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['cabinets'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      toast.success(data.message || 'Cabinet updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useDeleteCabinet() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.deleteCabinet,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['cabinets'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      toast.success(data.message || 'Cabinet deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useSegments(projectId: string) {\n  return useQuery({\n    queryKey: ['segments', projectId],\n    queryFn: () => api.getSegments(projectId),\n    enabled: !!projectId,\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1297, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-housing-units.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\n\nexport interface HousingUnit {\n  id: string;\n  project_id: string;\n  house_id?: string;\n  unit_number?: string;\n  unit_type: string;\n  floor?: number;\n  room_count?: number;\n  area_sqm?: number;\n  contact_person?: string;\n  contact_phone?: string;\n  access_instructions?: string;\n  installation_notes?: string;\n  status: string;\n  created_at: string;\n  updated_at: string;\n  project_name?: string;\n  project_city?: string;\n  house_street?: string;\n  house_city?: string;\n  house_number?: string;\n  postal_code?: string;\n  full_address?: string;\n}\n\nexport interface CreateHousingUnitData {\n  project_id: string;\n  address: string;\n  rooms_total: number;\n  beds_total: number;\n  rent_daily_eur: number;\n  status: string;\n  advance_payment?: number;\n  check_in_date?: string;\n  check_out_date?: string;\n}\n\nexport interface UpdateHousingUnitData {\n  id: string;\n  address?: string;\n  rooms_total?: number;\n  beds_total?: number;\n  rent_daily_eur?: number;\n  status?: string;\n  advance_payment?: number;\n  check_in_date?: string;\n  check_out_date?: string;\n}\n\nconst api = {\n  getHousingUnits: async (projectId: string): Promise<any[]> => {\n    const response = await fetch(`/api/project-preparation/housing?project_id=${projectId}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch housing units');\n    }\n\n    const data = await response.json();\n    return Array.isArray(data) ? data : [];\n  },\n\n  createHousingUnit: async (data: CreateHousingUnitData): Promise<{ success: boolean; housing_unit_id: string; message: string }> => {\n    const response = await fetch('/api/project-preparation/housing', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create housing unit');\n    }\n\n    return response.json();\n  },\n\n  updateHousingUnit: async (data: UpdateHousingUnitData): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/project-preparation/housing/${data.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update housing unit');\n    }\n\n    return response.json();\n  },\n\n  deleteHousingUnit: async (id: string): Promise<{ success: boolean; message: string }> => {\n    const response = await fetch(`/api/project-preparation/housing/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete housing unit');\n    }\n\n    return response.json();\n  },\n};\n\nexport function useHousingUnits(projectId: string) {\n  return useQuery({\n    queryKey: ['housing-units', projectId],\n    queryFn: () => api.getHousingUnits(projectId),\n    enabled: !!projectId,\n  });\n}\n\nexport function useCreateHousingUnit() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.createHousingUnit,\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['housing-units', variables.project_id] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation', variables.project_id] });\n      queryClient.invalidateQueries({ queryKey: ['project-costs', variables.project_id] });\n      toast.success(data.message || 'Housing unit created successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useUpdateHousingUnit() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.updateHousingUnit,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['housing-units'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      queryClient.invalidateQueries({ queryKey: ['project-costs'] });\n      toast.success(data.message || 'Housing unit updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useDeleteHousingUnit() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.deleteHousingUnit,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['housing-units'] });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      queryClient.invalidateQueries({ queryKey: ['project-costs'] });\n      toast.success(data.message || 'Housing unit deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1504, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-houses.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport {\n  housesApi,\n  appointmentsApi,\n  type House,\n  type HouseAppointment,\n  type HouseFilters,\n  type AppointmentFilters,\n  type CreateHouseRequest,\n  type UpdateHouseRequest,\n  type ScheduleAppointmentRequest,\n  type StartConnectionRequest,\n  type CompleteConnectionRequest,\n  type PaginatedResponse,\n} from \"@/lib/api-client\";\n\n// Query keys\nexport const houseKeys = {\n  all: [\"houses\"] as const,\n  lists: () => [...houseKeys.all, \"list\"] as const,\n  list: (filters: HouseFilters) => [...houseKeys.lists(), filters] as const,\n  details: () => [...houseKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...houseKeys.details(), id] as const,\n  project: (projectId: string) => [...houseKeys.all, \"project\", projectId] as const,\n  team: (teamId: string) => [...houseKeys.all, \"team\", teamId] as const,\n};\n\nexport const appointmentKeys = {\n  all: [\"appointments\"] as const,\n  lists: () => [...appointmentKeys.all, \"list\"] as const,\n  list: (filters: AppointmentFilters) => [...appointmentKeys.lists(), filters] as const,\n  details: () => [...appointmentKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...appointmentKeys.details(), id] as const,\n};\n\n// House Hooks\nexport function useHouses(filters?: HouseFilters) {\n  return useQuery({\n    queryKey: houseKeys.list(filters || {}),\n    queryFn: () => housesApi.getHouses(filters),\n    staleTime: 3 * 60 * 1000, // 3 minutes\n  });\n}\n\nexport function useHouse(id: string) {\n  return useQuery({\n    queryKey: houseKeys.detail(id),\n    queryFn: () => housesApi.getHouse(id),\n    enabled: !!id,\n    staleTime: 3 * 60 * 1000,\n  });\n}\n\nexport function useProjectHouses(projectId: string) {\n  return useQuery({\n    queryKey: houseKeys.project(projectId),\n    queryFn: () => housesApi.getProjectHouses(projectId),\n    enabled: !!projectId,\n    staleTime: 3 * 60 * 1000,\n  });\n}\n\nexport function useTeamHouses(teamId: string) {\n  return useQuery({\n    queryKey: houseKeys.team(teamId),\n    queryFn: () => housesApi.getTeamHouses(teamId),\n    enabled: !!teamId,\n    staleTime: 3 * 60 * 1000,\n  });\n}\n\nexport function useCreateHouse() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: CreateHouseRequest) => housesApi.createHouse(data),\n    onSuccess: (newHouse) => {\n      queryClient.invalidateQueries({ queryKey: houseKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.project(newHouse.project_id) });\n      queryClient.setQueryData(houseKeys.detail(newHouse.id), newHouse);\n      toast.success(\"House created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create house: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateHouse() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdateHouseRequest }) =>\n      housesApi.updateHouse(id, data),\n    onMutate: async ({ id, data }) => {\n      await queryClient.cancelQueries({ queryKey: houseKeys.detail(id) });\n      const previousHouse = queryClient.getQueryData(houseKeys.detail(id));\n\n      queryClient.setQueryData(houseKeys.detail(id), (old: House | undefined) => {\n        if (!old) return old;\n        return { ...old, ...data };\n      });\n\n      return { previousHouse };\n    },\n    onError: (error, { id }, context) => {\n      if (context?.previousHouse) {\n        queryClient.setQueryData(houseKeys.detail(id), context.previousHouse);\n      }\n      toast.error(`Failed to update house: ${error.message}`);\n    },\n    onSuccess: (updatedHouse) => {\n      queryClient.invalidateQueries({ queryKey: houseKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.project(updatedHouse.project_id) });\n      if (updatedHouse.assigned_team_id) {\n        queryClient.invalidateQueries({ queryKey: houseKeys.team(updatedHouse.assigned_team_id) });\n      }\n      toast.success(\"House updated successfully\");\n    },\n    onSettled: (data, error, { id }) => {\n      queryClient.invalidateQueries({ queryKey: houseKeys.detail(id) });\n    },\n  });\n}\n\nexport function useDeleteHouse() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => housesApi.deleteHouse(id),\n    onSuccess: (_, deletedId) => {\n      queryClient.removeQueries({ queryKey: houseKeys.detail(deletedId) });\n      queryClient.invalidateQueries({ queryKey: houseKeys.lists() });\n      // Also invalidate project and team queries\n      queryClient.invalidateQueries({ queryKey: houseKeys.all });\n      toast.success(\"House deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete house: ${error.message}`);\n    },\n  });\n}\n\nexport function useStartConnection() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: StartConnectionRequest) => housesApi.startConnection(data),\n    onSuccess: (updatedHouse) => {\n      queryClient.setQueryData(houseKeys.detail(updatedHouse.id), updatedHouse);\n      queryClient.invalidateQueries({ queryKey: houseKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.project(updatedHouse.project_id) });\n      if (updatedHouse.assigned_team_id) {\n        queryClient.invalidateQueries({ queryKey: houseKeys.team(updatedHouse.assigned_team_id) });\n      }\n      toast.success(\"Connection work started successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to start connection: ${error.message}`);\n    },\n  });\n}\n\nexport function useCompleteConnection() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: CompleteConnectionRequest) => housesApi.completeConnection(data),\n    onSuccess: (updatedHouse) => {\n      queryClient.setQueryData(houseKeys.detail(updatedHouse.id), updatedHouse);\n      queryClient.invalidateQueries({ queryKey: houseKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.project(updatedHouse.project_id) });\n      if (updatedHouse.assigned_team_id) {\n        queryClient.invalidateQueries({ queryKey: houseKeys.team(updatedHouse.assigned_team_id) });\n      }\n      toast.success(\"Connection completed successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to complete connection: ${error.message}`);\n    },\n  });\n}\n\n// Appointment Hooks\nexport function useAppointments(filters?: AppointmentFilters) {\n  return useQuery({\n    queryKey: appointmentKeys.list(filters || {}),\n    queryFn: () => appointmentsApi.getAppointments(filters),\n    staleTime: 2 * 60 * 1000, // 2 minutes - appointments change more frequently\n  });\n}\n\nexport function useAppointment(id: string) {\n  return useQuery({\n    queryKey: appointmentKeys.detail(id),\n    queryFn: () => appointmentsApi.getAppointment(id),\n    enabled: !!id,\n    staleTime: 2 * 60 * 1000,\n  });\n}\n\nexport function useScheduleAppointment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: ScheduleAppointmentRequest) => housesApi.scheduleAppointment(data),\n    onSuccess: (newAppointment) => {\n      queryClient.invalidateQueries({ queryKey: appointmentKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.detail(newAppointment.house_id) });\n      queryClient.setQueryData(appointmentKeys.detail(newAppointment.id), newAppointment);\n      toast.success(\"Appointment scheduled successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to schedule appointment: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateAppointment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<HouseAppointment> }) =>\n      appointmentsApi.updateAppointment(id, data),\n    onSuccess: (updatedAppointment) => {\n      queryClient.setQueryData(appointmentKeys.detail(updatedAppointment.id), updatedAppointment);\n      queryClient.invalidateQueries({ queryKey: appointmentKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.detail(updatedAppointment.house_id) });\n      toast.success(\"Appointment updated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to update appointment: ${error.message}`);\n    },\n  });\n}\n\nexport function useCancelAppointment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, reason }: { id: string; reason: string }) =>\n      appointmentsApi.cancelAppointment(id, reason),\n    onSuccess: (cancelledAppointment) => {\n      queryClient.setQueryData(appointmentKeys.detail(cancelledAppointment.id), cancelledAppointment);\n      queryClient.invalidateQueries({ queryKey: appointmentKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.detail(cancelledAppointment.house_id) });\n      toast.success(\"Appointment cancelled\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to cancel appointment: ${error.message}`);\n    },\n  });\n}\n\nexport function useRescheduleAppointment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, newDate }: { id: string; newDate: string }) =>\n      appointmentsApi.rescheduleAppointment(id, newDate),\n    onSuccess: (rescheduledAppointment) => {\n      queryClient.setQueryData(appointmentKeys.detail(rescheduledAppointment.id), rescheduledAppointment);\n      queryClient.invalidateQueries({ queryKey: appointmentKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.detail(rescheduledAppointment.house_id) });\n      toast.success(\"Appointment rescheduled successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to reschedule appointment: ${error.message}`);\n    },\n  });\n}\n\nexport function useConfirmAppointment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => appointmentsApi.confirmAppointment(id),\n    onSuccess: (confirmedAppointment) => {\n      queryClient.setQueryData(appointmentKeys.detail(confirmedAppointment.id), confirmedAppointment);\n      queryClient.invalidateQueries({ queryKey: appointmentKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.detail(confirmedAppointment.house_id) });\n      toast.success(\"Appointment confirmed\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to confirm appointment: ${error.message}`);\n    },\n  });\n}\n\nexport function useStartAppointment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => appointmentsApi.startAppointment(id),\n    onSuccess: (startedAppointment) => {\n      queryClient.setQueryData(appointmentKeys.detail(startedAppointment.id), startedAppointment);\n      queryClient.invalidateQueries({ queryKey: appointmentKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.detail(startedAppointment.house_id) });\n      toast.success(\"Appointment started\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to start appointment: ${error.message}`);\n    },\n  });\n}\n\nexport function useCompleteAppointment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, notes }: { id: string; notes?: string }) =>\n      appointmentsApi.completeAppointment(id, notes),\n    onSuccess: (completedAppointment) => {\n      queryClient.setQueryData(appointmentKeys.detail(completedAppointment.id), completedAppointment);\n      queryClient.invalidateQueries({ queryKey: appointmentKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: houseKeys.detail(completedAppointment.house_id) });\n      toast.success(\"Appointment completed\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to complete appointment: ${error.message}`);\n    },\n  });\n}\n\n// Specialized hooks for common use cases\nexport function usePendingConnections() {\n  return useHouses({\n    status: \"not_assigned\",\n    page: 1,\n    per_page: 50,\n  });\n}\n\nexport function useScheduledAppointments() {\n  return useAppointments({\n    status: \"scheduled\",\n    page: 1,\n    per_page: 20,\n  });\n}\n\nexport function useInProgressConnections() {\n  return useHouses({\n    status: \"in_progress\",\n    page: 1,\n    per_page: 20,\n  });\n}\n\nexport function useCompletedConnections() {\n  return useHouses({\n    status: \"connected\",\n    page: 1,\n    per_page: 20,\n  });\n}\n\nexport function useTodaysAppointments() {\n  const today = new Date().toISOString().split('T')[0];\n  return useAppointments({\n    scheduled_date_from: today,\n    scheduled_date_to: today,\n    page: 1,\n    per_page: 50,\n  });\n}\n\n// Project Preparation specific hooks\nexport interface ProjectHouse {\n  id: string;\n  project_id: string;\n  address: string;\n  house_number?: string;\n  apartment_count: number;\n  floor_count?: number;\n  connection_type: string;\n  method: string;\n  house_type?: string;\n  status: string;\n  planned_connection_date?: string;\n  contact_name?: string;\n  contact_phone?: string;\n  contact_email?: string;\n  coordinates_lat?: number;\n  coordinates_lng?: number;\n  notes?: string;\n}\n\nexport interface HouseDocument {\n  id: string;\n  house_id: string;\n  doc_type: string;\n  filename: string;\n  file_path: string;\n  upload_date: string;\n  uploaded_by?: string;\n}\n\nexport interface ProjectHousesResponse {\n  houses: ProjectHouse[];\n  summary: {\n    total_houses: number;\n    connected_count: number;\n    assigned_count: number;\n    total_apartments: number;\n  };\n}\n\nexport interface CreateHouseData {\n  project_id: string;\n  address: string;\n  house_number?: string;\n  apartment_count: number;\n  floor_count: number;\n  connection_type: string;\n  method: string;\n  house_type: string;\n  planned_connection_date?: string;\n  contact_name?: string;\n  contact_phone?: string;\n  contact_email?: string;\n  coordinates_lat?: number;\n  coordinates_lng?: number;\n  notes?: string;\n}\n\nexport interface UpdateHouseData {\n  house_id: string;\n  address: string;\n  house_number?: string;\n  connection_type: string;\n  method: string;\n  status: string;\n  planned_connection_date?: string;\n  contact_name?: string;\n  contact_phone?: string;\n  notes?: string;\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2234, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-teams.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport {\n  teamsApi,\n  type Crew,\n  type PaginatedResponse,\n} from \"@/lib/api-client\";\n\n// Query keys\nexport const teamKeys = {\n  all: [\"teams\"] as const,\n  crews: () => [...teamKeys.all, \"crews\"] as const,\n  crew: (id: string) => [...teamKeys.all, \"crew\", id] as const,\n};\n\n// Hooks\nexport function useTeams() {\n  return useQuery({\n    queryKey: teamKeys.crews(),\n    queryFn: async () => {\n      const response = await fetch('/api/crews');\n      if (!response.ok) {\n        throw new Error('Failed to fetch crews');\n      }\n      const data = await response.json();\n      return data.crews || [];\n    },\n    staleTime: 30 * 1000, // 30 seconds - frequent updates for team changes\n  });\n}\n\nexport function useCrew(id: string) {\n  return useQuery({\n    queryKey: teamKeys.crew(id),\n    queryFn: () => teamsApi.getCrew(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  });\n}\n\nexport function useCreateCrew() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<Crew>) => teamsApi.createCrew(data),\n    onSuccess: (newCrew) => {\n      // Invalidate and refetch crews list\n      queryClient.invalidateQueries({ queryKey: teamKeys.crews() });\n\n      // Add the new crew to the cache\n      queryClient.setQueryData(teamKeys.crew(newCrew.id), newCrew);\n\n      toast.success(\"Team created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create team: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateCrew() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Crew> }) =>\n      teamsApi.updateCrew(id, data),\n    onMutate: async ({ id, data }) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: teamKeys.crew(id) });\n\n      // Snapshot the previous value\n      const previousCrew = queryClient.getQueryData(teamKeys.crew(id));\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(teamKeys.crew(id), (old: Crew | undefined) => {\n        if (!old) return old;\n        return { ...old, ...data };\n      });\n\n      // Return a context object with the snapshotted value\n      return { previousCrew };\n    },\n    onError: (error, { id }, context) => {\n      // If the mutation fails, use the context returned from onMutate to roll back\n      if (context?.previousCrew) {\n        queryClient.setQueryData(teamKeys.crew(id), context.previousCrew);\n      }\n      toast.error(`Failed to update team: ${error.message}`);\n    },\n    onSuccess: () => {\n      // Invalidate and refetch crews list\n      queryClient.invalidateQueries({ queryKey: teamKeys.crews() });\n      toast.success(\"Team updated successfully\");\n    },\n    onSettled: (data, error, { id }) => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: teamKeys.crew(id) });\n    },\n  });\n}\n\nexport function useDeleteCrew() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => teamsApi.deleteCrew(id),\n    onSuccess: (_, deletedId) => {\n      // Remove from cache\n      queryClient.removeQueries({ queryKey: teamKeys.crew(deletedId) });\n\n      // Invalidate crews list\n      queryClient.invalidateQueries({ queryKey: teamKeys.crews() });\n\n      toast.success(\"Team deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete team: ${error.message}`);\n    },\n  });\n}\n\n// Additional interfaces for project preparation\nexport interface ProjectUser {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  assigned_at: string;\n  assigned_by: string;\n}\n\nexport interface GlobalTeam {\n  id: string;\n  name: string;\n  foreman_name?: string;\n  is_active: boolean;\n  project_count?: number;\n  specialization?: string;\n  member_count: number;\n}\n\n// Additional hooks for project preparation\nexport function useGlobalTeams() {\n  return useQuery({\n    queryKey: ['global-teams'],\n    queryFn: async (): Promise<GlobalTeam[]> => {\n      const response = await fetch('/api/crews');\n      if (!response.ok) {\n        throw new Error('Failed to fetch global teams');\n      }\n      const data = await response.json();\n      const crews = data.crews || [];\n\n      // Transform to GlobalTeam format and count projects per team\n      const projectCounts: Record<string, number> = {};\n      crews.forEach((crew: any) => {\n        if (crew.project_id) {\n          projectCounts[crew.name] = (projectCounts[crew.name] || 0) + 1;\n        }\n      });\n\n      return crews.map((crew: any) => ({\n        id: crew.id,\n        name: crew.name,\n        foreman_name: crew.foreman?.full_name || crew.foreman_name,\n        is_active: crew.status === 'active',\n        project_count: projectCounts[crew.name] || 0,\n        specialization: 'mixed',\n        member_count: crew.member_count || 0\n      }));\n    },\n  });\n}\n\nexport function useProjectUsers(projectId: string) {\n  return useQuery({\n    queryKey: ['project-users', projectId],\n    queryFn: async (): Promise<ProjectUser[]> => {\n      try {\n        const response = await fetch(`/api/projects/${projectId}/users`);\n        if (!response.ok) {\n          if (response.status === 404) {\n            return []; // No users assigned yet\n          }\n          throw new Error('Failed to fetch project users');\n        }\n        const data = await response.json();\n        return data.users || [];\n      } catch (error) {\n        console.warn('Project users not available:', error);\n        return []; // Return empty array instead of mock data\n      }\n    },\n    enabled: !!projectId,\n  });\n}\n\nexport function useForemenUsers() {\n  return useQuery({\n    queryKey: ['foremen-users'],\n    queryFn: async () => {\n      const response = await fetch('/api/users?role=foreman&is_active=true');\n      if (!response.ok) {\n        // Try to get PM users as well if no foremen\n        const pmResponse = await fetch('/api/users?role=pm&is_active=true');\n        if (!pmResponse.ok) {\n          throw new Error('Failed to fetch users');\n        }\n        const pmData = await pmResponse.json();\n        return pmData.items || [];\n      }\n      const data = await response.json();\n\n      // If no foremen, get both foremen and PMs\n      if (data.items.length === 0) {\n        const allResponse = await fetch('/api/users?is_active=true');\n        if (!allResponse.ok) {\n          throw new Error('Failed to fetch users');\n        }\n        const allData = await allResponse.json();\n        return (allData.items || []).filter((user: any) =>\n          user.role === 'foreman' || user.role === 'pm'\n        );\n      }\n\n      return data.items || [];\n    },\n  });\n}\n\nexport function useCreateTeam() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/crews', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create team');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      if (variables.project_id) {\n        queryClient.invalidateQueries({ queryKey: ['project-teams', variables.project_id] });\n        queryClient.invalidateQueries({ queryKey: ['project-preparation', variables.project_id] });\n      }\n      queryClient.invalidateQueries({ queryKey: ['global-teams'] });\n      queryClient.invalidateQueries({ queryKey: teamKeys.crews() });\n      toast.success(data.message || 'Team created successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\n// Specialized hooks\nexport function useProjectTeams(projectId: string) {\n  return useQuery({\n    queryKey: ['project-teams', projectId],\n    queryFn: async () => {\n      const response = await fetch(`/api/crews?project_id=${projectId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch project teams');\n      }\n      const data = await response.json();\n      return data.crews || [];\n    },\n    enabled: !!projectId,\n  });\n}\n\nexport function useAvailableTeams() {\n  const { data: crews, ...rest } = useTeams();\n\n  return {\n    ...rest,\n    data: crews?.filter(crew => !crew.project_id) || [],\n  };\n}\n\nexport function useUpdateTeam() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/crews/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update team');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['project-teams'] });\n      queryClient.invalidateQueries({ queryKey: ['global-teams'] });\n      queryClient.invalidateQueries({ queryKey: teamKeys.crews() });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      toast.success(data.message || 'Team updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useDeleteTeam() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/crews/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to delete team');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['project-teams'] });\n      queryClient.invalidateQueries({ queryKey: ['global-teams'] });\n      queryClient.invalidateQueries({ queryKey: teamKeys.crews() });\n      queryClient.invalidateQueries({ queryKey: ['project-preparation'] });\n      toast.success(data.message || 'Team deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;;;;;AAOO,MAAM,WAAW;IACtB,KAAK;QAAC;KAAQ;IACd,OAAO,IAAM;eAAI,SAAS,GAAG;YAAE;SAAQ;IACvC,MAAM,CAAC,KAAe;eAAI,SAAS,GAAG;YAAE;YAAQ;SAAG;AACrD;AAGO,SAAS;;IACd,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU,SAAS,KAAK;QACxB,OAAO;iCAAE;gBACP,MAAM,WAAW,MAAM,MAAM;gBAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,IAAI,MAAM;gBAClB;gBACA,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,OAAO,KAAK,KAAK,IAAI,EAAE;YACzB;;QACA,WAAW,KAAK;IAClB;AACF;GAbgB;;QACP,0LAAQ;;;AAcV,SAAS,QAAQ,EAAU;;IAChC,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU,SAAS,IAAI,CAAC;QACxB,OAAO;gCAAE,IAAM,0IAAQ,CAAC,OAAO,CAAC;;QAChC,SAAS,CAAC,CAAC;QACX,WAAW,IAAI,KAAK;IACtB;AACF;IAPgB;;QACP,0LAAQ;;;AAQV,SAAS;;IACd,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;yCAAE,CAAC,OAAwB,0IAAQ,CAAC,UAAU,CAAC;;QACzD,SAAS;yCAAE,CAAC;gBACV,oCAAoC;gBACpC,YAAY,iBAAiB,CAAC;oBAAE,UAAU,SAAS,KAAK;gBAAG;gBAE3D,gCAAgC;gBAChC,YAAY,YAAY,CAAC,SAAS,IAAI,CAAC,QAAQ,EAAE,GAAG;gBAEpD,oJAAK,CAAC,OAAO,CAAC;YAChB;;QACA,OAAO;yCAAE,CAAC;gBACR,oJAAK,CAAC,KAAK,CAAC,AAAC,0BAAuC,OAAd,MAAM,OAAO;YACrD;;IACF;AACF;IAlBgB;;QACM,2MAAc;QAE3B,gMAAW;;;AAiBb,SAAS;;IACd,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;yCAAE;oBAAC,EAAE,EAAE,EAAE,IAAI,EAAuC;uBAC5D,0IAAQ,CAAC,UAAU,CAAC,IAAI;;;QAC1B,QAAQ;yCAAE;oBAAO,EAAE,EAAE,EAAE,IAAI,EAAE;gBAC3B,gCAAgC;gBAChC,MAAM,YAAY,aAAa,CAAC;oBAAE,UAAU,SAAS,IAAI,CAAC;gBAAI;gBAE9D,8BAA8B;gBAC9B,MAAM,eAAe,YAAY,YAAY,CAAC,SAAS,IAAI,CAAC;gBAE5D,yCAAyC;gBACzC,YAAY,YAAY,CAAC,SAAS,IAAI,CAAC;iDAAK,CAAC;wBAC3C,IAAI,CAAC,KAAK,OAAO;wBACjB,OAAO;4BAAE,GAAG,GAAG;4BAAE,GAAG,IAAI;wBAAC;oBAC3B;;gBAEA,qDAAqD;gBACrD,OAAO;oBAAE;gBAAa;YACxB;;QACA,OAAO;yCAAE,CAAC,cAAe;oBAAR,EAAE,EAAE,EAAE;gBACrB,6EAA6E;gBAC7E,IAAI,oBAAA,8BAAA,QAAS,YAAY,EAAE;oBACzB,YAAY,YAAY,CAAC,SAAS,IAAI,CAAC,KAAK,QAAQ,YAAY;gBAClE;gBACA,oJAAK,CAAC,KAAK,CAAC,AAAC,0BAAuC,OAAd,MAAM,OAAO;YACrD;;QACA,SAAS;yCAAE;gBACT,oCAAoC;gBACpC,YAAY,iBAAiB,CAAC;oBAAE,UAAU,SAAS,KAAK;gBAAG;gBAC3D,oJAAK,CAAC,OAAO,CAAC;YAChB;;QACA,SAAS;yCAAE,CAAC,MAAM;oBAAO,EAAE,EAAE,EAAE;gBAC7B,wCAAwC;gBACxC,YAAY,iBAAiB,CAAC;oBAAE,UAAU,SAAS,IAAI,CAAC;gBAAI;YAC9D;;IACF;AACF;IAvCgB;;QACM,2MAAc;QAE3B,gMAAW;;;AAsCb,SAAS;;IACd,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;yCAAE,CAAC,KAAe,0IAAQ,CAAC,UAAU,CAAC;;QAChD,SAAS;yCAAE,CAAC,GAAG;gBACb,oBAAoB;gBACpB,YAAY,aAAa,CAAC;oBAAE,UAAU,SAAS,IAAI,CAAC;gBAAW;gBAE/D,wBAAwB;gBACxB,YAAY,iBAAiB,CAAC;oBAAE,UAAU,SAAS,KAAK;gBAAG;gBAE3D,oJAAK,CAAC,OAAO,CAAC;YAChB;;QACA,OAAO;yCAAE,CAAC;gBACR,oJAAK,CAAC,KAAK,CAAC,AAAC,0BAAuC,OAAd,MAAM,OAAO;YACrD;;IACF;AACF;IAlBgB;;QACM,2MAAc;QAE3B,gMAAW;;;AAsCb,SAAS;;IACd,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU;YAAC;SAAe;QAC1B,OAAO;uCAAE;gBACP,MAAM,WAAW,MAAM,MAAM;gBAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,IAAI,MAAM;gBAClB;gBACA,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,MAAM,QAAQ,KAAK,KAAK,IAAI,EAAE;gBAE9B,6DAA6D;gBAC7D,MAAM,gBAAwC,CAAC;gBAC/C,MAAM,OAAO;+CAAC,CAAC;wBACb,IAAI,KAAK,UAAU,EAAE;4BACnB,aAAa,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI;wBAC/D;oBACF;;gBAEA,OAAO,MAAM,GAAG;+CAAC,CAAC;4BAGF;+BAHiB;4BAC/B,IAAI,KAAK,EAAE;4BACX,MAAM,KAAK,IAAI;4BACf,cAAc,EAAA,gBAAA,KAAK,OAAO,cAAZ,oCAAA,cAAc,SAAS,KAAI,KAAK,YAAY;4BAC1D,WAAW,KAAK,MAAM,KAAK;4BAC3B,eAAe,aAAa,CAAC,KAAK,IAAI,CAAC,IAAI;4BAC3C,gBAAgB;4BAChB,cAAc,KAAK,YAAY,IAAI;wBACrC;;;YACF;;IACF;AACF;IA9BgB;;QACP,0LAAQ;;;AA+BV,SAAS,gBAAgB,SAAiB;;IAC/C,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU;YAAC;YAAiB;SAAU;QACtC,OAAO;wCAAE;gBACP,IAAI;oBACF,MAAM,WAAW,MAAM,MAAM,AAAC,iBAA0B,OAAV,WAAU;oBACxD,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,IAAI,SAAS,MAAM,KAAK,KAAK;4BAC3B,OAAO,EAAE,EAAE,wBAAwB;wBACrC;wBACA,MAAM,IAAI,MAAM;oBAClB;oBACA,MAAM,OAAO,MAAM,SAAS,IAAI;oBAChC,OAAO,KAAK,KAAK,IAAI,EAAE;gBACzB,EAAE,OAAO,OAAO;oBACd,QAAQ,IAAI,CAAC,gCAAgC;oBAC7C,OAAO,EAAE,EAAE,0CAA0C;gBACvD;YACF;;QACA,SAAS,CAAC,CAAC;IACb;AACF;IArBgB;;QACP,0LAAQ;;;AAsBV,SAAS;;IACd,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU;YAAC;SAAgB;QAC3B,OAAO;wCAAE;gBACP,MAAM,WAAW,MAAM,MAAM;gBAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,4CAA4C;oBAC5C,MAAM,aAAa,MAAM,MAAM;oBAC/B,IAAI,CAAC,WAAW,EAAE,EAAE;wBAClB,MAAM,IAAI,MAAM;oBAClB;oBACA,MAAM,SAAS,MAAM,WAAW,IAAI;oBACpC,OAAO,OAAO,KAAK,IAAI,EAAE;gBAC3B;gBACA,MAAM,OAAO,MAAM,SAAS,IAAI;gBAEhC,0CAA0C;gBAC1C,IAAI,KAAK,KAAK,CAAC,MAAM,KAAK,GAAG;oBAC3B,MAAM,cAAc,MAAM,MAAM;oBAChC,IAAI,CAAC,YAAY,EAAE,EAAE;wBACnB,MAAM,IAAI,MAAM;oBAClB;oBACA,MAAM,UAAU,MAAM,YAAY,IAAI;oBACtC,OAAO,CAAC,QAAQ,KAAK,IAAI,EAAE,EAAE,MAAM;oDAAC,CAAC,OACnC,KAAK,IAAI,KAAK,aAAa,KAAK,IAAI,KAAK;;gBAE7C;gBAEA,OAAO,KAAK,KAAK,IAAI,EAAE;YACzB;;IACF;AACF;IA/BgB;;QACP,0LAAQ;;;AAgCV,SAAS;;IACd,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;yCAAE,OAAO;gBACjB,MAAM,WAAW,MAAM,MAAM,cAAc;oBACzC,QAAQ;oBACR,SAAS;wBACP,gBAAgB;oBAClB;oBACA,MAAM,KAAK,SAAS,CAAC;gBACvB;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;oBACjC,MAAM,IAAI,MAAM,MAAM,KAAK,IAAI;gBACjC;gBAEA,OAAO,SAAS,IAAI;YACtB;;QACA,SAAS;yCAAE,CAAC,MAAM;gBAChB,IAAI,UAAU,UAAU,EAAE;oBACxB,YAAY,iBAAiB,CAAC;wBAAE,UAAU;4BAAC;4BAAiB,UAAU,UAAU;yBAAC;oBAAC;oBAClF,YAAY,iBAAiB,CAAC;wBAAE,UAAU;4BAAC;4BAAuB,UAAU,UAAU;yBAAC;oBAAC;gBAC1F;gBACA,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAAe;gBAAC;gBAC3D,YAAY,iBAAiB,CAAC;oBAAE,UAAU,SAAS,KAAK;gBAAG;gBAC3D,oJAAK,CAAC,OAAO,CAAC,KAAK,OAAO,IAAI;YAChC;;QACA,OAAO;yCAAE,CAAC;gBACR,oJAAK,CAAC,KAAK,CAAC,MAAM,OAAO;YAC3B;;IACF;AACF;IAjCgB;;QACM,2MAAc;QAE3B,gMAAW;;;AAiCb,SAAS,gBAAgB,SAAiB;;IAC/C,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU;YAAC;YAAiB;SAAU;QACtC,OAAO;wCAAE;gBACP,MAAM,WAAW,MAAM,MAAM,AAAC,yBAAkC,OAAV;gBACtD,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,IAAI,MAAM;gBAClB;gBACA,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,OAAO,KAAK,KAAK,IAAI,EAAE;YACzB;;QACA,SAAS,CAAC,CAAC;IACb;AACF;IAbgB;;QACP,0LAAQ;;;AAcV,SAAS;;IACd,MAAM,EAAE,MAAM,KAAK,EAAE,GAAG,MAAM,GAAG;IAEjC,OAAO;QACL,GAAG,IAAI;QACP,MAAM,CAAA,kBAAA,4BAAA,MAAO,MAAM,CAAC,CAAA,OAAQ,CAAC,KAAK,UAAU,MAAK,EAAE;IACrD;AACF;KAPgB;;QACmB;;;AAQ5B,SAAS;;IACd,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;yCAAE;oBAAO,EAAE,EAAE,EAAE,IAAI,EAA6B;gBACxD,MAAM,WAAW,MAAM,MAAM,AAAC,cAAgB,OAAH,KAAM;oBAC/C,QAAQ;oBACR,SAAS;wBACP,gBAAgB;oBAClB;oBACA,MAAM,KAAK,SAAS,CAAC;gBACvB;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;oBACjC,MAAM,IAAI,MAAM,MAAM,KAAK,IAAI;gBACjC;gBAEA,OAAO,SAAS,IAAI;YACtB;;QACA,SAAS;yCAAE,CAAC,MAAM;gBAChB,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAAgB;gBAAC;gBAC5D,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAAe;gBAAC;gBAC3D,YAAY,iBAAiB,CAAC;oBAAE,UAAU,SAAS,KAAK;gBAAG;gBAC3D,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAAsB;gBAAC;gBAClE,oJAAK,CAAC,OAAO,CAAC,KAAK,OAAO,IAAI;YAChC;;QACA,OAAO;yCAAE,CAAC;gBACR,oJAAK,CAAC,KAAK,CAAC,MAAM,OAAO;YAC3B;;IACF;AACF;KA/BgB;;QACM,2MAAc;QAE3B,gMAAW;;;AA8Bb,SAAS;;IACd,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;yCAAE,OAAO;gBACjB,MAAM,WAAW,MAAM,MAAM,AAAC,cAAgB,OAAH,KAAM;oBAC/C,QAAQ;gBACV;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;oBACjC,MAAM,IAAI,MAAM,MAAM,KAAK,IAAI;gBACjC;gBAEA,OAAO,SAAS,IAAI;YACtB;;QACA,SAAS;yCAAE,CAAC;gBACV,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAAgB;gBAAC;gBAC5D,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAAe;gBAAC;gBAC3D,YAAY,iBAAiB,CAAC;oBAAE,UAAU,SAAS,KAAK;gBAAG;gBAC3D,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAAsB;gBAAC;gBAClE,oJAAK,CAAC,OAAO,CAAC,KAAK,OAAO,IAAI;YAChC;;QACA,OAAO;yCAAE,CAAC;gBACR,oJAAK,CAAC,KAAK,CAAC,MAAM,OAAO;YAC3B;;IACF;AACF;KA3BgB;;QACM,2MAAc;QAE3B,gMAAW","debugId":null}},
    {"offset": {"line": 2793, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-resources.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\n\n// Types for Resource Management\nexport interface ProjectResource {\n  id: string;\n  type: 'vehicle' | 'equipment';\n  name: string;\n  inventory_no?: string;\n  plate_number?: string;\n  brand?: string;\n  model?: string;\n  category: string;\n  period: string;\n  days?: number;\n  daily_rate?: number;\n  total_cost?: number;\n  owned: boolean;\n}\n\nexport interface Vehicle {\n  id: string;\n  brand: string;\n  model: string;\n  plate_number: string;\n  type: string;\n  status: string;\n  rental_price_per_day_eur?: number;\n  rental_price_per_hour_eur?: number;\n  owned: boolean;\n  current_location?: string;\n  fuel_consumption_l_per_100km?: number;\n  supplier_name?: string;\n  period: string;\n  days?: number;\n  daily_rate?: number;\n  total_cost?: number;\n}\n\nexport interface Equipment {\n  id: string;\n  name: string;\n  type: string;\n  inventory_no: string;\n  status: string;\n  rental_price_per_day_eur?: number;\n  rental_price_per_hour_eur?: number;\n  owned: boolean;\n  current_location?: string;\n  supplier_name?: string;\n  purchase_price_eur?: number;\n  period: string;\n  days?: number;\n  daily_rate?: number;\n  total_cost?: number;\n}\n\nexport interface ProjectResourcesResponse {\n  vehicles: Vehicle[];\n  equipment: Equipment[];\n  summary: {\n    total_resources: number;\n    total_vehicles: number;\n    total_equipment: number;\n    total_cost: number;\n  };\n}\n\nexport interface VehicleAssignmentData {\n  project_id: string;\n  vehicle_id: string;\n  from_date: string;\n  to_date?: string;\n  driver_name?: string;\n  purpose?: string;\n  is_permanent: boolean;\n  notes?: string;\n}\n\nexport interface EquipmentAssignmentData {\n  project_id: string;\n  equipment_id: string;\n  from_date: string;\n  to_date?: string;\n  operator_name?: string;\n  purpose?: string;\n  is_permanent: boolean;\n  notes?: string;\n}\n\nexport interface RentalVehicleData {\n  project_id: string;\n  crew_id?: string;\n  brand: string;\n  model: string;\n  plate_number: string;\n  type: string;\n  rental_company: string;\n  daily_rate: number;\n  hourly_rate?: number;\n  fuel_consumption: number;\n  rental_start: string;\n  rental_end?: string;\n  driver_name?: string;\n  purpose?: string;\n  contract_notes?: string;\n}\n\nexport interface RentalEquipmentData {\n  project_id: string;\n  crew_id?: string;\n  name: string;\n  type: string;\n  inventory_no: string;\n  rental_company: string;\n  daily_rate: number;\n  hourly_rate?: number;\n  rental_start: string;\n  rental_end?: string;\n  operator_name?: string;\n  purpose?: string;\n  contract_notes?: string;\n}\n\n// Query keys\nexport const resourceKeys = {\n  all: [\"resources\"] as const,\n  projectResources: (projectId: string) => [...resourceKeys.all, \"project\", projectId] as const,\n  availableVehicles: () => [...resourceKeys.all, \"available-vehicles\"] as const,\n  availableEquipment: () => [...resourceKeys.all, \"available-equipment\"] as const,\n};\n\n// Hooks\nexport function useProjectResources(projectId: string) {\n  return useQuery({\n    queryKey: resourceKeys.projectResources(projectId),\n    queryFn: async (): Promise<ProjectResourcesResponse> => {\n      const response = await fetch(`/api/projects/${projectId}/resources`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch project resources');\n      }\n      return response.json();\n    },\n    enabled: !!projectId,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useAvailableVehicles() {\n  return useQuery({\n    queryKey: resourceKeys.availableVehicles(),\n    queryFn: async (): Promise<Vehicle[]> => {\n      // TODO: Implement proper available vehicles API\n      return [];\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n}\n\nexport function useAvailableEquipment() {\n  return useQuery({\n    queryKey: resourceKeys.availableEquipment(),\n    queryFn: async (): Promise<Equipment[]> => {\n      // TODO: Implement proper available equipment API\n      return [];\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n}\n\nexport function useCreateVehicleAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: VehicleAssignmentData) => {\n      // TODO: Implement proper vehicle assignment API\n      throw new Error('Vehicle assignment feature is not yet implemented');\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch project resources\n      queryClient.invalidateQueries({\n        queryKey: resourceKeys.projectResources(variables.project_id)\n      });\n\n      // Invalidate available vehicles list\n      queryClient.invalidateQueries({\n        queryKey: resourceKeys.availableVehicles()\n      });\n\n      toast.success('Vehicle assigned successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to assign vehicle: ${error.message}`);\n    },\n  });\n}\n\nexport function useCreateEquipmentAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: EquipmentAssignmentData) => {\n      // TODO: Implement proper equipment assignment API\n      throw new Error('Equipment assignment feature is not yet implemented');\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch project resources\n      queryClient.invalidateQueries({\n        queryKey: resourceKeys.projectResources(variables.project_id)\n      });\n\n      // Invalidate available equipment list\n      queryClient.invalidateQueries({\n        queryKey: resourceKeys.availableEquipment()\n      });\n\n      toast.success('Equipment assigned successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to assign equipment: ${error.message}`);\n    },\n  });\n}\n\nexport function useCreateRentalVehicle() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: RentalVehicleData) => {\n      const response = await fetch('/api/resources/rental-vehicles', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create rental vehicle');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch project resources\n      queryClient.invalidateQueries({\n        queryKey: resourceKeys.projectResources(variables.project_id)\n      });\n\n      // Invalidate available vehicles list\n      queryClient.invalidateQueries({\n        queryKey: resourceKeys.availableVehicles()\n      });\n\n      toast.success('Rental vehicle created and assigned successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to create rental vehicle: ${error.message}`);\n    },\n  });\n}\n\nexport function useCreateRentalEquipment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: RentalEquipmentData) => {\n      const response = await fetch('/api/resources/rental-equipment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create rental equipment');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch project resources\n      queryClient.invalidateQueries({\n        queryKey: resourceKeys.projectResources(variables.project_id)\n      });\n\n      // Invalidate available equipment list\n      queryClient.invalidateQueries({\n        queryKey: resourceKeys.availableEquipment()\n      });\n\n      toast.success('Rental equipment created and assigned successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to create rental equipment: ${error.message}`);\n    },\n  });\n}\n\nexport function useRemoveResourceAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ projectId, resourceId, resourceType }: {\n      projectId: string;\n      resourceId: string;\n      resourceType: 'vehicle' | 'equipment';\n    }) => {\n      // TODO: Implement proper resource assignment removal API\n      throw new Error('Resource assignment removal feature is not yet implemented');\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch project resources\n      queryClient.invalidateQueries({\n        queryKey: resourceKeys.projectResources(variables.projectId)\n      });\n\n      // Invalidate available resources lists\n      if (variables.resourceType === 'vehicle') {\n        queryClient.invalidateQueries({\n          queryKey: resourceKeys.availableVehicles()\n        });\n      } else {\n        queryClient.invalidateQueries({\n          queryKey: resourceKeys.availableEquipment()\n        });\n      }\n\n      toast.success('Resource assignment removed successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to remove resource assignment: ${error.message}`);\n    },\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3110, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-materials.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport {\n  materialsApi,\n  suppliersApi,\n  materialAllocationsApi,\n  materialOrdersApi,\n  type Material,\n  type Supplier,\n  type MaterialAllocation,\n  type MaterialOrder,\n  type MaterialFilters,\n  type AllocationFilters,\n  type OrderFilters,\n  type AllocationRequest,\n  type MaterialOrderStatus,\n  type PaginatedResponse,\n} from \"@/lib/api-client\";\n\n// Query keys\nexport const materialKeys = {\n  all: [\"materials\"] as const,\n  lists: () => [...materialKeys.all, \"list\"] as const,\n  list: (filters: MaterialFilters) => [...materialKeys.lists(), filters] as const,\n  details: () => [...materialKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...materialKeys.details(), id] as const,\n  lowStock: () => [...materialKeys.all, \"low-stock\"] as const,\n};\n\nexport const supplierKeys = {\n  all: [\"suppliers\"] as const,\n  lists: () => [...supplierKeys.all, \"list\"] as const,\n  details: () => [...supplierKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...supplierKeys.details(), id] as const,\n};\n\nexport const allocationKeys = {\n  all: [\"allocations\"] as const,\n  lists: () => [...allocationKeys.all, \"list\"] as const,\n  list: (filters: AllocationFilters) => [...allocationKeys.lists(), filters] as const,\n  details: () => [...allocationKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...allocationKeys.details(), id] as const,\n};\n\nexport const orderKeys = {\n  all: [\"orders\"] as const,\n  lists: () => [...orderKeys.all, \"list\"] as const,\n  list: (filters: OrderFilters) => [...orderKeys.lists(), filters] as const,\n  details: () => [...orderKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...orderKeys.details(), id] as const,\n};\n\n// Centralized cache invalidation function for all material-related queries\nexport function invalidateAllMaterialQueries(queryClient: any) {\n  // Invalidate all material queries\n  queryClient.invalidateQueries({ queryKey: materialKeys.all });\n  queryClient.invalidateQueries({ queryKey: allocationKeys.all });\n  queryClient.invalidateQueries({ queryKey: orderKeys.all });\n\n  // Invalidate unified material views\n  queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n  queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n\n  // Force refetch critical queries\n  queryClient.refetchQueries({\n    queryKey: [...materialKeys.all, \"unified-warehouse\"],\n    type: 'active'\n  });\n}\n\n// Unified Material Hooks with consistent data source\nexport function useMaterials(filters?: MaterialFilters) {\n  return useQuery({\n    queryKey: materialKeys.list(filters || {}),\n    queryFn: () => materialsApi.getMaterials(filters),\n    staleTime: 2 * 60 * 1000, // 2 minutes - shorter for inventory accuracy\n  });\n}\n\nexport function useMaterial(id: string) {\n  return useQuery({\n    queryKey: materialKeys.detail(id),\n    queryFn: () => materialsApi.getMaterial(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  });\n}\n\nexport function useLowStockMaterials() {\n  return useQuery({\n    queryKey: materialKeys.lowStock(),\n    queryFn: async () => {\n      const response = await fetch('/api/materials/low-stock');\n      if (!response.ok) {\n        throw new Error('Failed to fetch low stock materials');\n      }\n      const data = await response.json();\n      return data.materials || []; // Extract materials array from API response\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes - more frequent updates for stock alerts\n  });\n}\n\n// Unified Warehouse Materials Hook - Single source of truth for inventory\nexport function useUnifiedWarehouseMaterials() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"unified-warehouse\"],\n    queryFn: async () => {\n      const response = await fetch('/api/materials/unified?view=warehouse');\n      if (!response.ok) {\n        throw new Error('Failed to fetch warehouse materials');\n      }\n      const data = await response.json();\n      return data.materials || [];\n    },\n    staleTime: 30 * 1000, // 30 seconds for faster updates\n    gcTime: 5 * 60 * 1000, // Keep in cache for 5 minutes\n    refetchOnWindowFocus: true, // Refetch when user returns to window\n    refetchInterval: 60 * 1000, // Auto-refetch every minute\n  });\n}\n\n// Project Material Allocations Hook with unified data\nexport function useUnifiedProjectMaterials(projectId: string) {\n  return useQuery({\n    queryKey: [...allocationKeys.all, \"project\", projectId, \"unified\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/materials/unified?view=project_allocations&project_id=${projectId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch project materials');\n      }\n      const data = await response.json();\n      return { materials: data.materials || [], summary: data.allocation_summary };\n    },\n    enabled: !!projectId,\n    staleTime: 1 * 60 * 1000, // 1 minute\n    gcTime: 5 * 60 * 1000,\n  });\n}\n\n// Material Allocation Targets Hook\nexport function useMaterialAllocationTargets() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"allocation-targets\"],\n    queryFn: async () => {\n      const response = await fetch('/api/materials/unified?view=allocation_targets');\n      if (!response.ok) {\n        throw new Error('Failed to fetch allocation targets');\n      }\n      const data = await response.json();\n      return data.materials || [];\n    },\n    staleTime: 30 * 1000, // 30 seconds for responsive allocation targets\n    refetchOnWindowFocus: true,\n  });\n}\n\nexport function useCreateMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<Material>) => materialsApi.createMaterial(data),\n    onSuccess: (newMaterial) => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.setQueryData(materialKeys.detail(newMaterial.id), newMaterial);\n      toast.success(\"Material created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create material: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Material> }) =>\n      materialsApi.updateMaterial(id, data),\n    onMutate: async ({ id, data }) => {\n      await queryClient.cancelQueries({ queryKey: materialKeys.detail(id) });\n      const previousMaterial = queryClient.getQueryData(materialKeys.detail(id));\n\n      queryClient.setQueryData(materialKeys.detail(id), (old: Material | undefined) => {\n        if (!old) return old;\n        return { ...old, ...data };\n      });\n\n      return { previousMaterial };\n    },\n    onError: (error, { id }, context) => {\n      if (context?.previousMaterial) {\n        queryClient.setQueryData(materialKeys.detail(id), context.previousMaterial);\n      }\n      toast.error(`Failed to update material: ${error.message}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      toast.success(\"Material updated successfully\");\n    },\n    onSettled: (data, error, { id }) => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.detail(id) });\n    },\n  });\n}\n\nexport function useDeleteMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => materialsApi.deleteMaterial(id),\n    onSuccess: (_, deletedId) => {\n      queryClient.removeQueries({ queryKey: materialKeys.detail(deletedId) });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      toast.success(\"Material deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete material: ${error.message}`);\n    },\n  });\n}\n\nexport function useAdjustStock() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, adjustment }: { id: string; adjustment: { quantity: number; reason: string } }) =>\n      materialsApi.adjustStock(id, adjustment),\n    onSuccess: (updatedMaterial) => {\n      queryClient.setQueryData(materialKeys.detail(updatedMaterial.id), updatedMaterial);\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      // Invalidate unified warehouse and allocation views\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n      toast.success(\"Stock adjusted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to adjust stock: ${error.message}`);\n    },\n  });\n}\n\n// Material Consumption Hook\nexport function useConsumeMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: {\n      allocation_id: string;\n      consumed_qty: number;\n      work_entry_id?: string;\n      notes?: string\n    }) => {\n      return fetch('/api/materials/consume', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      }).then(response => {\n        if (!response.ok) {\n          return response.json().then(err => Promise.reject(new Error(err.error || 'Failed to consume material')));\n        }\n        return response.json();\n      });\n    },\n    onSuccess: (result, variables) => {\n      // Invalidate all material-related queries to ensure consistency\n      queryClient.invalidateQueries({ queryKey: materialKeys.all });\n      queryClient.invalidateQueries({ queryKey: [...allocationKeys.all] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n\n      // If we know the project, invalidate project-specific queries\n      if (variables.work_entry_id) {\n        queryClient.invalidateQueries({ queryKey: [...allocationKeys.all, \"project\"] });\n      }\n\n      toast.success(result.message || \"Material consumed successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to consume material: ${error.message}`);\n    },\n  });\n}\n\n// Supplier Hooks\nexport function useSuppliers() {\n  return useQuery({\n    queryKey: supplierKeys.lists(),\n    queryFn: () => suppliersApi.getSuppliers(),\n    staleTime: 10 * 60 * 1000, // 10 minutes - suppliers change less frequently\n  });\n}\n\nexport function useSupplier(id: string) {\n  return useQuery({\n    queryKey: supplierKeys.detail(id),\n    queryFn: () => suppliersApi.getSupplier(id),\n    enabled: !!id,\n    staleTime: 10 * 60 * 1000,\n  });\n}\n\nexport function useCreateSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<Supplier>) => suppliersApi.createSupplier(data),\n    onSuccess: (newSupplier) => {\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      queryClient.setQueryData(supplierKeys.detail(newSupplier.id), newSupplier);\n      toast.success(\"Supplier created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create supplier: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Supplier> }) =>\n      suppliersApi.updateSupplier(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      toast.success(\"Supplier updated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to update supplier: ${error.message}`);\n    },\n  });\n}\n\nexport function useDeleteSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => suppliersApi.deleteSupplier(id),\n    onSuccess: (_, deletedId) => {\n      queryClient.removeQueries({ queryKey: supplierKeys.detail(deletedId) });\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      toast.success(\"Supplier deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete supplier: ${error.message}`);\n    },\n  });\n}\n\n// Allocation Hooks\nexport function useAllocations(filters?: AllocationFilters) {\n  return useQuery({\n    queryKey: allocationKeys.list(filters || {}),\n    queryFn: () => materialAllocationsApi.getAllocations(filters),\n    staleTime: 2 * 60 * 1000, // 2 minutes - allocations change frequently\n  });\n}\n\nexport function useAllocation(id: string) {\n  return useQuery({\n    queryKey: allocationKeys.detail(id),\n    queryFn: () => materialAllocationsApi.getAllocation(id),\n    enabled: !!id,\n    staleTime: 2 * 60 * 1000,\n  });\n}\n\nexport function useCreateAllocation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: AllocationRequest) => materialAllocationsApi.createAllocation(data),\n    onSuccess: (newAllocation) => {\n      queryClient.invalidateQueries({ queryKey: allocationKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      queryClient.setQueryData(allocationKeys.detail(newAllocation.id), newAllocation);\n      toast.success(\"Material allocated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to allocate material: ${error.message}`);\n    },\n  });\n}\n\nexport function useRecordUsage() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, usage }: { id: string; usage: { used_qty: number; notes?: string } }) =>\n      materialAllocationsApi.recordUsage(id, usage),\n    onSuccess: (updatedAllocation) => {\n      queryClient.setQueryData(allocationKeys.detail(updatedAllocation.id), updatedAllocation);\n      queryClient.invalidateQueries({ queryKey: allocationKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      toast.success(\"Usage recorded successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to record usage: ${error.message}`);\n    },\n  });\n}\n\n// Order Hooks\nexport function useOrders(filters?: OrderFilters) {\n  return useQuery({\n    queryKey: orderKeys.list(filters || {}),\n    queryFn: () => materialOrdersApi.getOrders(filters),\n    staleTime: 3 * 60 * 1000, // 3 minutes\n  });\n}\n\nexport function useOrder(id: string) {\n  return useQuery({\n    queryKey: orderKeys.detail(id),\n    queryFn: () => materialOrdersApi.getOrder(id),\n    enabled: !!id,\n    staleTime: 3 * 60 * 1000,\n  });\n}\n\nexport function useCreateOrder() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<MaterialOrder>) => materialOrdersApi.createOrder(data),\n    onSuccess: (newOrder) => {\n      queryClient.invalidateQueries({ queryKey: orderKeys.lists() });\n      queryClient.setQueryData(orderKeys.detail(newOrder.id), newOrder);\n      toast.success(\"Order created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create order: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateOrderStatus() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, status }: { id: string; status: MaterialOrderStatus }) =>\n      materialOrdersApi.updateOrderStatus(id, status),\n    onSuccess: (updatedOrder) => {\n      queryClient.setQueryData(orderKeys.detail(updatedOrder.id), updatedOrder);\n      queryClient.invalidateQueries({ queryKey: orderKeys.lists() });\n\n      // If order is delivered, update material stock levels\n      if (updatedOrder.status === \"delivered\") {\n        queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n        queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      }\n\n      toast.success(\"Order status updated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to update order status: ${error.message}`);\n    },\n  });\n}\n\n// Specialized hooks\nexport function useProjectAllocations(projectId: string) {\n  return useAllocations({ project_id: projectId });\n}\n\nexport function useTeamAllocations(teamId: string) {\n  return useAllocations({ team_id: teamId });\n}\n\nexport function usePendingOrders() {\n  return useOrders({ status: \"pending\" });\n}\n\nexport function useSupplierOrders(supplierId: string) {\n  return useOrders({ supplier_id: supplierId });\n}\n\n// Project Preparation specific hooks\nexport interface ProjectMaterial {\n  id: string;\n  material_id: string;\n  name: string;\n  sku?: string;\n  unit: string;\n  description?: string;\n  allocated_qty: number;\n  unit_price: number;\n  total_cost: number;\n  allocation_date: string;\n  return_date?: string;\n  status: 'allocated' | 'used' | 'returned' | 'cancelled';\n  notes?: string;\n  allocated_by_name?: string;\n}\n\nexport interface WarehouseMaterial {\n  id: string;\n  name: string;\n  sku?: string;\n  unit: string;\n  description?: string;\n  available_qty: number;\n  total_qty: number;\n  reserved_qty: number;\n  min_stock: number;\n  price: number;\n}\n\nexport interface ProjectMaterialsResponse {\n  materials: ProjectMaterial[];\n  summary: {\n    total_materials: number;\n    pending_count: number;\n    used_count: number;\n    total_cost: number;\n  };\n}\n\nexport interface MaterialAssignmentData {\n  project_id: string;\n  material_id: string;\n  quantity: number;\n  from_date: string;\n  to_date?: string;\n  notes?: string;\n}\n\nexport interface UpdateMaterialAssignmentData {\n  assignment_id: string;\n  quantity: number;\n  unit_price: number;\n  from_date: string;\n  to_date?: string;\n  notes?: string;\n}\n\nexport function useProjectMaterials(projectId: string) {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"project\", projectId],\n    queryFn: async (): Promise<ProjectMaterialsResponse> => {\n      const response = await fetch(`/api/materials/project/${projectId}`, {\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch project materials');\n      }\n      return response.json();\n    },\n    enabled: !!projectId,\n    staleTime: 0, // Force fresh data every time\n    gcTime: 0, // Don't keep old data in memory\n  });\n}\n\nexport function useWarehouseMaterials() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"warehouse\"],\n    queryFn: async (): Promise<WarehouseMaterial[]> => {\n      const response = await fetch('/api/materials/warehouse');\n      if (!response.ok) {\n        throw new Error('Failed to fetch warehouse materials');\n      }\n      return response.json();\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n}\n\nexport function useAssignMaterialToProject() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: MaterialAssignmentData) => {\n      const response = await fetch('/api/materials/assignments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to assign material');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate legacy project materials\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"project\", variables.project_id]\n      });\n\n      // Invalidate unified project materials\n      queryClient.invalidateQueries({\n        queryKey: [...allocationKeys.all, \"project\", variables.project_id, \"unified\"]\n      });\n\n      // Invalidate warehouse materials (stock has changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      // Invalidate unified warehouse materials\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      // Invalidate allocation targets (availability may have changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      // Force immediate refetch for real-time updates\n      queryClient.refetchQueries({\n        queryKey: [...allocationKeys.all, \"project\", variables.project_id, \"unified\"]\n      });\n\n      queryClient.refetchQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      toast.success('Material assigned successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to assign material: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateMaterialAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: UpdateMaterialAssignmentData) => {\n      const { assignment_id, ...updateData } = data;\n      const response = await fetch(`/api/materials/assignments/${assignment_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update material assignment');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate legacy project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey[0] === \"materials\" &&\n                 query.queryKey[1] === \"project\";\n        }\n      });\n\n      // Invalidate unified project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey.includes(\"unified\");\n        }\n      });\n\n      // Invalidate warehouse and allocation targets (stock may have changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      toast.success('Material assignment updated successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to update material assignment: ${error.message}`);\n    },\n  });\n}\n\nexport function useDeleteMaterialAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (assignmentId: string) => {\n      const response = await fetch(`/api/materials/assignments/${assignmentId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete material assignment');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, assignmentId) => {\n      // Invalidate all legacy project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey[0] === \"materials\" &&\n                 query.queryKey[1] === \"project\";\n        }\n      });\n\n      // Invalidate all unified queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey.includes(\"unified\");\n        }\n      });\n\n      // Invalidate warehouse materials (stock has been restored)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      // Invalidate allocation targets (availability increased)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      toast.success('Material assignment deleted successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete material assignment: ${error.message}`);\n    },\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4369, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-material-order-budget.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\nimport type {\n  MaterialOrderBudgetImpact,\n  CreateBudgetTransactionRequest,\n  BudgetTransactionResponse\n} from '@/types';\n\n// Get budget impact for a material order\nexport function useMaterialOrderBudgetImpact(orderId: string) {\n  return useQuery({\n    queryKey: ['material-order-budget', orderId],\n    queryFn: async (): Promise<MaterialOrderBudgetImpact> => {\n      const response = await fetch(`/api/materials/orders/${orderId}/budget`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch budget impact');\n      }\n      return response.json();\n    },\n    enabled: !!orderId,\n  });\n}\n\n// Create budget transaction for material order\nexport function useCreateBudgetTransaction() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      orderId,\n      data\n    }: {\n      orderId: string;\n      data: CreateBudgetTransactionRequest\n    }): Promise<BudgetTransactionResponse> => {\n      const response = await fetch(`/api/materials/orders/${orderId}/budget`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create budget transaction');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate related queries\n      queryClient.invalidateQueries({\n        queryKey: ['material-order-budget', variables.orderId]\n      });\n      queryClient.invalidateQueries({\n        queryKey: ['material-orders']\n      });\n      queryClient.invalidateQueries({\n        queryKey: ['financial-summary']\n      });\n      queryClient.invalidateQueries({\n        queryKey: ['project', data.project_id]\n      });\n\n      toast.success(`Budget transaction created: €${data.amount_deducted.toFixed(2)} deducted`);\n    },\n    onError: (error: Error) => {\n      toast.error(error.message || 'Failed to create budget transaction');\n    },\n  });\n}\n\n// Hook to automatically deduct budget on order creation\nexport function useAutoBudgetDeduction() {\n  const createBudgetTransaction = useCreateBudgetTransaction();\n\n  const deductFromBudget = async (orderId: string, deduct: boolean = true) => {\n    if (!deduct) return null;\n\n    try {\n      return await createBudgetTransaction.mutateAsync({\n        orderId,\n        data: { deduct_from_budget: true }\n      });\n    } catch (error) {\n      console.error('Auto budget deduction failed:', error);\n      return null;\n    }\n  };\n\n  return {\n    deductFromBudget,\n    isLoading: createBudgetTransaction.isPending,\n    error: createBudgetTransaction.error,\n  };\n}"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AACA;;;;AAQO,SAAS,6BAA6B,OAAe;;IAC1D,OAAO,IAAA,0LAAQ,EAAC;QACd,UAAU;YAAC;YAAyB;SAAQ;QAC5C,OAAO;qDAAE;gBACP,MAAM,WAAW,MAAM,MAAM,AAAC,yBAAgC,OAAR,SAAQ;gBAC9D,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,IAAI,MAAM;gBAClB;gBACA,OAAO,SAAS,IAAI;YACtB;;QACA,SAAS,CAAC,CAAC;IACb;AACF;GAZgB;;QACP,0LAAQ;;;AAcV,SAAS;;IACd,MAAM,cAAc,IAAA,2MAAc;IAElC,OAAO,IAAA,gMAAW,EAAC;QACjB,UAAU;sDAAE;oBAAO,EACjB,OAAO,EACP,IAAI,EAIL;gBACC,MAAM,WAAW,MAAM,MAAM,AAAC,yBAAgC,OAAR,SAAQ,YAAU;oBACtE,QAAQ;oBACR,SAAS;wBACP,gBAAgB;oBAClB;oBACA,MAAM,KAAK,SAAS,CAAC;gBACvB;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;oBACjC,MAAM,IAAI,MAAM,MAAM,KAAK,IAAI;gBACjC;gBAEA,OAAO,SAAS,IAAI;YACtB;;QACA,SAAS;sDAAE,CAAC,MAAM;gBAChB,6BAA6B;gBAC7B,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;wBAAyB,UAAU,OAAO;qBAAC;gBACxD;gBACA,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;qBAAkB;gBAC/B;gBACA,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;qBAAoB;gBACjC;gBACA,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;wBAAW,KAAK,UAAU;qBAAC;gBACxC;gBAEA,oJAAK,CAAC,OAAO,CAAC,AAAC,gCAA+D,OAAhC,KAAK,eAAe,CAAC,OAAO,CAAC,IAAG;YAChF;;QACA,OAAO;sDAAE,CAAC;gBACR,oJAAK,CAAC,KAAK,CAAC,MAAM,OAAO,IAAI;YAC/B;;IACF;AACF;IA/CgB;;QACM,2MAAc;QAE3B,gMAAW;;;AA+Cb,SAAS;;IACd,MAAM,0BAA0B;IAEhC,MAAM,mBAAmB,eAAO;YAAiB,0EAAkB;QACjE,IAAI,CAAC,QAAQ,OAAO;QAEpB,IAAI;YACF,OAAO,MAAM,wBAAwB,WAAW,CAAC;gBAC/C;gBACA,MAAM;oBAAE,oBAAoB;gBAAK;YACnC;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,OAAO;QACT;IACF;IAEA,OAAO;QACL;QACA,WAAW,wBAAwB,SAAS;QAC5C,OAAO,wBAAwB,KAAK;IACtC;AACF;IAtBgB;;QACkB","debugId":null}},
    {"offset": {"line": 4506, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-material-orders.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport type {\n  ProjectMaterialOrder,\n  CreateMaterialOrderRequest,\n  MaterialOrderStatus\n} from \"@/types\";\nimport { useAutoBudgetDeduction } from \"./use-material-order-budget\";\n\n// Query keys\nexport const materialOrderKeys = {\n  all: [\"material-orders\"] as const,\n  lists: () => [...materialOrderKeys.all, \"list\"] as const,\n  list: (filters: any) => [...materialOrderKeys.lists(), filters] as const,\n  details: () => [...materialOrderKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...materialOrderKeys.details(), id] as const,\n};\n\nexport interface MaterialOrderFilters {\n  project_id?: string;\n  supplier_id?: string;\n  status?: MaterialOrderStatus;\n  page?: number;\n  per_page?: number;\n}\n\n// Fetch material orders\nasync function fetchMaterialOrders(filters?: MaterialOrderFilters): Promise<{\n  items: ProjectMaterialOrder[];\n  total: number;\n  page: number;\n  per_page: number;\n  total_pages: number;\n}> {\n  const params = new URLSearchParams();\n\n  if (filters?.project_id) params.set('project_id', filters.project_id);\n  if (filters?.supplier_id) params.set('supplier_id', filters.supplier_id);\n  if (filters?.status) params.set('status', filters.status);\n  if (filters?.page) params.set('page', filters.page.toString());\n  if (filters?.per_page) params.set('per_page', filters.per_page.toString());\n\n  const response = await fetch(`/api/materials/orders?${params.toString()}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch material orders\");\n  }\n  return response.json();\n}\n\n// Fetch single material order\nasync function fetchMaterialOrder(id: string): Promise<ProjectMaterialOrder> {\n  const response = await fetch(`/api/materials/orders/${id}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch material order\");\n  }\n  return response.json();\n}\n\n// Create material order\nasync function createMaterialOrder(data: CreateMaterialOrderRequest): Promise<ProjectMaterialOrder> {\n  const response = await fetch(\"/api/materials/orders\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error || \"Failed to create material order\");\n  }\n\n  return response.json();\n}\n\n// Update material order\nasync function updateMaterialOrder(id: string, data: {\n  status?: MaterialOrderStatus;\n  actual_delivery_date?: string;\n  notes?: string;\n}): Promise<ProjectMaterialOrder> {\n  const response = await fetch(`/api/materials/orders/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error || \"Failed to update material order\");\n  }\n\n  return response.json();\n}\n\n// Delete material order\nasync function deleteMaterialOrder(id: string): Promise<void> {\n  const response = await fetch(`/api/materials/orders/${id}`, {\n    method: \"DELETE\",\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error || \"Failed to delete material order\");\n  }\n}\n\n// Hooks\nexport function useMaterialOrders(filters?: MaterialOrderFilters) {\n  return useQuery({\n    queryKey: materialOrderKeys.list(filters || {}),\n    queryFn: () => fetchMaterialOrders(filters),\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n}\n\nexport function useMaterialOrder(id: string) {\n  return useQuery({\n    queryKey: materialOrderKeys.detail(id),\n    queryFn: () => fetchMaterialOrder(id),\n    enabled: !!id,\n    staleTime: 1000 * 60 * 5,\n  });\n}\n\nexport function useCreateMaterialOrder() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: createMaterialOrder,\n    onSuccess: (newOrder) => {\n      // Invalidate orders lists\n      queryClient.invalidateQueries({ queryKey: materialOrderKeys.lists() });\n\n      // Add the new order to cache\n      queryClient.setQueryData(materialOrderKeys.detail(newOrder.id), newOrder);\n\n      toast.success(\"Material order created successfully\");\n    },\n    onError: (error: Error) => {\n      toast.error(`Failed to create order: ${error.message}`);\n    },\n  });\n}\n\n// Enhanced hook with automatic budget deduction\nexport function useCreateMaterialOrderWithBudget() {\n  const createOrder = useCreateMaterialOrder();\n  const { deductFromBudget } = useAutoBudgetDeduction();\n\n  return useMutation({\n    mutationFn: async (data: CreateMaterialOrderRequest & { deduct_from_budget?: boolean }) => {\n      const { deduct_from_budget = true, ...orderData } = data;\n\n      // Create the order first\n      const newOrder = await createOrder.mutateAsync(orderData);\n\n      // Then deduct from budget if requested\n      if (deduct_from_budget && newOrder.project_id) {\n        try {\n          await deductFromBudget(newOrder.id, true);\n        } catch (budgetError) {\n          console.warn('Budget deduction failed, but order was created:', budgetError);\n          toast.warning('Order created but budget deduction failed. Please manage manually.');\n        }\n      }\n\n      return newOrder;\n    },\n    onSuccess: (newOrder) => {\n      toast.success(`Order created and €${newOrder.total_cost_eur.toFixed(2)} deducted from project budget`);\n    },\n    onError: (error: Error) => {\n      toast.error(`Failed to create order: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateMaterialOrder() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) =>\n      updateMaterialOrder(id, data),\n    onSuccess: (updatedOrder) => {\n      // Update individual order cache\n      queryClient.setQueryData(\n        materialOrderKeys.detail(updatedOrder.id),\n        updatedOrder\n      );\n\n      // Invalidate orders lists\n      queryClient.invalidateQueries({ queryKey: materialOrderKeys.lists() });\n\n      toast.success(\"Order updated successfully\");\n    },\n    onError: (error: Error) => {\n      toast.error(`Failed to update order: ${error.message}`);\n    },\n  });\n}\n\nexport function useDeleteMaterialOrder() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: deleteMaterialOrder,\n    onSuccess: (_, deletedId) => {\n      // Remove from cache\n      queryClient.removeQueries({\n        queryKey: materialOrderKeys.detail(deletedId),\n      });\n\n      // Invalidate orders lists\n      queryClient.invalidateQueries({ queryKey: materialOrderKeys.lists() });\n\n      toast.success(\"Order deleted successfully\");\n    },\n    onError: (error: Error) => {\n      toast.error(`Failed to delete order: ${error.message}`);\n    },\n  });\n}\n\n// Project-specific hooks\nexport function useProjectMaterialOrders(projectId: string) {\n  return useMaterialOrders({ project_id: projectId });\n}\n\nexport function useSupplierMaterialOrders(supplierId: string) {\n  return useMaterialOrders({ supplier_id: supplierId });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4813, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-project-readiness.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\n\nexport interface ProjectReadinessData {\n  project_status: string;\n  overall_readiness: number;\n  total_checks: number;\n  completed_checks: number;\n  days_to_start?: number;\n  critical_issues: number;\n  categories: {\n    [key: string]: {\n      completed: number;\n      total: number;\n      completed_checks: number[];\n    };\n  };\n  issues?: {\n    title: string;\n    description: string;\n    severity: 'critical' | 'warning' | 'info';\n    action_required?: string;\n  }[];\n}\n\nexport interface ChecklistItem {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  required: boolean;\n  completed: boolean;\n  completed_date?: string;\n  action_required?: string;\n}\n\nexport interface ProjectActivationData {\n  project_id: string;\n  activation_date: string;\n  activation_notes?: string;\n  responsible_manager: string;\n  notify_stakeholders: boolean;\n}\n\nexport interface StatusUpdateData {\n  project_id: string;\n  status: string;\n}\n\n// Project Readiness Hooks\nexport function useProjectReadiness(projectId: string) {\n  return useQuery({\n    queryKey: ['project-readiness', projectId],\n    queryFn: async (): Promise<ProjectReadinessData> => {\n      const response = await fetch(`/api/project-readiness/${projectId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch project readiness data');\n      }\n      return response.json();\n    },\n    enabled: !!projectId,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n}\n\nexport function useProjectChecklist(projectId: string) {\n  return useQuery({\n    queryKey: ['project-checklist', projectId],\n    queryFn: async (): Promise<ChecklistItem[]> => {\n      const response = await fetch(`/api/project-readiness/${projectId}/checklist`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch project checklist');\n      }\n      return response.json();\n    },\n    enabled: !!projectId,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useUpdateProjectStatus() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: StatusUpdateData) => {\n      const response = await fetch(`/api/project-readiness/${data.project_id}/status`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ status: data.status }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update project status');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate readiness queries\n      queryClient.invalidateQueries({\n        queryKey: ['project-readiness', variables.project_id]\n      });\n\n      // Update any project queries\n      queryClient.invalidateQueries({\n        queryKey: ['projects']\n      });\n\n      toast.success('Project status updated successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to update project status: ${error.message}`);\n    },\n  });\n}\n\nexport function useCreateProjectActivation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: ProjectActivationData) => {\n      const response = await fetch('/api/project-activation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create project activation');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate readiness and project queries\n      queryClient.invalidateQueries({\n        queryKey: ['project-readiness', variables.project_id]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: ['projects']\n      });\n\n      toast.success('Project activation created successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to create project activation: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateChecklistItem() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ projectId, itemId, completed }: { projectId: string; itemId: string; completed: boolean }) => {\n      const response = await fetch(`/api/project-readiness/${projectId}/checklist/${itemId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ completed }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update checklist item');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate both checklist and readiness queries\n      queryClient.invalidateQueries({\n        queryKey: ['project-checklist', variables.projectId]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: ['project-readiness', variables.projectId]\n      });\n\n      toast.success('Checklist item updated successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to update checklist item: ${error.message}`);\n    },\n  });\n}"],"names":[],"mappings":"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","debugId":null}}]
}