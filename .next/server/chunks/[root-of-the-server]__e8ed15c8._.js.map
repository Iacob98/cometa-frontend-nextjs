{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/materials/orders/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// Service role client for bypassing RLS\nconst supabaseService = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// Warehouse orders don't need a project_id (it will be null)\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const per_page = parseInt(searchParams.get('per_page') || '20');\n    const offset = (page - 1) * per_page;\n    const status = searchParams.get('status');\n    const supplier_id = searchParams.get('supplier_id');\n\n    // Build query for material orders\n    let query = supabaseService\n      .from('material_orders')\n      .select(`\n        id,\n        project_id,\n        material_id,\n        quantity,\n        unit_price,\n        total_price,\n        status,\n        order_date,\n        delivery_date,\n        supplier,\n        notes,\n        created_at,\n        updated_at,\n        material:materials(\n          id,\n          name,\n          category,\n          unit,\n          unit_price_eur,\n          supplier_name\n        ),\n        project:projects(\n          id,\n          name,\n          city,\n          address\n        )\n      `, { count: 'exact' })\n      .order('order_date', { ascending: false })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters\n    if (status) {\n      query = query.eq('status', status);\n    }\n\n    if (supplier_id) {\n      query = query.ilike('supplier', `%${supplier_id}%`);\n    }\n\n    const { data: orders, error, count } = await query;\n\n    if (error) {\n      console.error('Supabase error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch material orders' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      items: orders || [],\n      total: count || 0,\n      page,\n      per_page,\n      total_pages: Math.ceil((count || 0) / per_page)\n    });\n  } catch (error) {\n    console.error('Material orders API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      project_id,\n      warehouse_location,\n      supplier_material_id,\n      material_id = supplier_material_id, // Accept either field name for backward compatibility\n      quantity,\n      unit_price_eur,\n      unit_price = unit_price_eur, // Accept either field name for backward compatibility\n      delivery_date,\n      expected_delivery_date = delivery_date, // Accept either field name\n      supplier,\n      status = 'pending',\n      notes\n    } = body;\n\n    // Validation\n    if (!material_id || !quantity) {\n      return NextResponse.json(\n        { error: 'Material ID and quantity are required' },\n        { status: 400 }\n      );\n    }\n\n    // Check if material_id is actually a supplier_material_id and convert it\n    let actualMaterialId = material_id;\n\n    // First, try to find it in supplier_materials table\n    const { data: supplierMaterial } = await supabaseService\n      .from('supplier_materials')\n      .select('material_id')\n      .eq('id', material_id)\n      .single();\n\n    if (supplierMaterial) {\n      // If found in supplier_materials, use the linked material_id\n      actualMaterialId = supplierMaterial.material_id;\n      console.log(`Converted supplier_material_id ${material_id} to material_id ${actualMaterialId}`);\n    } else {\n      // Check if it exists directly in materials table\n      const { data: directMaterial } = await supabaseService\n        .from('materials')\n        .select('id')\n        .eq('id', material_id)\n        .single();\n\n      if (!directMaterial) {\n        return NextResponse.json(\n          { error: `Material with ID ${material_id} not found` },\n          { status: 400 }\n        );\n      }\n      console.log(`Using direct material_id ${material_id}`);\n    }\n\n    // Project ID is optional - orders can be for warehouse (no project) or specific project\n    // if (!project_id) {\n    //   return NextResponse.json(\n    //     { error: 'Project ID is required' },\n    //     { status: 400 }\n    //   );\n    // }\n\n    // Create material order\n    // For warehouse orders, project_id will be null\n    const orderData = {\n      project_id: project_id || null,\n      material_id: actualMaterialId,\n      quantity,\n      unit_price: unit_price || 0,\n      total_price: (quantity || 0) * (unit_price || 0),\n      status,\n      order_date: new Date().toISOString(),\n      delivery_date: expected_delivery_date || null,\n      supplier: supplier || null,\n      notes: notes || null\n    };\n\n    console.log('Creating material order with data:', orderData);\n\n    const { data: order, error: orderError } = await supabaseService\n      .from('material_orders')\n      .insert([orderData])\n      .select()\n      .single();\n\n    if (orderError) {\n      console.error('Supabase error creating order:', orderError);\n      console.error('Order data that failed:', orderData);\n      return NextResponse.json(\n        { error: `Failed to create material order: ${orderError.message}` },\n        { status: 500 }\n      );\n    }\n\n\n    return NextResponse.json({\n      ...order,\n      total_cost_eur: order.total_price || 0\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Create material order error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}