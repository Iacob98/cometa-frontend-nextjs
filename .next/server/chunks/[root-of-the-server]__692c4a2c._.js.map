{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/activities/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n\n    // Parse pagination parameters\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const per_page = parseInt(searchParams.get(\"per_page\") || \"50\");\n    const offset = (page - 1) * per_page;\n\n    // Parse filtering parameters\n    const activity_type = searchParams.get(\"activity_type\");\n    const user_id = searchParams.get(\"user_id\");\n    const project_id = searchParams.get(\"project_id\");\n    const object_type = searchParams.get(\"object_type\");\n    const search = searchParams.get(\"search\");\n\n    // Build the main query with related data - FIXED: Use activity_logs table\n    let query = supabase\n      .from(\"activity_logs\")\n      .select(\n        `\n        id,\n        user_id,\n        project_id,\n        action,\n        entity_type,\n        entity_id,\n        details,\n        ip_address,\n        user_agent,\n        created_at,\n        user:users(\n          id,\n          first_name,\n          last_name,\n          email,\n          role\n        ),\n        project:projects(\n          id,\n          name,\n          status\n        )\n      `,\n        { count: \"exact\" }\n      )\n      .order(\"created_at\", { ascending: false })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters - FIXED: Use correct field names\n    if (activity_type) {\n      query = query.eq(\"action\", activity_type);\n    }\n\n    if (user_id) {\n      query = query.eq(\"user_id\", user_id);\n    }\n\n    if (project_id) {\n      query = query.eq(\"project_id\", project_id);\n    }\n\n    if (object_type) {\n      // FIXED: object_type → entity_type\n      query = query.eq(\"entity_type\", object_type);\n    }\n\n    if (search) {\n      // FIXED: Search in action field since description doesn't exist\n      query = query.ilike(\"action\", `%${search}%`);\n    }\n\n    const { data: activities, error, count } = await query;\n\n    if (error) {\n      console.error(\"Supabase activities query error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch activities\" },\n        { status: 500 }\n      );\n    }\n\n    // Calculate pagination info\n    const total_pages = Math.ceil((count || 0) / per_page);\n\n    // Format response to match expected structure\n    const response = {\n      activities: activities || [],\n      total: count || 0,\n      page,\n      per_page,\n      total_pages,\n      has_next: page < total_pages,\n      has_prev: page > 1,\n    };\n\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error(\"Activities API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // FIXED: Validate required fields - use action field from activity_logs\n    if (!body.user_id || !body.action) {\n      return NextResponse.json(\n        { error: \"user_id and action are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate activity_type against allowed values\n    const allowedActivityTypes = [\n      \"project\",\n      \"work_entry\",\n      \"material\",\n      \"equipment\",\n      \"user\",\n      \"document\",\n      \"auth\",\n    ];\n    if (!allowedActivityTypes.includes(body.activity_type)) {\n      return NextResponse.json(\n        {\n          error:\n            \"Invalid activity_type. Must be one of: \" +\n            allowedActivityTypes.join(\", \"),\n        },\n        { status: 400 }\n      );\n    }\n\n    // Extract client IP and User-Agent\n    const forwarded = request.headers.get(\"x-forwarded-for\");\n    const ip_address = forwarded\n      ? forwarded.split(\",\")[0]\n      : request.headers.get(\"x-real-ip\") || null;\n    const user_agent = request.headers.get(\"user-agent\") || null;\n\n    // FIXED: Create activity data object with correct field mappings for activity_logs\n    const activityData = {\n      user_id: body.user_id,\n      project_id: body.project_id || null,\n      action: body.action,\n      entity_type: body.object_type || body.entity_type || null, // FIXED: object_type → entity_type\n      entity_id: body.object_id || body.entity_id || null, // FIXED: object_id → entity_id\n      details: body.details || body.metadata || null, // FIXED: use details field from schema\n      ip_address,\n      user_agent,\n    };\n\n    // FIXED: Insert new activity into activity_logs table\n    const { data: activity, error } = await supabase\n      .from(\"activity_logs\")\n      .insert([activityData])\n      .select(\n        `\n        id,\n        user_id,\n        project_id,\n        action,\n        entity_type,\n        entity_id,\n        details,\n        ip_address,\n        user_agent,\n        created_at,\n        user:users(\n          id,\n          first_name,\n          last_name,\n          email,\n          role\n        ),\n        project:projects(\n          id,\n          name,\n          status\n        )\n      `\n      )\n      .single();\n\n    if (error) {\n      console.error(\"Supabase activity creation error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create activity log\" },\n        { status: 500 }\n      );\n    }\n\n    // Return the created activity log\n    return NextResponse.json(\n      {\n        message: \"Activity log created successfully\",\n        activity,\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Activities POST API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}