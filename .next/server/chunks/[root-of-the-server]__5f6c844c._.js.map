{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/suppliers/%5Bid%5D/contacts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\n// Service role client for bypassing RLS\nconst supabaseService = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Supplier ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const { data: contacts, error } = await supabaseService\n      .from(\"supplier_contacts\")\n      .select(\n        `\n        id,\n        supplier_id,\n        name,\n        position,\n        department,\n        phone,\n        email,\n        is_primary,\n        notes,\n        created_at,\n        updated_at\n      `\n      )\n      .eq(\"supplier_id\", id)\n      .order(\"is_primary\", { ascending: false })\n      .order(\"name\", { ascending: true });\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch supplier contacts from database\" },\n        { status: 500 }\n      );\n    }\n\n    // Map name to contact_name for frontend compatibility\n    const contactsWithCompatibility = (contacts || []).map(contact => ({\n      ...contact,\n      contact_name: contact.name,\n      is_active: true, // Default since table doesn't have this field\n    }));\n\n    return NextResponse.json(contactsWithCompatibility);\n  } catch (error) {\n    console.error(\"Supplier contacts GET API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch supplier contacts\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Supplier ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const {\n      contact_name,\n      name,\n      position,\n      department,\n      phone,\n      email,\n      is_primary = false,\n      notes,\n    } = body;\n\n    // Use contact_name or name (for compatibility)\n    const contactName = contact_name || name;\n\n    // Validation\n    if (!contactName) {\n      return NextResponse.json(\n        { error: \"Contact name is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Email validation if provided\n    if (email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n      return NextResponse.json(\n        { error: \"Invalid email format\" },\n        { status: 400 }\n      );\n    }\n\n    // If this is set as primary, remove primary status from other contacts\n    if (is_primary) {\n      await supabaseService\n        .from(\"supplier_contacts\")\n        .update({ is_primary: false })\n        .eq(\"supplier_id\", id);\n    }\n\n    // Create contact in Supabase using service role to bypass RLS\n    const { data: contact, error } = await supabaseService\n      .from(\"supplier_contacts\")\n      .insert({\n        supplier_id: id,\n        name: contactName,\n        position: position || null,\n        department: department || null,\n        phone: phone || null,\n        email: email || null,\n        is_primary: is_primary,\n        notes: notes || null,\n      })\n      .select(\n        `\n        id,\n        supplier_id,\n        name,\n        position,\n        department,\n        phone,\n        email,\n        is_primary,\n        notes,\n        created_at,\n        updated_at\n      `\n      )\n      .single();\n\n    if (error) {\n      console.error(\"Supabase error creating supplier contact:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create supplier contact in database\" },\n        { status: 500 }\n      );\n    }\n\n    // Map name to contact_name for frontend compatibility\n    const contactWithCompatibility = {\n      ...contact,\n      contact_name: contact.name,\n      is_active: true,\n    };\n\n    return NextResponse.json(contactWithCompatibility, { status: 201 });\n  } catch (error) {\n    console.error(\"Create supplier contact error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create supplier contact\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}