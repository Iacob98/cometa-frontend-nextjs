{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/equipment/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: equipmentId } = await params;\n\n    // Get single equipment from Supabase\n    const { data: equipment, error } = await supabase\n      .from('equipment')\n      .select(`\n        id,\n        type,\n        name,\n        inventory_no,\n        owned,\n        status,\n        rental_cost_per_day,\n        purchase_date,\n        warranty_until,\n        description,\n        is_active,\n        created_at,\n        updated_at,\n        equipment_assignments(\n          id,\n          project_id,\n          crew_id,\n          from_ts,\n          to_ts,\n          is_permanent,\n          rental_cost_per_day,\n          notes,\n          created_at,\n          project:projects(id, name, city),\n          crew:crews(id, name)\n        )\n      `)\n      .eq('id', equipmentId)\n      .eq('is_active', true)\n      .single();\n\n    if (error) {\n      console.error('Supabase equipment query error:', error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Equipment not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to fetch equipment' },\n        { status: 500 }\n      );\n    }\n\n    // Format response to match expected structure\n    const currentAssignments = (equipment.equipment_assignments || []).filter((assignment: any) => {\n      if (!assignment.to_ts) return true; // Permanent or ongoing assignments\n      return new Date(assignment.to_ts) > new Date(); // Future end date\n    });\n\n    let currentAssignment = null;\n    if (currentAssignments.length > 0) {\n      currentAssignment = currentAssignments[0];\n    }\n\n    const formattedEquipment = {\n      id: equipment.id,\n      type: equipment.type,\n      name: equipment.name,\n      inventory_no: equipment.inventory_no || '',\n      owned: equipment.owned,\n      status: equipment.status || 'available',\n      purchase_price_eur: 0, // Not available in current schema, set to 0\n      rental_price_per_day_eur: Number(equipment.rental_cost_per_day) || 0,\n      rental_price_per_hour_eur: 0, // Not available in current schema, set to 0\n      current_location: '', // Not available in current schema, set to empty\n      quantity: 1, // Default to 1 for backward compatibility\n      purchase_date: equipment.purchase_date,\n      warranty_until: equipment.warranty_until,\n      description: equipment.description || '',\n      is_active: equipment.is_active,\n      current_assignment: currentAssignment ? {\n        id: currentAssignment.id,\n        project_id: currentAssignment.project_id,\n        crew_id: currentAssignment.crew_id,\n        from_ts: currentAssignment.from_ts,\n        to_ts: currentAssignment.to_ts,\n        is_permanent: currentAssignment.is_permanent,\n        rental_cost_per_day: Number(currentAssignment.rental_cost_per_day) || 0,\n        notes: currentAssignment.notes || '',\n        project: currentAssignment.project ? {\n          id: currentAssignment.project.id,\n          name: currentAssignment.project.name,\n          city: currentAssignment.project.city\n        } : null,\n        crew: currentAssignment.crew ? {\n          id: currentAssignment.crew.id,\n          name: currentAssignment.crew.name\n        } : null,\n        duration_days: currentAssignment.to_ts ?\n          Math.ceil((new Date(currentAssignment.to_ts).getTime() - new Date(currentAssignment.from_ts).getTime()) / (1000 * 60 * 60 * 24)) : null\n      } : null,\n      assignments_count: equipment.equipment_assignments?.length || 0,\n      created_at: equipment.created_at,\n      updated_at: equipment.updated_at\n    };\n\n    return NextResponse.json(formattedEquipment);\n  } catch (error) {\n    console.error('Equipment GET API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: equipmentId } = await params;\n    const body = await request.json();\n    const {\n      type,\n      name,\n      inventory_no,\n      owned,\n      status,\n      purchase_price_eur, // This will be ignored since it doesn't exist in the schema\n      rental_price_per_day_eur,\n      rental_price_per_hour_eur, // This will be ignored since it doesn't exist in the schema\n      current_location, // This will be ignored since it doesn't exist in the schema\n      description\n    } = body;\n\n    // Prepare update data\n    const updateData: any = {\n      updated_at: new Date().toISOString()\n    };\n\n    if (type !== undefined) updateData.type = type;\n    if (name !== undefined) updateData.name = name;\n    if (inventory_no !== undefined) updateData.inventory_no = inventory_no;\n    if (owned !== undefined) updateData.owned = owned;\n    if (status !== undefined) updateData.status = status;\n    if (rental_price_per_day_eur !== undefined) updateData.rental_cost_per_day = Number(rental_price_per_day_eur);\n    if (description !== undefined) updateData.description = description;\n\n    // Update equipment\n    const { data: updatedEquipment, error: updateError } = await supabase\n      .from('equipment')\n      .update(updateData)\n      .eq('id', equipmentId)\n      .select(`\n        id,\n        type,\n        name,\n        inventory_no,\n        owned,\n        status,\n        rental_cost_per_day,\n        purchase_date,\n        warranty_until,\n        description,\n        is_active,\n        created_at,\n        updated_at\n      `)\n      .single();\n\n    if (updateError) {\n      console.error('Supabase equipment update error:', updateError);\n      if (updateError.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Equipment not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to update equipment' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Equipment updated successfully',\n      equipment: updatedEquipment\n    });\n  } catch (error) {\n    console.error('Equipment PUT API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to update equipment' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: equipmentId } = await params;\n\n    // Check if equipment has active assignments\n    const { data: activeAssignments, error: assignmentError } = await supabase\n      .from('equipment_assignments')\n      .select('id')\n      .eq('equipment_id', equipmentId)\n      .is('to_ts', null); // Active assignments (no end date)\n\n    if (assignmentError) {\n      console.error('Error checking equipment assignments:', assignmentError);\n      return NextResponse.json(\n        { error: 'Failed to check equipment assignments' },\n        { status: 500 }\n      );\n    }\n\n    if (activeAssignments && activeAssignments.length > 0) {\n      return NextResponse.json(\n        { error: 'Cannot delete equipment with active assignments. Please end all assignments first.' },\n        { status: 400 }\n      );\n    }\n\n    // Soft delete equipment by setting is_active to false\n    const { error: deleteError } = await supabase\n      .from('equipment')\n      .update({\n        is_active: false,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', equipmentId);\n\n    if (deleteError) {\n      console.error('Supabase equipment delete error:', deleteError);\n      if (deleteError.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Equipment not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to delete equipment' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Equipment deleted successfully'\n    });\n  } catch (error) {\n    console.error('Equipment DELETE API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete equipment' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}