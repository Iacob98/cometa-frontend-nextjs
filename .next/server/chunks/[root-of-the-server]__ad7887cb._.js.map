{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/equipment/assignments/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\nimport { join } from 'path';\n\n// Simple file-based storage for demo purposes\ninterface Assignment {\n  id: string;\n  resource_type: 'equipment' | 'vehicle';\n  equipment_id?: string;\n  vehicle_id?: string;\n  crew_id: string;\n  project_id?: string;\n  assigned_at: string;\n  returned_at?: string;\n  daily_rental_cost?: number;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nconst ASSIGNMENTS_FILE = join(process.cwd(), 'temp_assignments.json');\n\nfunction loadAssignments(): Assignment[] {\n  try {\n    if (existsSync(ASSIGNMENTS_FILE)) {\n      const data = readFileSync(ASSIGNMENTS_FILE, 'utf-8');\n      return JSON.parse(data);\n    }\n    return [];\n  } catch (error) {\n    console.error('Error loading assignments:', error);\n    return [];\n  }\n}\n\nfunction saveAssignments(assignments: Assignment[]) {\n  try {\n    writeFileSync(ASSIGNMENTS_FILE, JSON.stringify(assignments, null, 2));\n  } catch (error) {\n    console.error('Error saving assignments:', error);\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const per_page = parseInt(searchParams.get('per_page') || '20');\n    const active_only = searchParams.get('active_only') === 'true';\n    const crew_id = searchParams.get('crew_id');\n    const equipment_id = searchParams.get('equipment_id');\n    const project_id = searchParams.get('project_id');\n\n    let assignments = loadAssignments();\n\n    // Apply filters\n    if (active_only) {\n      assignments = assignments.filter(assignment => !assignment.returned_at);\n    }\n\n    if (crew_id) {\n      assignments = assignments.filter(assignment => assignment.crew_id === crew_id);\n    }\n\n    if (equipment_id) {\n      assignments = assignments.filter(assignment => assignment.equipment_id === equipment_id);\n    }\n\n    if (project_id) {\n      assignments = assignments.filter(assignment => assignment.project_id === project_id);\n    }\n\n    // Sort by created_at descending\n    const sortedAssignments = assignments.sort((a, b) =>\n      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n    );\n\n    // Paginate\n    const offset = (page - 1) * per_page;\n    const paginatedAssignments = sortedAssignments.slice(offset, offset + per_page);\n\n    return NextResponse.json({\n      items: paginatedAssignments,\n      page,\n      per_page,\n      total: assignments.length,\n      total_pages: Math.ceil(assignments.length / per_page)\n    });\n  } catch (error) {\n    console.error('Equipment assignments API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      resource_type,\n      equipment_id,\n      vehicle_id,\n      crew_id,\n      project_id,\n      assigned_at,\n      returned_at,\n      daily_rental_cost,\n      notes\n    } = body;\n\n    // Validate required fields\n    if (!crew_id) {\n      return NextResponse.json(\n        { error: 'Crew is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!resource_type || (resource_type !== 'equipment' && resource_type !== 'vehicle')) {\n      return NextResponse.json(\n        { error: 'Resource type must be either \"equipment\" or \"vehicle\"' },\n        { status: 400 }\n      );\n    }\n\n    if (resource_type === 'equipment' && !equipment_id) {\n      return NextResponse.json(\n        { error: 'Equipment ID is required when resource type is equipment' },\n        { status: 400 }\n      );\n    }\n\n    if (resource_type === 'vehicle' && !vehicle_id) {\n      return NextResponse.json(\n        { error: 'Vehicle ID is required when resource type is vehicle' },\n        { status: 400 }\n      );\n    }\n\n    if (!assigned_at) {\n      return NextResponse.json(\n        { error: 'Assignment start date is required' },\n        { status: 400 }\n      );\n    }\n\n    // Generate unique ID\n    const assignmentId = `assignment-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    // Create assignment\n    const newAssignment: Assignment = {\n      id: assignmentId,\n      resource_type,\n      crew_id,\n      assigned_at: new Date(assigned_at).toISOString(),\n      daily_rental_cost: daily_rental_cost ? parseFloat(daily_rental_cost.toString()) : undefined,\n      notes: notes || undefined,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n\n    // Add resource ID based on type\n    if (resource_type === 'equipment') {\n      newAssignment.equipment_id = equipment_id;\n    } else {\n      newAssignment.vehicle_id = vehicle_id;\n    }\n\n    // Add optional fields\n    if (project_id) {\n      newAssignment.project_id = project_id;\n    }\n\n    if (returned_at) {\n      newAssignment.returned_at = new Date(returned_at).toISOString();\n    }\n\n    // Save to file storage\n    const assignments = loadAssignments();\n    assignments.push(newAssignment);\n    saveAssignments(assignments);\n\n    console.log(`âœ… Created ${resource_type} assignment:`, {\n      assignmentId: newAssignment.id,\n      crewId: crew_id,\n      resourceId: resource_type === 'equipment' ? equipment_id : vehicle_id,\n      projectId: project_id\n    });\n\n    return NextResponse.json({\n      message: `${resource_type.charAt(0).toUpperCase() + resource_type.slice(1)} assignment created successfully`,\n      assignment: newAssignment\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Equipment assignment POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create assignment' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}