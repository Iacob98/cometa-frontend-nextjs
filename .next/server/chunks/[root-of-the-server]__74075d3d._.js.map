{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Supabase configuration\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\n// Create a single supabase client for interacting with your database\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true,\n  },\n})\n\n// Storage bucket names from environment\nexport const STORAGE_BUCKETS = {\n  PROJECT_PHOTOS: process.env.SUPABASE_PROJECT_PHOTOS_BUCKET || 'project-photos',\n  WORK_PHOTOS: process.env.SUPABASE_WORK_PHOTOS_BUCKET || 'work-photos',\n  PROJECT_DOCUMENTS: process.env.SUPABASE_PROJECT_DOCUMENTS_BUCKET || 'project-documents',\n  HOUSE_DOCUMENTS: process.env.SUPABASE_HOUSE_DOCUMENTS_BUCKET || 'house-documents',\n  USER_AVATARS: process.env.SUPABASE_USER_AVATARS_BUCKET || 'user-avatars',\n  REPORTS: process.env.SUPABASE_REPORTS_BUCKET || 'reports',\n} as const\n\n// File upload configuration\nexport const FILE_UPLOAD_CONFIG = {\n  // Maximum file size: 10MB\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n\n  // Maximum files per batch upload\n  MAX_FILES_PER_BATCH: 5,\n\n  // Allowed file types\n  ALLOWED_FILE_TYPES: {\n    IMAGES: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n    DOCUMENTS: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n    SPREADSHEETS: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\n    PLANS: ['application/pdf', 'application/dwg', 'application/dxf', 'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/bmp', 'image/tiff'],\n  },\n\n  // Get all allowed MIME types\n  getAllowedTypes: () => {\n    const allTypes = [\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.IMAGES,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.DOCUMENTS,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.SPREADSHEETS,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.PLANS,\n    ];\n    // Remove duplicates using Set\n    return [...new Set(allTypes)];\n  },\n} as const\n\n// File validation utilities\nexport const validateFile = (file: File) => {\n  const errors: string[] = []\n\n  // Check file size\n  if (file.size > FILE_UPLOAD_CONFIG.MAX_FILE_SIZE) {\n    errors.push(`File size must be less than ${FILE_UPLOAD_CONFIG.MAX_FILE_SIZE / (1024 * 1024)}MB`)\n  }\n\n  // Check file type\n  const allowedTypes = FILE_UPLOAD_CONFIG.getAllowedTypes()\n  console.log('🔍 File validation:', {\n    fileName: file.name,\n    fileType: file.type,\n    allowedTypes,\n    isTypeAllowed: allowedTypes.includes(file.type)\n  });\n\n  if (!allowedTypes.includes(file.type)) {\n    errors.push(`File type ${file.type} is not allowed`)\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  }\n}\n\n// Generate secure file name\nexport const generateSecureFileName = (originalFileName: string, userId?: string) => {\n  const timestamp = Date.now()\n  const randomString = Math.random().toString(36).substring(2, 15)\n  const fileExtension = originalFileName.split('.').pop()\n  const baseName = originalFileName.split('.')[0].toLowerCase().replace(/[^a-z0-9]/g, '-')\n\n  const prefix = userId ? `${userId}_` : ''\n  return `${prefix}${baseName}_${timestamp}_${randomString}.${fileExtension}`\n}\n\n// Get file category based on bucket\nexport const getFileCategoryFromBucket = (bucketName: string) => {\n  const bucketMap = {\n    [STORAGE_BUCKETS.PROJECT_PHOTOS]: 'project-photo',\n    [STORAGE_BUCKETS.WORK_PHOTOS]: 'work-photo',\n    [STORAGE_BUCKETS.PROJECT_DOCUMENTS]: 'project-document',\n    [STORAGE_BUCKETS.HOUSE_DOCUMENTS]: 'house-document',\n    [STORAGE_BUCKETS.USER_AVATARS]: 'user-avatar',\n    [STORAGE_BUCKETS.REPORTS]: 'report',\n  } as const\n\n  return bucketMap[bucketName as keyof typeof bucketMap] || 'unknown'\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/lib/upload-utils.ts"],"sourcesContent":["import { generateSecureFileName, validateFile } from './supabase'\nimport type { SupabaseClient } from '@supabase/supabase-js'\nimport type {\n  FileUploadOptions,\n  FileUploadResult,\n  FileUploadError,\n  BatchUploadResult,\n  UploadedFile,\n  FileValidationResult,\n  FileMetadata,\n} from '@/types/upload'\n\n/**\n * Upload a single file to Supabase Storage\n */\nexport async function uploadFile(\n  file: File,\n  options: FileUploadOptions,\n  supabaseClient?: SupabaseClient\n): Promise<FileUploadResult> {\n  // Use provided client or fallback to default\n  const { supabase } = await import('./supabase')\n  const client = supabaseClient || supabase\n  try {\n    // Validate file\n    const validation = validateFile(file)\n    if (!validation.isValid) {\n      return {\n        success: false,\n        error: validation.errors.join(', '),\n      }\n    }\n\n    // Generate secure filename\n    const fileName = options.fileName || generateSecureFileName(file.name)\n    const filePath = options.folder ? `${options.folder}/${fileName}` : fileName\n\n    // Upload to Supabase Storage\n    const { data, error } = await client.storage\n      .from(options.bucketName)\n      .upload(filePath, file, {\n        cacheControl: options.cacheControl || '3600',\n        contentType: options.contentType || file.type,\n        upsert: options.upsert || false,\n        metadata: options.metadata,\n      })\n\n    if (error) {\n      return {\n        success: false,\n        error: error.message,\n      }\n    }\n\n    // Get public URL\n    const { data: urlData } = client.storage\n      .from(options.bucketName)\n      .getPublicUrl(data.path)\n\n    return {\n      success: true,\n      url: urlData.publicUrl,\n      path: data.path,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n    }\n  }\n}\n\n/**\n * Upload multiple files in batch\n */\nexport async function uploadMultipleFiles(\n  files: File[],\n  options: FileUploadOptions\n): Promise<BatchUploadResult> {\n  const results: BatchUploadResult = {\n    successful: [],\n    failed: [],\n    totalFiles: files.length,\n    successCount: 0,\n    failureCount: 0,\n  }\n\n  // Process files concurrently (limit to avoid rate limiting)\n  const CONCURRENT_UPLOADS = 3\n  const batches = []\n\n  for (let i = 0; i < files.length; i += CONCURRENT_UPLOADS) {\n    batches.push(files.slice(i, i + CONCURRENT_UPLOADS))\n  }\n\n  for (const batch of batches) {\n    const promises = batch.map(async (file) => {\n      const result = await uploadFile(file, options)\n\n      if (result.success) {\n        const uploadedFile: UploadedFile = {\n          id: crypto.randomUUID(),\n          name: file.name,\n          originalName: file.name,\n          size: file.size,\n          type: file.type,\n          url: result.url!,\n          path: result.path!,\n          bucketName: options.bucketName,\n          uploadedAt: new Date().toISOString(),\n          metadata: options.metadata,\n        }\n\n        results.successful.push(uploadedFile)\n        results.successCount++\n      } else {\n        results.failed.push({\n          file,\n          error: {\n            code: 'UPLOAD_FAILED',\n            message: result.error || 'Upload failed',\n          },\n        })\n        results.failureCount++\n      }\n    })\n\n    await Promise.all(promises)\n  }\n\n  return results\n}\n\n/**\n * Delete a file from Supabase Storage\n */\nexport async function deleteFile(\n  bucketName: string,\n  filePath: string\n): Promise<{ success: boolean; error?: string }> {\n  try {\n    const { supabase } = await import('./supabase')\n    const { error } = await supabase.storage\n      .from(bucketName)\n      .remove([filePath])\n\n    if (error) {\n      return {\n        success: false,\n        error: error.message,\n      }\n    }\n\n    return { success: true }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n    }\n  }\n}\n\n/**\n * Get signed URL for secure file access\n */\nexport async function getSignedUrl(\n  bucketName: string,\n  filePath: string,\n  expiresIn: number = 3600\n): Promise<{ url?: string; error?: string }> {\n  try {\n    const { supabase } = await import('./supabase')\n    const { data, error } = await supabase.storage\n      .from(bucketName)\n      .createSignedUrl(filePath, expiresIn)\n\n    if (error) {\n      return { error: error.message }\n    }\n\n    return { url: data.signedUrl }\n  } catch (error) {\n    return {\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n    }\n  }\n}\n\n/**\n * List files in a bucket folder\n */\nexport async function listFiles(\n  bucketName: string,\n  folder?: string,\n  limit: number = 100,\n  offset: number = 0\n) {\n  try {\n    const { supabase } = await import('./supabase')\n    const { data, error } = await supabase.storage\n      .from(bucketName)\n      .list(folder, {\n        limit,\n        offset,\n      })\n\n    if (error) {\n      return { files: [], error: error.message }\n    }\n\n    return { files: data || [], error: null }\n  } catch (error) {\n    return {\n      files: [],\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n    }\n  }\n}\n\n/**\n * Get file information\n */\nexport async function getFileInfo(\n  bucketName: string,\n  filePath: string\n) {\n  try {\n    const { supabase } = await import('./supabase')\n    const { data, error } = await supabase.storage\n      .from(bucketName)\n      .list(filePath.split('/').slice(0, -1).join('/') || undefined, {\n        search: filePath.split('/').pop(),\n      })\n\n    if (error) {\n      return { info: null, error: error.message }\n    }\n\n    const fileInfo = data?.find(\n      (item) => item.name === filePath.split('/').pop()\n    )\n\n    return { info: fileInfo || null, error: null }\n  } catch (error) {\n    return {\n      info: null,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n    }\n  }\n}\n\n/**\n * Create a presigned upload URL\n */\nexport async function createPresignedUploadUrl(\n  bucketName: string,\n  filePath: string\n): Promise<{ token?: string; error?: string }> {\n  try {\n    const { supabase } = await import('./supabase')\n    const { data, error } = await supabase.storage\n      .from(bucketName)\n      .createSignedUploadUrl(filePath)\n\n    if (error) {\n      return { error: error.message }\n    }\n\n    return { token: data.token }\n  } catch (error) {\n    return {\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n    }\n  }\n}\n\n/**\n * Upload to a presigned URL\n */\nexport async function uploadToSignedUrl(\n  bucketName: string,\n  filePath: string,\n  token: string,\n  file: File\n): Promise<FileUploadResult> {\n  try {\n    const { supabase } = await import('./supabase')\n    const { data, error } = await supabase.storage\n      .from(bucketName)\n      .uploadToSignedUrl(filePath, token, file)\n\n    if (error) {\n      return {\n        success: false,\n        error: error.message,\n      }\n    }\n\n    // Get public URL\n    const { data: urlData } = supabase.storage\n      .from(bucketName)\n      .getPublicUrl(data.path)\n\n    return {\n      success: true,\n      url: urlData.publicUrl,\n      path: data.path,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n    }\n  }\n}\n\n/**\n * Save file metadata to database (you'll need to implement the database table)\n */\nexport async function saveFileMetadata(metadata: Omit<FileMetadata, 'id' | 'uploaded_at' | 'updated_at'>) {\n  // This would typically save to your PostgreSQL database\n  // You'll need to create a files table and implement this function\n  console.log('Saving file metadata:', metadata)\n\n  // Placeholder implementation - replace with actual database call\n  return {\n    success: true,\n    id: crypto.randomUUID(),\n  }\n}\n\n/**\n * Validate multiple files\n */\nexport function validateFiles(files: File[]): FileValidationResult {\n  const errors: string[] = []\n\n  if (files.length === 0) {\n    errors.push('No files selected')\n    return { isValid: false, errors }\n  }\n\n  // Check batch size limit\n  if (files.length > 5) {\n    errors.push('Maximum 5 files allowed per batch')\n  }\n\n  // Validate each file\n  files.forEach((file, index) => {\n    const validation = validateFile(file)\n    if (!validation.isValid) {\n      errors.push(`File ${index + 1} (${file.name}): ${validation.errors.join(', ')}`)\n    }\n  })\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/project-preparation/plans/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from '@supabase/supabase-js';\nimport { uploadFile } from '@/lib/upload-utils';\nimport { generateFolderPath } from '@/lib/supabase-buckets';\n\n// Service role client for bypassing RLS\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get(\"project_id\");\n\n    if (!project_id) {\n      return NextResponse.json(\n        { error: \"Project ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Get project plans from database\n    const { data: plans, error } = await supabase\n      .from('project_plans')\n      .select(`\n        id,\n        title,\n        description,\n        plan_type,\n        filename,\n        file_size,\n        file_url,\n        file_path,\n        uploaded_at\n      `)\n      .eq('project_id', project_id)\n      .order('uploaded_at', { ascending: false });\n\n    if (error) {\n      console.error('Supabase project plans query error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch project plans' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(plans || []);\n  } catch (error) {\n    console.error(\"Plans API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch plans\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Handle both JSON and FormData requests\n    const contentType = request.headers.get('content-type') || '';\n    let project_id, title, description, plan_type, filename, file_size, file_url, file_path;\n\n    if (contentType.includes('multipart/form-data')) {\n      // Handle FormData with file upload\n      const formData = await request.formData();\n\n      project_id = formData.get('project_id') as string;\n      title = formData.get('title') as string;\n      description = formData.get('description') as string;\n      plan_type = formData.get('plan_type') as string;\n\n      const file = formData.get('file') as File;\n\n      if (!project_id || !title || !plan_type || !file) {\n        return NextResponse.json(\n          { error: \"Project ID, title, plan type, and file are required\" },\n          { status: 400 }\n        );\n      }\n\n      // Upload file to Supabase Storage\n      console.log('Uploading file to Supabase Storage:', {\n        fileName: file.name,\n        fileSize: file.size,\n        fileType: file.type,\n        projectId: project_id,\n        planType: plan_type\n      });\n\n      // Generate folder path for project documents\n      const folderPath = `projects/${project_id}/plans`;\n\n      const uploadResult = await uploadFile(file, {\n        bucketName: 'project-documents',\n        folder: folderPath,\n        metadata: {\n          project_id,\n          plan_type,\n          title,\n          description: description || '',\n          uploaded_by: 'system', // You might want to get this from auth\n          upload_source: 'project_preparation'\n        }\n      }, supabase); // Pass the service role client\n\n      if (!uploadResult.success) {\n        console.error('File upload failed:', uploadResult.error);\n        return NextResponse.json(\n          { error: `File upload failed: ${uploadResult.error}` },\n          { status: 500 }\n        );\n      }\n\n      console.log('File uploaded successfully:', uploadResult);\n\n      // Set file info from upload result\n      filename = file.name;\n      file_size = file.size;\n      file_url = uploadResult.url!;\n      file_path = uploadResult.path!;\n\n    } else {\n      // Handle JSON requests\n      const body = await request.json();\n      ({ project_id, title, description, plan_type, filename, file_size, file_url, file_path } = body);\n\n      if (!project_id || !title || !plan_type || !filename) {\n        return NextResponse.json(\n          { error: \"Project ID, title, plan type, and filename are required\" },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Create project plan in database\n    const { data: plan, error } = await supabase\n      .from('project_plans')\n      .insert({\n        project_id,\n        title,\n        description,\n        plan_type,\n        filename,\n        file_size: file_size || 0,\n        file_url: file_url || '',\n        file_path: file_path || ''\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Supabase project plan creation error:', error);\n      return NextResponse.json(\n        { error: 'Failed to create project plan' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      plan_id: plan.id,\n      message: \"Project plan created successfully\",\n      plan\n    }, { status: 201 });\n  } catch (error) {\n    console.error(\"Plans POST error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create plan\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}