{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/geo-measurements/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get(\"project_id\");\n    const measurement_type = searchParams.get(\"measurement_type\");\n    const measured_by = searchParams.get(\"measured_by\");\n\n    let query = supabase\n      .from(\"geo_measurements\")\n      .select(`\n        id,\n        measurement_type,\n        geometry,\n        value,\n        unit,\n        label,\n        notes,\n        project_id,\n        measured_by,\n        measured_at\n      `);\n\n    if (project_id) {\n      query = query.eq(\"project_id\", project_id);\n    }\n\n    if (measurement_type) {\n      query = query.eq(\"measurement_type\", measurement_type);\n    }\n\n    if (measured_by) {\n      query = query.eq(\"measured_by\", measured_by);\n    }\n\n    const { data: measurements, error } = await query.order(\"measured_at\", { ascending: false });\n\n    if (error) {\n      console.error(\"Supabase geo measurements query error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch geo measurements\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(measurements || []);\n  } catch (error) {\n    console.error(\"Geo measurements API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate required fields\n    if (!body.measurement_type || !body.geometry || !body.unit) {\n      return NextResponse.json(\n        { error: \"Measurement type, geometry, and unit are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Calculate value based on geometry and measurement type\n    let calculatedValue = body.value;\n\n    if (!calculatedValue) {\n      if (body.measurement_type === \"distance\" && body.geometry?.coordinates) {\n        // Calculate distance for LineString geometry\n        const coords = body.geometry.coordinates;\n        let totalDistance = 0;\n\n        if (coords && coords.length > 1) {\n          for (let i = 1; i < coords.length; i++) {\n            const [lon1, lat1] = coords[i - 1];\n            const [lon2, lat2] = coords[i];\n\n            // Haversine formula\n            const R = 6371000; // Earth's radius in meters\n            const lat1Rad = lat1 * Math.PI / 180;\n            const lat2Rad = lat2 * Math.PI / 180;\n            const deltaLatRad = (lat2 - lat1) * Math.PI / 180;\n            const deltaLonRad = (lon2 - lon1) * Math.PI / 180;\n\n            const a = Math.sin(deltaLatRad/2) * Math.sin(deltaLatRad/2) +\n                      Math.cos(lat1Rad) * Math.cos(lat2Rad) *\n                      Math.sin(deltaLonRad/2) * Math.sin(deltaLonRad/2);\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n            totalDistance += R * c;\n          }\n        }\n        calculatedValue = totalDistance;\n      } else if (body.measurement_type === \"area\" && body.geometry?.coordinates) {\n        // Calculate area for Polygon geometry (simplified)\n        const coords = body.geometry.coordinates[0]; // Exterior ring\n        if (coords && coords.length >= 4) {\n          let area = 0;\n          const n = coords.length - 1; // Last point same as first\n\n          for (let i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            area += coords[i][0] * coords[j][1];\n            area -= coords[j][0] * coords[i][1];\n          }\n\n          // Convert to square meters (very rough approximation)\n          calculatedValue = Math.abs(area / 2) * 111319.49 * 111319.49;\n        }\n      }\n    }\n\n    const measurementData = {\n      measurement_type: body.measurement_type,\n      geometry: body.geometry,\n      value: calculatedValue || 0,\n      unit: body.unit,\n      label: body.label,\n      notes: body.notes,\n      project_id: body.project_id || null,\n      measured_by: body.measured_by || \"system\",\n      measured_at: body.measured_at || new Date().toISOString(),\n    };\n\n    const { data: measurement, error } = await supabase\n      .from(\"geo_measurements\")\n      .insert([measurementData])\n      .select()\n      .single();\n\n    if (error) {\n      console.error(\"Supabase geo measurement creation error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create geo measurement\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(measurement, { status: 201 });\n  } catch (error) {\n    console.error(\"Geo measurement creation API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}