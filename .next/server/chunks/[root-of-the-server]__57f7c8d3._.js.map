{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/project-preparation/plans/%5Bid%5D/download/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from '@supabase/supabase-js';\n\n// Service role client for bypassing RLS\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const url = new URL(request.url);\n    const download = url.searchParams.get('download') === 'true';\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Plan ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Get project plan from database\n    const { data: plan, error } = await supabase\n      .from('project_plans')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      console.error('Supabase project plan query error:', error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Project plan not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to fetch project plan' },\n        { status: 500 }\n      );\n    }\n\n    if (!plan.file_url) {\n      return NextResponse.json(\n        { error: 'File URL not found' },\n        { status: 404 }\n      );\n    }\n\n    // Fetch the file from Supabase Storage\n    const fileResponse = await fetch(plan.file_url);\n\n    if (!fileResponse.ok) {\n      return NextResponse.json(\n        { error: 'File not found in storage' },\n        { status: 404 }\n      );\n    }\n\n    const fileBuffer = await fileResponse.arrayBuffer();\n\n    // Determine content type based on file extension\n    const extension = plan.filename.split('.').pop()?.toLowerCase();\n    let contentType = 'application/octet-stream';\n\n    switch (extension) {\n      case 'pdf':\n        contentType = 'application/pdf';\n        break;\n      case 'png':\n        contentType = 'image/png';\n        break;\n      case 'jpg':\n      case 'jpeg':\n        contentType = 'image/jpeg';\n        break;\n      case 'gif':\n        contentType = 'image/gif';\n        break;\n      case 'svg':\n        contentType = 'image/svg+xml';\n        break;\n      case 'dwg':\n        contentType = 'application/dwg';\n        break;\n      case 'dxf':\n        contentType = 'application/dxf';\n        break;\n      default:\n        contentType = 'application/octet-stream';\n    }\n\n    const headers: HeadersInit = {\n      'Content-Type': contentType,\n      'Content-Length': fileBuffer.byteLength.toString(),\n    };\n\n    // If download parameter is true, force download\n    if (download) {\n      headers['Content-Disposition'] = `attachment; filename=\"${plan.filename}\"`;\n    } else {\n      // For inline viewing (especially PDFs)\n      headers['Content-Disposition'] = `inline; filename=\"${plan.filename}\"`;\n    }\n\n    return new NextResponse(fileBuffer, {\n      status: 200,\n      headers,\n    });\n\n  } catch (error) {\n    console.error(\"Project plan download error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to download project plan\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,wCAAwC;AACxC,MAAM,WAAW,IAAA,yMAAY,gFAE3B,QAAQ,GAAG,CAAC,yBAAyB;AAGhC,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QACrB,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;QAC/B,MAAM,WAAW,IAAI,YAAY,CAAC,GAAG,CAAC,gBAAgB;QAEtD,IAAI,CAAC,IAAI;YACP,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,iCAAiC;QACjC,MAAM,EAAE,MAAM,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SACjC,IAAI,CAAC,iBACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,IACT,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,sCAAsC;YACpD,IAAI,MAAM,IAAI,KAAK,YAAY;gBAC7B,OAAO,gJAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAyB,GAClC;oBAAE,QAAQ;gBAAI;YAElB;YACA,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,KAAK,QAAQ,EAAE;YAClB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,uCAAuC;QACvC,MAAM,eAAe,MAAM,MAAM,KAAK,QAAQ;QAE9C,IAAI,CAAC,aAAa,EAAE,EAAE;YACpB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,aAAa,MAAM,aAAa,WAAW;QAEjD,iDAAiD;QACjD,MAAM,YAAY,KAAK,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI;QAClD,IAAI,cAAc;QAElB,OAAQ;YACN,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;YACL,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF;gBACE,cAAc;QAClB;QAEA,MAAM,UAAuB;YAC3B,gBAAgB;YAChB,kBAAkB,WAAW,UAAU,CAAC,QAAQ;QAClD;QAEA,gDAAgD;QAChD,IAAI,UAAU;YACZ,OAAO,CAAC,sBAAsB,GAAG,CAAC,sBAAsB,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC5E,OAAO;YACL,uCAAuC;YACvC,OAAO,CAAC,sBAAsB,GAAG,CAAC,kBAAkB,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;QACxE;QAEA,OAAO,IAAI,gJAAY,CAAC,YAAY;YAClC,QAAQ;YACR;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAkC,GAC3C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}