{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/projects/%5Bid%5D/stats/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: projectId } = await params;\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get project basic info\n    const { data: project, error: projectError } = await supabase\n      .from('projects')\n      .select('total_length_m, base_rate_per_m')\n      .eq('id', projectId)\n      .single();\n\n    if (projectError) {\n      if (projectError.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Project not found' },\n          { status: 404 }\n        );\n      }\n      console.error('Supabase project query error:', projectError);\n      return NextResponse.json(\n        { error: 'Failed to fetch project data' },\n        { status: 500 }\n      );\n    }\n\n    const totalLength = project?.total_length_m || 0;\n    const baseRate = project?.base_rate_per_m || 0;\n\n    // Get work entries statistics with parallel queries\n    const [workEntriesResult, teamResult, materialsResult, costsResult] = await Promise.all([\n      // Work entries statistics\n      supabase\n        .from('work_entries')\n        .select('id, approved_by, meters_done_m')\n        .eq('project_id', projectId),\n\n      // Team members count (using crews table)\n      supabase\n        .from('crew_members')\n        .select('user_id, crews!inner(project_id)')\n        .eq('crews.project_id', projectId)\n        .eq('is_active', true),\n\n      // Material allocations count\n      supabase\n        .from('material_allocations')\n        .select('id', { count: 'exact' })\n        .eq('project_id', projectId),\n\n      // Financial data (costs/transactions)\n      supabase\n        .from('transactions')\n        .select('amount_eur')\n        .eq('project_id', projectId)\n        .eq('transaction_type', 'expense')\n    ]);\n\n    // Process work entries\n    let workEntries = 0;\n    let pendingApprovals = 0;\n    let completedLength = 0;\n\n    if (workEntriesResult.data) {\n      workEntries = workEntriesResult.data.length;\n      pendingApprovals = workEntriesResult.data.filter(entry => !entry.approved_by).length;\n      completedLength = workEntriesResult.data.reduce(\n        (sum, entry) => sum + (entry.meters_done_m || 0),\n        0\n      );\n    }\n\n    // Process team members count\n    const teamMembers = teamResult.data?.length || 0;\n\n    // Process materials count\n    const materialsCount = materialsResult.count || 0;\n\n    // Process financial data\n    const totalSpent = costsResult.data?.reduce(\n      (sum, transaction) => sum + (transaction.amount_eur || 0),\n      0\n    ) || 0;\n\n    // Calculate progress percentage\n    const progressPercentage = totalLength > 0\n      ? Math.round((completedLength / totalLength) * 100)\n      : 0;\n\n    const projectBudget = totalLength * baseRate;\n\n    // Calculate preparation progress based on available data\n    let preparationProgress = 0;\n    if (teamMembers > 0) preparationProgress += 40;\n    if (materialsCount > 0) preparationProgress += 30;\n    if (workEntries > 0) preparationProgress += 30;\n\n    // Determine current phase based on progress and completion\n    let currentPhase = 1;\n    let phaseName = \"Project Initiation\";\n\n    if (preparationProgress >= 90) {\n      currentPhase = 10;\n      phaseName = \"Project Execution\";\n    } else if (preparationProgress >= 80) {\n      currentPhase = 9;\n      phaseName = \"Final Preparation\";\n    } else if (materialsCount > 0) {\n      currentPhase = 6;\n      phaseName = \"Materials Procurement\";\n    } else if (teamMembers > 0) {\n      currentPhase = 5;\n      phaseName = \"Team Assignment\";\n    } else if (preparationProgress > 30) {\n      currentPhase = 3;\n      phaseName = \"Resource Planning\";\n    } else if (preparationProgress > 10) {\n      currentPhase = 2;\n      phaseName = \"Site Assessment\";\n    }\n\n    return NextResponse.json({\n      progress: {\n        totalLength,\n        completedLength,\n        progressPercentage,\n        workEntries,\n        pendingApprovals,\n        teamMembers,\n        materialsCount,\n      },\n      phase: {\n        currentPhase,\n        totalPhases: 10,\n        phaseName,\n        phaseProgress: preparationProgress,\n      },\n      financial: {\n        projectBudget,\n        totalSpent,\n        spentPercentage: projectBudget > 0 ? Math.round((totalSpent / projectBudget) * 100) : 0,\n        remainingBudget: projectBudget - totalSpent,\n      },\n    });\n\n  } catch (error) {\n    console.error('Project stats API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,WAAW,IAAA,yMAAY;AAKtB,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAM,EAAE,IAAI,SAAS,EAAE,GAAG,MAAM;QAEhC,IAAI,CAAC,WAAW;YACd,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,yBAAyB;QACzB,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SAClD,IAAI,CAAC,YACL,MAAM,CAAC,mCACP,EAAE,CAAC,MAAM,WACT,MAAM;QAET,IAAI,cAAc;YAChB,IAAI,aAAa,IAAI,KAAK,YAAY;gBACpC,OAAO,gJAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAoB,GAC7B;oBAAE,QAAQ;gBAAI;YAElB;YACA,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,cAAc,SAAS,kBAAkB;QAC/C,MAAM,WAAW,SAAS,mBAAmB;QAE7C,oDAAoD;QACpD,MAAM,CAAC,mBAAmB,YAAY,iBAAiB,YAAY,GAAG,MAAM,QAAQ,GAAG,CAAC;YACtF,0BAA0B;YAC1B,SACG,IAAI,CAAC,gBACL,MAAM,CAAC,kCACP,EAAE,CAAC,cAAc;YAEpB,yCAAyC;YACzC,SACG,IAAI,CAAC,gBACL,MAAM,CAAC,oCACP,EAAE,CAAC,oBAAoB,WACvB,EAAE,CAAC,aAAa;YAEnB,6BAA6B;YAC7B,SACG,IAAI,CAAC,wBACL,MAAM,CAAC,MAAM;gBAAE,OAAO;YAAQ,GAC9B,EAAE,CAAC,cAAc;YAEpB,sCAAsC;YACtC,SACG,IAAI,CAAC,gBACL,MAAM,CAAC,cACP,EAAE,CAAC,cAAc,WACjB,EAAE,CAAC,oBAAoB;SAC3B;QAED,uBAAuB;QACvB,IAAI,cAAc;QAClB,IAAI,mBAAmB;QACvB,IAAI,kBAAkB;QAEtB,IAAI,kBAAkB,IAAI,EAAE;YAC1B,cAAc,kBAAkB,IAAI,CAAC,MAAM;YAC3C,mBAAmB,kBAAkB,IAAI,CAAC,MAAM,CAAC,CAAA,QAAS,CAAC,MAAM,WAAW,EAAE,MAAM;YACpF,kBAAkB,kBAAkB,IAAI,CAAC,MAAM,CAC7C,CAAC,KAAK,QAAU,MAAM,CAAC,MAAM,aAAa,IAAI,CAAC,GAC/C;QAEJ;QAEA,6BAA6B;QAC7B,MAAM,cAAc,WAAW,IAAI,EAAE,UAAU;QAE/C,0BAA0B;QAC1B,MAAM,iBAAiB,gBAAgB,KAAK,IAAI;QAEhD,yBAAyB;QACzB,MAAM,aAAa,YAAY,IAAI,EAAE,OACnC,CAAC,KAAK,cAAgB,MAAM,CAAC,YAAY,UAAU,IAAI,CAAC,GACxD,MACG;QAEL,gCAAgC;QAChC,MAAM,qBAAqB,cAAc,IACrC,KAAK,KAAK,CAAC,AAAC,kBAAkB,cAAe,OAC7C;QAEJ,MAAM,gBAAgB,cAAc;QAEpC,yDAAyD;QACzD,IAAI,sBAAsB;QAC1B,IAAI,cAAc,GAAG,uBAAuB;QAC5C,IAAI,iBAAiB,GAAG,uBAAuB;QAC/C,IAAI,cAAc,GAAG,uBAAuB;QAE5C,2DAA2D;QAC3D,IAAI,eAAe;QACnB,IAAI,YAAY;QAEhB,IAAI,uBAAuB,IAAI;YAC7B,eAAe;YACf,YAAY;QACd,OAAO,IAAI,uBAAuB,IAAI;YACpC,eAAe;YACf,YAAY;QACd,OAAO,IAAI,iBAAiB,GAAG;YAC7B,eAAe;YACf,YAAY;QACd,OAAO,IAAI,cAAc,GAAG;YAC1B,eAAe;YACf,YAAY;QACd,OAAO,IAAI,sBAAsB,IAAI;YACnC,eAAe;YACf,YAAY;QACd,OAAO,IAAI,sBAAsB,IAAI;YACnC,eAAe;YACf,YAAY;QACd;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,UAAU;gBACR;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;YACF;YACA,OAAO;gBACL;gBACA,aAAa;gBACb;gBACA,eAAe;YACjB;YACA,WAAW;gBACT;gBACA;gBACA,iBAAiB,gBAAgB,IAAI,KAAK,KAAK,CAAC,AAAC,aAAa,gBAAiB,OAAO;gBACtF,iBAAiB,gBAAgB;YACnC;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}