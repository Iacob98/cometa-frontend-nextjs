{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/material-orders/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { z } from \"zod\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// Validation schemas\nconst MaterialOrderSchema = z.object({\n  project_id: z.string().uuid(\"Invalid project ID\"),\n  material_id: z.string().uuid(\"Invalid material ID\"),\n  quantity: z.number().positive(\"Quantity must be positive\"),\n  unit_price: z.number().positive(\"Unit price must be positive\").optional(),\n  status: z.enum(['pending', 'ordered', 'delivered', 'cancelled']).default('pending'),\n  order_date: z.string().optional(),\n  delivery_date: z.string().optional(),\n  supplier: z.string().optional(),\n  notes: z.string().optional()\n});\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const per_page = parseInt(searchParams.get(\"per_page\") || \"20\");\n    const offset = (page - 1) * per_page;\n    const project_id = searchParams.get(\"project_id\");\n    const material_id = searchParams.get(\"material_id\");\n    const status = searchParams.get(\"status\");\n    const supplier = searchParams.get(\"supplier\");\n\n    let query = supabase\n      .from(\"material_orders\")\n      .select(\n        `\n        id,\n        project_id,\n        material_id,\n        quantity,\n        unit_price,\n        total_price,\n        status,\n        order_date,\n        delivery_date,\n        supplier,\n        notes,\n        created_at,\n        updated_at,\n        projects(id, name, city),\n        materials(id, name, category, unit)\n      `,\n        { count: \"exact\" }\n      )\n      .order(\"created_at\", { ascending: false })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters\n    if (project_id) {\n      query = query.eq(\"project_id\", project_id);\n    }\n\n    if (material_id) {\n      query = query.eq(\"material_id\", material_id);\n    }\n\n    if (status) {\n      query = query.eq(\"status\", status);\n    }\n\n    if (supplier) {\n      query = query.ilike(\"supplier\", `%${supplier}%`);\n    }\n\n    const { data: orders, error, count } = await query;\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch material orders from database\" },\n        { status: 500 }\n      );\n    }\n\n    // Calculate totals and enhance data\n    const enhancedOrders = (orders || []).map(order => ({\n      ...order,\n      total_price: order.total_price || (order.quantity * (order.unit_price || 0)),\n      project_name: order.projects?.name || \"Unknown Project\",\n      project_city: order.projects?.city || \"Unknown City\",\n      material_name: order.materials?.name || \"Unknown Material\",\n      material_category: order.materials?.category || \"Unknown Category\",\n      material_unit: order.materials?.unit || \"pcs\"\n    }));\n\n    // Calculate summary statistics\n    const totalValue = enhancedOrders.reduce((sum, order) => sum + (order.total_price || 0), 0);\n    const statusCounts = enhancedOrders.reduce((acc, order) => {\n      acc[order.status] = (acc[order.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return NextResponse.json({\n      items: enhancedOrders,\n      total: count || 0,\n      page,\n      per_page,\n      total_pages: Math.ceil((count || 0) / per_page),\n      summary: {\n        total_value: totalValue,\n        status_counts: statusCounts\n      }\n    });\n  } catch (error) {\n    console.error(\"Material orders API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch material orders\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate request body with Zod\n    const validationResult = MaterialOrderSchema.safeParse(body);\n    if (!validationResult.success) {\n      return NextResponse.json(\n        {\n          error: \"Validation failed\",\n          details: validationResult.error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    const validatedData = validationResult.data;\n\n    // Verify project exists\n    const { data: project, error: projectError } = await supabase\n      .from(\"projects\")\n      .select(\"id, name\")\n      .eq(\"id\", validatedData.project_id)\n      .single();\n\n    if (projectError || !project) {\n      return NextResponse.json(\n        { error: \"Project not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Verify material exists and get current price if not provided\n    const { data: material, error: materialError } = await supabase\n      .from(\"materials\")\n      .select(\"id, name, unit_price_eur, supplier_name\")\n      .eq(\"id\", validatedData.material_id)\n      .single();\n\n    if (materialError || !material) {\n      return NextResponse.json(\n        { error: \"Material not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Calculate order details\n    const unit_price = validatedData.unit_price || material.unit_price_eur || 0;\n    const total_price = validatedData.quantity * unit_price;\n    const supplier = validatedData.supplier || material.supplier_name || null;\n\n    // Create material order in Supabase\n    const { data: order, error } = await supabase\n      .from(\"material_orders\")\n      .insert([\n        {\n          project_id: validatedData.project_id,\n          material_id: validatedData.material_id,\n          quantity: validatedData.quantity,\n          unit_price: unit_price,\n          total_price: total_price,\n          status: validatedData.status,\n          order_date: validatedData.order_date || new Date().toISOString().split('T')[0],\n          delivery_date: validatedData.delivery_date || null,\n          supplier: supplier,\n          notes: validatedData.notes || null\n        },\n      ])\n      .select(\n        `\n        id,\n        project_id,\n        material_id,\n        quantity,\n        unit_price,\n        total_price,\n        status,\n        order_date,\n        delivery_date,\n        supplier,\n        notes,\n        created_at,\n        updated_at,\n        projects(id, name, city),\n        materials(id, name, category, unit)\n      `\n      )\n      .single();\n\n    if (error) {\n      console.error(\"Supabase error creating material order:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create material order in database\" },\n        { status: 500 }\n      );\n    }\n\n    // Enhanced response data\n    const enhancedOrder = {\n      ...order,\n      project_name: order.projects?.name || \"Unknown Project\",\n      project_city: order.projects?.city || \"Unknown City\",\n      material_name: order.materials?.name || \"Unknown Material\",\n      material_category: order.materials?.category || \"Unknown Category\",\n      material_unit: order.materials?.unit || \"pcs\"\n    };\n\n    return NextResponse.json({\n      message: \"Material order created successfully\",\n      order: enhancedOrder\n    }, { status: 201 });\n\n  } catch (error) {\n    console.error(\"Create material order error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create material order\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}