{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/crews/%5Bid%5D/members/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\n// Service role client for bypassing RLS\nconst supabaseService = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Crew ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const { data: members, error } = await supabaseService\n      .from('crew_members')\n      .select(`\n        id,\n        crew_id,\n        user_id,\n        role,\n        joined_at,\n        user:users(id, first_name, last_name, email, role)\n      `)\n      .eq('crew_id', id);\n\n    if (error) {\n      console.error('Supabase crew members fetch error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch crew members from database' },\n        { status: 500 }\n      );\n    }\n\n    // Map role to role_in_crew for frontend compatibility\n    const membersWithCompatibility = (members || []).map(member => ({\n      ...member,\n      role_in_crew: member.role,\n      // Add user data to the root level for compatibility\n      user_id: member.user_id,\n      first_name: member.user?.first_name,\n      last_name: member.user?.last_name,\n      full_name: `${member.user?.first_name || ''} ${member.user?.last_name || ''}`.trim(),\n      email: member.user?.email,\n    }));\n\n    return NextResponse.json({ members: membersWithCompatibility });\n  } catch (error) {\n    console.error('Crew members GET API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch crew members' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    console.log('üö® Crew member POST request:', { id, body });\n\n    if (!id) {\n      console.log('‚ùå Missing crew ID');\n      return NextResponse.json(\n        { error: 'Crew ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const { user_id, role_in_crew = 'member' } = body;\n\n    if (!user_id) {\n      console.log('‚ùå Missing user ID');\n      return NextResponse.json(\n        { error: 'User ID is required' },\n        { status: 400 }\n      );\n    }\n\n    console.log('‚úÖ Adding member to crew:', { crew_id: id, user_id, role: role_in_crew });\n\n    // Check if user is already in this crew\n    const { data: existingMember } = await supabaseService\n      .from('crew_members')\n      .select('id')\n      .eq('crew_id', id)\n      .eq('user_id', user_id)\n      .single();\n\n    if (existingMember) {\n      return NextResponse.json(\n        { error: 'User is already a member of this crew' },\n        { status: 409 }\n      );\n    }\n\n    // Add user to crew\n    const { data: newMember, error } = await supabaseService\n      .from('crew_members')\n      .insert({\n        crew_id: id,\n        user_id,\n        role: role_in_crew,\n        joined_at: new Date().toISOString()\n      })\n      .select(`\n        id,\n        crew_id,\n        user_id,\n        role,\n        joined_at,\n        user:users(id, first_name, last_name, email, role)\n      `)\n      .single();\n\n    if (error) {\n      console.error('‚ùå Supabase crew member add error:', error);\n      console.error('‚ùå Error code:', error.code);\n      console.error('‚ùå Error message:', error.message);\n      console.error('‚ùå Error details:', error.details);\n      if (error.code === '23503') {\n        return NextResponse.json(\n          { error: 'Invalid crew or user ID' },\n          { status: 400 }\n        );\n      }\n      return NextResponse.json(\n        { error: `Failed to add member to crew: ${error.message}` },\n        { status: 500 }\n      );\n    }\n\n    // Add compatibility mapping for the response\n    const memberWithCompatibility = {\n      ...newMember,\n      role_in_crew: newMember.role,\n      user_id: newMember.user_id,\n      first_name: newMember.user?.first_name,\n      last_name: newMember.user?.last_name,\n      full_name: `${newMember.user?.first_name || ''} ${newMember.user?.last_name || ''}`.trim(),\n      email: newMember.user?.email,\n    };\n\n    return NextResponse.json({\n      message: 'Member added to crew successfully',\n      member: memberWithCompatibility\n    });\n  } catch (error) {\n    console.error('Crew members POST API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to add member to crew' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const { searchParams } = new URL(request.url);\n    const user_id = searchParams.get('user_id');\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Crew ID is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!user_id) {\n      return NextResponse.json(\n        { error: 'User ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const { error } = await supabaseService\n      .from('crew_members')\n      .delete()\n      .eq('crew_id', id)\n      .eq('user_id', user_id);\n\n    if (error) {\n      console.error('Supabase crew member remove error:', error);\n      return NextResponse.json(\n        { error: 'Failed to remove member from crew' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: 'Member removed from crew successfully'\n    });\n  } catch (error) {\n    console.error('Crew members DELETE API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to remove member from crew' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}