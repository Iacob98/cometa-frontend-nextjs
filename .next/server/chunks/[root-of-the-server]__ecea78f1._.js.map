{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/project-preparation/utility-contacts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from '@supabase/supabase-js';\n\n// Service role client for bypassing RLS\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get(\"project_id\");\n\n    if (!project_id) {\n      return NextResponse.json(\n        { error: \"Project ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Get utility contacts from database\n    const { data: contacts, error } = await supabase\n      .from('utility_contacts')\n      .select(`\n        id,\n        kind,\n        organization,\n        contact_person,\n        phone,\n        email,\n        notes,\n        created_at\n      `)\n      .eq('project_id', project_id)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Supabase utility contacts query error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch utility contacts' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(contacts || []);\n  } catch (error) {\n    console.error(\"Utility contacts API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch utility contacts\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { project_id, kind, organization, phone, email, contact_person, notes } = body;\n\n    if (!project_id || !kind || !organization) {\n      return NextResponse.json(\n        { error: \"Project ID, kind, and organization are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Create utility contact in database\n    const { data: contact, error } = await supabase\n      .from('utility_contacts')\n      .insert({\n        project_id,\n        kind,\n        organization,\n        contact_person,\n        phone,\n        email,\n        notes\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Supabase utility contact creation error:', error);\n      return NextResponse.json(\n        { error: 'Failed to create utility contact' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      contact_id: contact.id,\n      message: \"Utility contact created successfully\",\n      utility_contact: contact\n    }, { status: 201 });\n  } catch (error) {\n    console.error(\"Utility contacts POST error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create utility contact\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,wCAAwC;AACxC,MAAM,WAAW,IAAA,yMAAY,gFAE3B,QAAQ,GAAG,CAAC,yBAAyB;AAGhC,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,aAAa,aAAa,GAAG,CAAC;QAEpC,IAAI,CAAC,YAAY;YACf,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,qCAAqC;QACrC,MAAM,EAAE,MAAM,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,SACrC,IAAI,CAAC,oBACL,MAAM,CAAC,CAAC;;;;;;;;;MAST,CAAC,EACA,EAAE,CAAC,cAAc,YACjB,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM;QAE1C,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,0CAA0C;YACxD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC,YAAY,EAAE;IACzC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAmC,GAC5C;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,GAAG;QAEhF,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,cAAc;YACzC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkD,GAC3D;gBAAE,QAAQ;YAAI;QAElB;QAEA,qCAAqC;QACrC,MAAM,EAAE,MAAM,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,SACpC,IAAI,CAAC,oBACL,MAAM,CAAC;YACN;YACA;YACA;YACA;YACA;YACA;YACA;QACF,GACC,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,4CAA4C;YAC1D,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,YAAY,QAAQ,EAAE;YACtB,SAAS;YACT,iBAAiB;QACnB,GAAG;YAAE,QAAQ;QAAI;IACnB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAmC,GAC5C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}