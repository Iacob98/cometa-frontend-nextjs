{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/financial/summary/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get('project_id');\n    const start_date = searchParams.get('start_date');\n    const end_date = searchParams.get('end_date');\n    const year = searchParams.get('year');\n    const month = searchParams.get('month');\n\n    // Build base queries for costs and transactions\n    let costsQuery = supabase\n      .from('costs')\n      .select(`\n        id,\n        project_id,\n        cost_type,\n        date,\n        amount_eur,\n        description,\n        reference_type,\n        reference_id,\n        created_at,\n        project:projects!costs_project_id_fkey(\n          id,\n          name,\n          city\n        )\n      `);\n\n    let transactionsQuery = supabase\n      .from('transactions')\n      .select(`\n        id,\n        project_id,\n        amount,\n        transaction_type,\n        description,\n        date,\n        reference_id,\n        created_at,\n        project:projects!transactions_project_id_fkey(\n          id,\n          name,\n          city\n        )\n      `);\n\n    // Apply filters\n    if (project_id) {\n      costsQuery = costsQuery.eq('project_id', project_id);\n      transactionsQuery = transactionsQuery.eq('project_id', project_id);\n    }\n\n    if (start_date && end_date) {\n      costsQuery = costsQuery.gte('date', start_date).lte('date', end_date);\n      transactionsQuery = transactionsQuery.gte('date', start_date).lte('date', end_date);\n    } else if (year) {\n      const yearStart = `${year}-01-01`;\n      const yearEnd = `${year}-12-31`;\n      costsQuery = costsQuery.gte('date', yearStart).lte('date', yearEnd);\n      transactionsQuery = transactionsQuery.gte('date', yearStart).lte('date', yearEnd);\n\n      if (month) {\n        const monthStr = month.padStart(2, '0');\n        const monthStart = `${year}-${monthStr}-01`;\n        const monthEnd = new Date(parseInt(year), parseInt(month), 0);\n        const monthEndStr = `${year}-${monthStr}-${monthEnd.getDate().toString().padStart(2, '0')}`;\n\n        costsQuery = costsQuery.gte('date', monthStart).lte('date', monthEndStr);\n        transactionsQuery = transactionsQuery.gte('date', monthStart).lte('date', monthEndStr);\n      }\n    }\n\n    // Execute queries\n    const [costsResult, transactionsResult] = await Promise.all([\n      costsQuery,\n      transactionsQuery\n    ]);\n\n    if (costsResult.error) {\n      console.error('Supabase costs query error:', costsResult.error);\n      return NextResponse.json(\n        { error: 'Failed to fetch costs data' },\n        { status: 500 }\n      );\n    }\n\n    if (transactionsResult.error) {\n      console.error('Supabase transactions query error:', transactionsResult.error);\n      return NextResponse.json(\n        { error: 'Failed to fetch transactions data' },\n        { status: 500 }\n      );\n    }\n\n    const costs = costsResult.data || [];\n    const transactions = transactionsResult.data || [];\n\n    // Calculate costs summary by type\n    const costsByType = costs.reduce((acc: any, cost: any) => {\n      const type = cost.cost_type || 'other';\n      if (!acc[type]) {\n        acc[type] = {\n          type,\n          total: 0,\n          count: 0,\n          items: []\n        };\n      }\n      acc[type].total += Number(cost.amount_eur) || 0;\n      acc[type].count += 1;\n      acc[type].items.push(cost);\n      return acc;\n    }, {});\n\n    // Calculate transactions summary by type\n    const transactionsByType = transactions.reduce((acc: any, transaction: any) => {\n      const type = transaction.transaction_type || 'expense';\n      if (!acc[type]) {\n        acc[type] = {\n          type,\n          total: 0,\n          count: 0,\n          items: []\n        };\n      }\n      acc[type].total += Number(transaction.amount) || 0;\n      acc[type].count += 1;\n      acc[type].items.push(transaction);\n      return acc;\n    }, {});\n\n    // Calculate totals\n    const totalCosts = costs.reduce((sum: number, cost: any) => sum + (Number(cost.amount_eur) || 0), 0);\n    const totalIncome = transactionsByType.income?.total || 0;\n    const totalExpenses = transactionsByType.expense?.total || 0;\n    const totalTransactions = totalIncome + totalExpenses;\n\n    // Calculate monthly breakdown if year is specified\n    let monthlyBreakdown = null;\n    if (year) {\n      const monthlyData = Array.from({ length: 12 }, (_, i) => {\n        const month = i + 1;\n        const monthStr = month.toString().padStart(2, '0');\n\n        const monthlyCosts = costs.filter((cost: any) => {\n          const costDate = new Date(cost.date);\n          return costDate.getMonth() + 1 === month;\n        }).reduce((sum: number, cost: any) => sum + (Number(cost.amount_eur) || 0), 0);\n\n        const monthlyIncome = transactions.filter((t: any) => {\n          const tDate = new Date(t.date);\n          return tDate.getMonth() + 1 === month && t.transaction_type === 'income';\n        }).reduce((sum: number, t: any) => sum + (Number(t.amount) || 0), 0);\n\n        const monthlyExpenses = transactions.filter((t: any) => {\n          const tDate = new Date(t.date);\n          return tDate.getMonth() + 1 === month && t.transaction_type === 'expense';\n        }).reduce((sum: number, t: any) => sum + (Number(t.amount) || 0), 0);\n\n        return {\n          month,\n          monthName: new Date(parseInt(year), i, 1).toLocaleString('en', { month: 'long' }),\n          costs: monthlyCosts,\n          income: monthlyIncome,\n          expenses: monthlyExpenses,\n          net: monthlyIncome - monthlyExpenses - monthlyCosts\n        };\n      });\n\n      monthlyBreakdown = monthlyData;\n    }\n\n    // Get project summaries if no specific project is filtered\n    let projectSummaries = null;\n    if (!project_id) {\n      const projectCosts = costs.reduce((acc: any, cost: any) => {\n        const pId = cost.project_id;\n        if (!acc[pId]) {\n          acc[pId] = {\n            project_id: pId,\n            project_name: cost.project?.name || 'Unknown Project',\n            project_city: cost.project?.city || '',\n            total_costs: 0,\n            costs_count: 0\n          };\n        }\n        acc[pId].total_costs += Number(cost.amount_eur) || 0;\n        acc[pId].costs_count += 1;\n        return acc;\n      }, {});\n\n      const projectTransactions = transactions.reduce((acc: any, transaction: any) => {\n        const pId = transaction.project_id;\n        if (!acc[pId]) {\n          acc[pId] = {\n            project_id: pId,\n            project_name: transaction.project?.name || 'Unknown Project',\n            project_city: transaction.project?.city || '',\n            total_income: 0,\n            total_expenses: 0,\n            transactions_count: 0\n          };\n        }\n        if (transaction.transaction_type === 'income') {\n          acc[pId].total_income += Number(transaction.amount) || 0;\n        } else {\n          acc[pId].total_expenses += Number(transaction.amount) || 0;\n        }\n        acc[pId].transactions_count += 1;\n        return acc;\n      }, {});\n\n      // Merge project data\n      const allProjectIds = new Set([\n        ...Object.keys(projectCosts),\n        ...Object.keys(projectTransactions)\n      ]);\n\n      projectSummaries = Array.from(allProjectIds).map(pId => {\n        const costData = projectCosts[pId] || {};\n        const transactionData = projectTransactions[pId] || {};\n\n        return {\n          project_id: pId,\n          project_name: costData.project_name || transactionData.project_name || 'Unknown Project',\n          project_city: costData.project_city || transactionData.project_city || '',\n          total_costs: costData.total_costs || 0,\n          total_income: transactionData.total_income || 0,\n          total_expenses: transactionData.total_expenses || 0,\n          net_profit: (transactionData.total_income || 0) - (transactionData.total_expenses || 0) - (costData.total_costs || 0),\n          costs_count: costData.costs_count || 0,\n          transactions_count: transactionData.transactions_count || 0\n        };\n      });\n    }\n\n    // Recent activity (last 10 items)\n    const recentActivity = [\n      ...costs.map((cost: any) => ({\n        id: cost.id,\n        type: 'cost',\n        subtype: cost.cost_type,\n        amount: Number(cost.amount_eur) || 0,\n        description: cost.description || `${cost.cost_type} cost`,\n        date: cost.date,\n        project: cost.project?.name || 'Unknown Project',\n        created_at: cost.created_at\n      })),\n      ...transactions.map((transaction: any) => ({\n        id: transaction.id,\n        type: 'transaction',\n        subtype: transaction.transaction_type,\n        amount: Number(transaction.amount) || 0,\n        description: transaction.description || `${transaction.transaction_type} transaction`,\n        date: transaction.date,\n        project: transaction.project?.name || 'Unknown Project',\n        created_at: transaction.created_at\n      }))\n    ]\n    .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n    .slice(0, 10);\n\n    return NextResponse.json({\n      summary: {\n        total_costs: totalCosts,\n        total_income: totalIncome,\n        total_expenses: totalExpenses,\n        total_transactions: totalTransactions,\n        net_profit: totalIncome - totalExpenses - totalCosts,\n        costs_count: costs.length,\n        transactions_count: transactions.length\n      },\n      costs_by_type: Object.values(costsByType).map((item: any) => ({\n        type: item.type,\n        total: item.total,\n        count: item.count,\n        percentage: totalCosts > 0 ? ((item.total / totalCosts) * 100).toFixed(2) : 0\n      })),\n      transactions_by_type: Object.values(transactionsByType).map((item: any) => ({\n        type: item.type,\n        total: item.total,\n        count: item.count,\n        percentage: totalTransactions > 0 ? ((item.total / totalTransactions) * 100).toFixed(2) : 0\n      })),\n      monthly_breakdown: monthlyBreakdown,\n      project_summaries: projectSummaries,\n      recent_activity: recentActivity,\n      filters: {\n        project_id,\n        start_date,\n        end_date,\n        year,\n        month\n      }\n    });\n  } catch (error) {\n    console.error('Financial summary API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}