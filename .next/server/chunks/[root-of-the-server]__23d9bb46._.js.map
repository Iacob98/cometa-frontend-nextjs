{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/zone-layout/cabinets/%5Bid%5D/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: cabinetId } = await params;\n\n    if (!cabinetId) {\n      return NextResponse.json(\n        { error: \"Cabinet ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if cabinet exists\n    const { data: cabinet, error: cabinetError } = await supabase\n      .from('cabinets')\n      .select('id, project_id, code, name')\n      .eq('id', cabinetId)\n      .single();\n\n    if (cabinetError || !cabinet) {\n      return NextResponse.json(\n        { error: 'Cabinet not found' },\n        { status: 404 }\n      );\n    }\n\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    const installationType = formData.get('installation_type') as string || 'connection_plan';\n\n    if (!file) {\n      return NextResponse.json(\n        { error: 'No file provided' },\n        { status: 400 }\n      );\n    }\n\n    // Validate file type\n    const allowedTypes = [\n      'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'application/dwg', 'application/dxf',\n      'image/bmp', 'image/tiff'\n    ];\n\n    if (!allowedTypes.includes(file.type)) {\n      return NextResponse.json(\n        {\n          error: 'Invalid file type. Allowed types: images, PDF, Word, Excel, DWG, DXF',\n          allowedTypes\n        },\n        { status: 400 }\n      );\n    }\n\n    // Validate file size (max 50MB)\n    const maxSize = 50 * 1024 * 1024; // 50MB\n    if (file.size > maxSize) {\n      return NextResponse.json(\n        { error: 'File size too large. Maximum size is 50MB' },\n        { status: 400 }\n      );\n    }\n\n    console.log('Uploading cabinet file to Supabase Storage:', {\n      fileName: file.name,\n      fileSize: file.size,\n      fileType: file.type,\n      cabinetId,\n      installationType\n    });\n\n    // Generate unique filename\n    const timestamp = Date.now();\n    const randomSuffix = Math.random().toString(36).substring(2, 15);\n    const fileExtension = file.name.split('.').pop();\n    const sanitizedName = file.name\n      .replace(/[^a-zA-Z0-9.-]/g, '-')\n      .toLowerCase();\n    const uniqueFileName = `${sanitizedName.replace(`.${fileExtension}`, '')}_${timestamp}_${randomSuffix}.${fileExtension}`;\n\n    // Upload to Supabase Storage\n    const filePath = `projects/${cabinet.project_id}/cabinets/${cabinetId}/${installationType}/${uniqueFileName}`;\n    const { data: uploadData, error: uploadError } = await supabase.storage\n      .from('project-documents')\n      .upload(filePath, file, {\n        cacheControl: '3600',\n        upsert: false\n      });\n\n    if (uploadError) {\n      console.error('Supabase storage upload error:', uploadError);\n      return NextResponse.json(\n        { error: 'Failed to upload file to storage' },\n        { status: 500 }\n      );\n    }\n\n    // Get public URL\n    const { data: { publicUrl } } = supabase.storage\n      .from('project-documents')\n      .getPublicUrl(filePath);\n\n    console.log('File uploaded successfully:', {\n      success: true,\n      url: publicUrl,\n      path: filePath\n    });\n\n    // For now, we'll store file info in cabinet notes or use simple storage\n    // Future enhancement: create cabinet_installation_files table\n    console.log('File uploaded successfully, metadata not stored in database yet');\n\n    const response = {\n      success: true,\n      message: `Installation file uploaded successfully for cabinet ${cabinet.code}`,\n      file: {\n        cabinet_id: cabinetId,\n        installation_type: installationType,\n        file_name: file.name,\n        file_url: publicUrl,\n        file_size: file.size,\n        file_type: file.type,\n        uploaded_at: new Date().toISOString()\n      }\n    };\n\n    return NextResponse.json(response, { status: 201 });\n  } catch (error) {\n    console.error(\"Cabinet file upload error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to upload file\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: cabinetId } = await params;\n    const { searchParams } = new URL(request.url);\n    const installationType = searchParams.get('installation_type') || 'connection_plan';\n\n    if (!cabinetId) {\n      return NextResponse.json(\n        { error: \"Cabinet ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if cabinet exists\n    const { data: cabinet, error: cabinetError } = await supabase\n      .from('cabinets')\n      .select('id, project_id, code, name')\n      .eq('id', cabinetId)\n      .single();\n\n    if (cabinetError || !cabinet) {\n      return NextResponse.json(\n        { error: 'Cabinet not found' },\n        { status: 404 }\n      );\n    }\n\n    // List files from storage\n    const folderPath = `projects/${cabinet.project_id}/cabinets/${cabinetId}/${installationType}/`;\n    const { data: files, error: listError } = await supabase.storage\n      .from('project-documents')\n      .list(folderPath);\n\n    if (listError) {\n      console.error('Storage list error:', listError);\n      return NextResponse.json(\n        { error: 'Failed to list files' },\n        { status: 500 }\n      );\n    }\n\n    // Transform file list to include URLs\n    const fileList = (files || []).map(file => {\n      const filePath = `${folderPath}${file.name}`;\n      const { data: { publicUrl } } = supabase.storage\n        .from('project-documents')\n        .getPublicUrl(filePath);\n\n      return {\n        cabinet_id: cabinetId,\n        installation_type: installationType,\n        file_name: file.name,\n        file_url: publicUrl,\n        file_size: file.metadata?.size || 0,\n        file_type: file.metadata?.mimetype || 'application/octet-stream',\n        uploaded_at: file.created_at\n      };\n    });\n\n    return NextResponse.json(fileList);\n  } catch (error) {\n    console.error(\"Cabinet files fetch error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch files\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}