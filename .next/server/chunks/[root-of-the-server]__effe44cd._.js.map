{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/project-preparation/housing/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from '@supabase/supabase-js';\nimport { z } from 'zod';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nconst CreateHousingUnitSchema = z.object({\n  project_id: z.string().uuid(),\n  address: z.string().min(1, \"Address is required\"),\n  rooms_total: z.number().int().positive(\"Number of rooms must be positive\"),\n  beds_total: z.number().int().positive(\"Number of beds must be positive\"),\n  rent_daily_eur: z.number().positive(\"Daily rent must be positive\"),\n  status: z.enum(['available', 'occupied', 'maintenance']).default('available'),\n  advance_payment: z.number().optional(),\n  check_in_date: z.string().optional(),\n  check_out_date: z.string().optional(),\n});\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get(\"project_id\");\n\n    if (!project_id) {\n      return NextResponse.json(\n        { error: \"Project ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Fetch housing units from database - mapping from existing schema\n    const { data: housingUnits, error } = await supabase\n      .from('housing_units')\n      .select(`\n        id,\n        project_id,\n        house_id,\n        unit_number,\n        unit_type,\n        floor,\n        room_count,\n        area_sqm,\n        contact_person,\n        contact_phone,\n        access_instructions,\n        installation_notes,\n        status,\n        created_at,\n        updated_at,\n        houses(id, street, city, house_number, postal_code)\n      `)\n      .eq('project_id', project_id)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Database error fetching housing units:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch housing units from database' },\n        { status: 500 }\n      );\n    }\n\n    // Transform data to match our expected format\n    const transformedUnits = (housingUnits || []).map(unit => {\n      let additionalData = {};\n      try {\n        additionalData = JSON.parse(unit.installation_notes || '{}');\n      } catch (e) {\n        // ignore parsing errors\n      }\n\n      const houseInfo = Array.isArray(unit.houses) ? unit.houses[0] : unit.houses;\n      const addressParts = [\n        houseInfo?.street,\n        houseInfo?.house_number,\n        houseInfo?.city,\n        houseInfo?.postal_code\n      ].filter(Boolean);\n\n      return {\n        id: unit.id,\n        project_id: unit.project_id,\n        address: additionalData.address || (addressParts.length > 0 ? addressParts.join(', ') : unit.unit_number || 'N/A'),\n        rooms_total: unit.room_count || 0,\n        beds_total: additionalData.beds_total || (unit.area_sqm ? Math.floor(unit.area_sqm / 10) : 0),\n        rent_daily_eur: additionalData.rent_daily_eur || 0,\n        status: unit.status === 'completed' ? 'available' :\n                unit.status === 'in_progress' ? 'occupied' : 'available',\n        advance_payment: additionalData.advance_payment,\n        check_in_date: additionalData.check_in_date,\n        check_out_date: additionalData.check_out_date,\n        created_at: unit.created_at,\n        updated_at: unit.updated_at\n      };\n    });\n\n    return NextResponse.json(transformedUnits);\n  } catch (error) {\n    console.error(\"Project preparation housing API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch housing units\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate request body\n    const validationResult = CreateHousingUnitSchema.safeParse(body);\n    if (!validationResult.success) {\n      return NextResponse.json(\n        {\n          error: \"Validation failed\",\n          details: validationResult.error.issues\n        },\n        { status: 400 }\n      );\n    }\n\n    const validatedData = validationResult.data;\n\n    // Verify project exists\n    const { data: project, error: projectError } = await supabase\n      .from('projects')\n      .select('id, name')\n      .eq('id', validatedData.project_id)\n      .single();\n\n    if (projectError || !project) {\n      return NextResponse.json(\n        { error: 'Project not found' },\n        { status: 404 }\n      );\n    }\n\n    // Map simplified data to existing schema\n    const insertData = {\n      project_id: validatedData.project_id,\n      unit_number: `Unit-${Date.now()}`, // Generate a unique unit number\n      unit_type: 'apartment', // default type\n      room_count: validatedData.rooms_total,\n      area_sqm: validatedData.beds_total * 10, // rough estimate: beds * 10 sqm\n      status: validatedData.status === 'available' ? 'pending' :\n              validatedData.status === 'occupied' ? 'in_progress' : 'pending',\n      // Store additional fields as notes for now\n      installation_notes: JSON.stringify({\n        address: validatedData.address,\n        rent_daily_eur: validatedData.rent_daily_eur,\n        beds_total: validatedData.beds_total,\n        advance_payment: validatedData.advance_payment,\n        check_in_date: validatedData.check_in_date,\n        check_out_date: validatedData.check_out_date\n      })\n    };\n\n    // Create housing unit in database\n    const { data: housingUnit, error } = await supabase\n      .from('housing_units')\n      .insert([insertData])\n      .select(`\n        id,\n        project_id,\n        unit_number,\n        room_count,\n        area_sqm,\n        status,\n        installation_notes\n      `)\n      .single();\n\n    if (error) {\n      console.error('Database error creating housing unit:', error);\n      return NextResponse.json(\n        { error: 'Failed to create housing unit in database' },\n        { status: 500 }\n      );\n    }\n\n    // Transform response to match expected format\n    let additionalData = {};\n    try {\n      additionalData = JSON.parse(housingUnit.installation_notes || '{}');\n    } catch (e) {\n      // ignore parsing errors\n    }\n\n    const transformedUnit = {\n      id: housingUnit.id,\n      project_id: housingUnit.project_id,\n      address: additionalData.address || housingUnit.unit_number || 'N/A',\n      rooms_total: housingUnit.room_count || 0,\n      beds_total: additionalData.beds_total || Math.floor((housingUnit.area_sqm || 0) / 10),\n      rent_daily_eur: additionalData.rent_daily_eur || 0,\n      status: housingUnit.status === 'pending' ? 'available' :\n              housingUnit.status === 'in_progress' ? 'occupied' : 'available',\n      advance_payment: additionalData.advance_payment,\n      check_in_date: additionalData.check_in_date,\n      check_out_date: additionalData.check_out_date\n    };\n\n    const response = {\n      success: true,\n      message: \"Housing unit created successfully\",\n      housing_unit_id: housingUnit.id,\n      housing_unit: transformedUnit\n    };\n\n    return NextResponse.json(response, { status: 201 });\n  } catch (error) {\n    console.error(\"Project preparation housing POST error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create housing unit\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}