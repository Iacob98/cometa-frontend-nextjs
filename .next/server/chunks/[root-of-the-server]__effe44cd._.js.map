{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/project-preparation/housing/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from '@supabase/supabase-js';\nimport { z } from 'zod';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nconst CreateHousingUnitSchema = z.object({\n  project_id: z.string().uuid(),\n  address: z.string().min(1, \"Address is required\"),\n  rooms_total: z.number().int().positive(\"Number of rooms must be positive\"),\n  beds_total: z.number().int().positive(\"Number of beds must be positive\"),\n  occupied_beds: z.number().int().min(0, \"Occupied beds cannot be negative\").optional().default(0),\n  rent_daily_eur: z.number().positive(\"Daily rent must be positive\"),\n  status: z.enum(['available', 'occupied', 'checked_out', 'maintenance']).default('available'),\n  advance_payment: z.number().optional(),\n  check_in_date: z.string().optional(),\n  check_out_date: z.string().optional(),\n  owner_first_name: z.string().optional(),\n  owner_last_name: z.string().optional(),\n  owner_phone: z.string().optional(),\n}).refine((data) => data.occupied_beds <= data.beds_total, {\n  message: \"Occupied beds cannot exceed total beds\",\n  path: [\"occupied_beds\"],\n});\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get(\"project_id\");\n\n    if (!project_id) {\n      return NextResponse.json(\n        { error: \"Project ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Fetch housing units from database - using new rental housing columns\n    const { data: housingUnits, error } = await supabase\n      .from('housing_units')\n      .select(`\n        id,\n        project_id,\n        address,\n        rooms_total,\n        beds_total,\n        occupied_beds,\n        rent_daily_eur,\n        advance_payment,\n        check_in_date,\n        check_out_date,\n        status,\n        owner_first_name,\n        owner_last_name,\n        owner_phone,\n        created_at,\n        updated_at\n      `)\n      .eq('project_id', project_id)\n      .not('address', 'is', null)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Database error fetching housing units:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch housing units from database' },\n        { status: 500 }\n      );\n    }\n\n    // Return housing units directly - no transformation needed with new columns\n    return NextResponse.json(housingUnits || []);\n  } catch (error) {\n    console.error(\"Project preparation housing API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch housing units\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate request body\n    const validationResult = CreateHousingUnitSchema.safeParse(body);\n    if (!validationResult.success) {\n      return NextResponse.json(\n        {\n          error: \"Validation failed\",\n          details: validationResult.error.issues\n        },\n        { status: 400 }\n      );\n    }\n\n    const validatedData = validationResult.data;\n\n    // Verify project exists\n    const { data: project, error: projectError } = await supabase\n      .from('projects')\n      .select('id, name')\n      .eq('id', validatedData.project_id)\n      .single();\n\n    if (projectError || !project) {\n      return NextResponse.json(\n        { error: 'Project not found' },\n        { status: 404 }\n      );\n    }\n\n    // Use new rental housing columns directly\n    const insertData = {\n      project_id: validatedData.project_id,\n      address: validatedData.address,\n      rooms_total: validatedData.rooms_total,\n      beds_total: validatedData.beds_total,\n      occupied_beds: validatedData.occupied_beds || 0,\n      rent_daily_eur: validatedData.rent_daily_eur,\n      status: validatedData.status,\n      advance_payment: validatedData.advance_payment,\n      check_in_date: validatedData.check_in_date,\n      check_out_date: validatedData.check_out_date,\n      owner_first_name: validatedData.owner_first_name,\n      owner_last_name: validatedData.owner_last_name,\n      owner_phone: validatedData.owner_phone,\n    };\n\n    // Create housing unit in database\n    const { data: housingUnit, error } = await supabase\n      .from('housing_units')\n      .insert([insertData])\n      .select(`\n        id,\n        project_id,\n        address,\n        rooms_total,\n        beds_total,\n        occupied_beds,\n        rent_daily_eur,\n        advance_payment,\n        check_in_date,\n        check_out_date,\n        status,\n        owner_first_name,\n        owner_last_name,\n        owner_phone,\n        created_at,\n        updated_at\n      `)\n      .single();\n\n    if (error) {\n      console.error('Database error creating housing unit:', error);\n      return NextResponse.json(\n        { error: 'Failed to create housing unit in database' },\n        { status: 500 }\n      );\n    }\n\n    // Return housing unit directly - no transformation needed with new columns\n    const response = {\n      success: true,\n      message: \"Housing unit created successfully\",\n      housing_unit_id: housingUnit.id,\n      housing_unit: housingUnit\n    };\n\n    return NextResponse.json(response, { status: 201 });\n  } catch (error) {\n    console.error(\"Project preparation housing POST error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create housing unit\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}