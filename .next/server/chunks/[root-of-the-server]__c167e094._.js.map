{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/equipment/analytics/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get('project_id');\n    const start_date = searchParams.get('start_date');\n    const end_date = searchParams.get('end_date');\n    const period = searchParams.get('period') || 'month'; // month, quarter, year\n\n    // Get all equipment\n    const { data: equipment, error: equipmentError } = await supabase\n      .from('equipment')\n      .select(`\n        id,\n        name,\n        type,\n        inventory_no,\n        status,\n        rental_cost_per_day,\n        purchase_date,\n        warranty_until,\n        description,\n        is_active,\n        created_at\n      `)\n      .eq('is_active', true);\n\n    if (equipmentError) {\n      console.error('Supabase equipment query error:', equipmentError);\n      return NextResponse.json(\n        { error: 'Failed to fetch equipment data' },\n        { status: 500 }\n      );\n    }\n\n    // Get equipment assignments with filters\n    let assignmentsQuery = supabase\n      .from('equipment_assignments')\n      .select(`\n        id,\n        equipment_id,\n        project_id,\n        crew_id,\n        user_id,\n        from_ts,\n        to_ts,\n        is_permanent,\n        rental_cost_per_day,\n        notes,\n        created_at,\n        equipment:equipment(\n          id,\n          name,\n          type,\n          inventory_no,\n          rental_cost_per_day\n        ),\n        project:projects(\n          id,\n          name,\n          city\n        ),\n        crew:crews(\n          id,\n          name\n        ),\n        user:users(\n          id,\n          first_name,\n          last_name,\n          email\n        )\n      `);\n\n    // Apply filters\n    if (project_id) {\n      assignmentsQuery = assignmentsQuery.eq('project_id', project_id);\n    }\n\n    if (start_date && end_date) {\n      assignmentsQuery = assignmentsQuery\n        .gte('from_ts', start_date)\n        .lte('from_ts', end_date);\n    } else if (start_date) {\n      assignmentsQuery = assignmentsQuery.gte('from_ts', start_date);\n    } else if (end_date) {\n      assignmentsQuery = assignmentsQuery.lte('from_ts', end_date);\n    }\n\n    const { data: assignments, error: assignmentsError } = await assignmentsQuery;\n\n    if (assignmentsError) {\n      console.error('Supabase assignments query error:', assignmentsError);\n      return NextResponse.json(\n        { error: 'Failed to fetch assignments data' },\n        { status: 500 }\n      );\n    }\n\n    // Get equipment maintenance records\n    const { data: maintenance, error: maintenanceError } = await supabase\n      .from('equipment_maintenance')\n      .select(`\n        id,\n        equipment_id,\n        maintenance_type,\n        description,\n        cost,\n        date,\n        next_maintenance_date,\n        performed_by,\n        created_at,\n        equipment:equipment(\n          id,\n          name,\n          type,\n          inventory_no\n        )\n      `);\n\n    if (maintenanceError) {\n      console.error('Supabase maintenance query error:', maintenanceError);\n      // Continue without maintenance data\n    }\n\n    // Calculate analytics\n    const totalEquipment = equipment?.length || 0;\n    const totalAssignments = assignments?.length || 0;\n    const totalMaintenance = maintenance?.length || 0;\n\n    // Equipment status distribution\n    const statusDistribution = (equipment || []).reduce((acc: any, item: any) => {\n      const status = item.status || 'available';\n      acc[status] = (acc[status] || 0) + 1;\n      return acc;\n    }, {});\n\n    // Equipment type distribution\n    const typeDistribution = (equipment || []).reduce((acc: any, item: any) => {\n      const type = item.type || 'other';\n      acc[type] = (acc[type] || 0) + 1;\n      return acc;\n    }, {});\n\n    // Utilization rates (equipment that are currently assigned)\n    const currentDate = new Date();\n    const activeAssignments = (assignments || []).filter((assignment: any) => {\n      const fromDate = new Date(assignment.from_ts);\n      const toDate = assignment.to_ts ? new Date(assignment.to_ts) : null;\n\n      return fromDate <= currentDate && (!toDate || toDate > currentDate);\n    });\n\n    const utilizedEquipmentIds = new Set(activeAssignments.map((a: any) => a.equipment_id));\n    const utilizationRate = totalEquipment > 0 ?\n      ((utilizedEquipmentIds.size / totalEquipment) * 100).toFixed(2) : 0;\n\n    // Rental cost analytics\n    const totalRentalValue = (equipment || []).reduce((sum: number, item: any) =>\n      sum + (Number(item.rental_cost_per_day) || 0), 0\n    );\n\n    const averageRentalCost = totalEquipment > 0 ?\n      totalRentalValue / totalEquipment : 0;\n\n    // Assignment duration analytics\n    const assignmentDurations = (assignments || []).map((assignment: any) => {\n      const fromDate = new Date(assignment.from_ts);\n      const toDate = assignment.to_ts ? new Date(assignment.to_ts) : new Date();\n      const durationDays = Math.ceil((toDate.getTime() - fromDate.getTime()) / (1000 * 60 * 60 * 24));\n      return {\n        ...assignment,\n        duration_days: durationDays,\n        daily_cost: Number(assignment.rental_cost_per_day) || Number(assignment.equipment?.rental_cost_per_day) || 0,\n        total_cost: durationDays * (Number(assignment.rental_cost_per_day) || Number(assignment.equipment?.rental_cost_per_day) || 0)\n      };\n    });\n\n    const totalRentalCosts = assignmentDurations.reduce((sum: number, assignment: any) =>\n      sum + assignment.total_cost, 0\n    );\n\n    const averageAssignmentDuration = assignmentDurations.length > 0 ?\n      assignmentDurations.reduce((sum: number, assignment: any) => sum + assignment.duration_days, 0) /\n      assignmentDurations.length : 0;\n\n    // Project distribution\n    const projectDistribution: { [key: string]: any } = {};\n    (assignments || []).forEach((assignment: any) => {\n      const projectId = assignment.project_id;\n      if (!projectDistribution[projectId]) {\n        projectDistribution[projectId] = {\n          project_id: projectId,\n          project_name: assignment.project?.name || 'Unknown Project',\n          project_city: assignment.project?.city || '',\n          equipment_count: new Set(),\n          assignment_count: 0,\n          total_rental_cost: 0\n        };\n      }\n\n      projectDistribution[projectId].equipment_count.add(assignment.equipment_id);\n      projectDistribution[projectId].assignment_count += 1;\n      projectDistribution[projectId].total_rental_cost += assignmentDurations.find(a => a.id === assignment.id)?.total_cost || 0;\n    });\n\n    // Convert Set to count for project distribution\n    const formattedProjectDistribution = Object.values(projectDistribution).map((project: any) => ({\n      ...project,\n      equipment_count: project.equipment_count.size\n    }));\n\n    // Most used equipment\n    const equipmentUsage: { [key: string]: any } = {};\n    (assignments || []).forEach((assignment: any) => {\n      const equipmentId = assignment.equipment_id;\n      if (!equipmentUsage[equipmentId]) {\n        equipmentUsage[equipmentId] = {\n          equipment_id: equipmentId,\n          equipment_name: assignment.equipment?.name || 'Unknown Equipment',\n          equipment_type: assignment.equipment?.type || '',\n          inventory_no: assignment.equipment?.inventory_no || '',\n          assignment_count: 0,\n          total_days: 0,\n          total_cost: 0\n        };\n      }\n\n      const assignmentData = assignmentDurations.find(a => a.id === assignment.id);\n      if (assignmentData) {\n        equipmentUsage[equipmentId].assignment_count += 1;\n        equipmentUsage[equipmentId].total_days += assignmentData.duration_days;\n        equipmentUsage[equipmentId].total_cost += assignmentData.total_cost;\n      }\n    });\n\n    const topUsedEquipment = Object.values(equipmentUsage)\n      .sort((a: any, b: any) => b.assignment_count - a.assignment_count)\n      .slice(0, 10);\n\n    // Monthly trend (for the current year)\n    const currentYear = new Date().getFullYear();\n    const monthlyTrends = Array.from({ length: 12 }, (_, i) => {\n      const month = i + 1;\n      const monthAssignments = (assignments || []).filter((assignment: any) => {\n        const assignmentDate = new Date(assignment.from_ts);\n        return assignmentDate.getFullYear() === currentYear &&\n               assignmentDate.getMonth() + 1 === month;\n      });\n\n      const monthMaintenance = (maintenance || []).filter((m: any) => {\n        const maintenanceDate = new Date(m.date);\n        return maintenanceDate.getFullYear() === currentYear &&\n               maintenanceDate.getMonth() + 1 === month;\n      });\n\n      const monthRentalCosts = monthAssignments.reduce((sum: number, assignment: any) => {\n        const assignmentData = assignmentDurations.find(a => a.id === assignment.id);\n        return sum + (assignmentData?.total_cost || 0);\n      }, 0);\n\n      const monthMaintenanceCosts = monthMaintenance.reduce((sum: number, m: any) =>\n        sum + (Number(m.cost) || 0), 0\n      );\n\n      return {\n        month,\n        monthName: new Date(currentYear, i, 1).toLocaleString('en', { month: 'long' }),\n        assignments: monthAssignments.length,\n        maintenance_records: monthMaintenance.length,\n        rental_costs: monthRentalCosts,\n        maintenance_costs: monthMaintenanceCosts,\n        total_costs: monthRentalCosts + monthMaintenanceCosts\n      };\n    });\n\n    // Maintenance analytics\n    const maintenanceStats = {\n      total_maintenance: totalMaintenance,\n      completed: 0, // No status column available\n      scheduled: totalMaintenance, // All maintenance records are considered scheduled\n      overdue: (maintenance || []).filter((m: any) => {\n        const maintenanceDate = new Date(m.date);\n        return maintenanceDate < currentDate;\n      }).length,\n      total_maintenance_cost: (maintenance || []).reduce((sum: number, m: any) =>\n        sum + (Number(m.cost) || 0), 0\n      )\n    };\n\n    return NextResponse.json({\n      summary: {\n        total_equipment: totalEquipment,\n        total_assignments: totalAssignments,\n        active_assignments: activeAssignments.length,\n        utilization_rate: Number(utilizationRate),\n        total_rental_value: totalRentalValue,\n        average_rental_cost: Math.round(averageRentalCost * 100) / 100,\n        total_rental_costs: Math.round(totalRentalCosts * 100) / 100,\n        average_assignment_duration: Math.round(averageAssignmentDuration * 10) / 10\n      },\n      distributions: {\n        status: Object.entries(statusDistribution).map(([status, count]) => ({\n          status,\n          count,\n          percentage: totalEquipment > 0 ? ((count as number / totalEquipment) * 100).toFixed(2) : 0\n        })),\n        type: Object.entries(typeDistribution).map(([type, count]) => ({\n          type,\n          count,\n          percentage: totalEquipment > 0 ? ((count as number / totalEquipment) * 100).toFixed(2) : 0\n        }))\n      },\n      project_distribution: formattedProjectDistribution,\n      top_used_equipment: topUsedEquipment,\n      monthly_trends: monthlyTrends,\n      maintenance: maintenanceStats,\n      filters: {\n        project_id,\n        start_date,\n        end_date,\n        period\n      }\n    });\n  } catch (error) {\n    console.error('Equipment analytics API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}