{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/users/%5Bid%5D/documents/%5BdocumentId%5D/view/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string; documentId: string }> }\n) {\n  try {\n    const { id, documentId } = await params;\n\n    if (!id || !documentId) {\n      return NextResponse.json(\n        { error: 'User ID and Document ID are required' },\n        { status: 400 }\n      );\n    }\n\n    // For now, return a mock PDF response for viewing (not downloading)\n    // In a real implementation, this would:\n    // 1. Verify user has access to this document\n    // 2. Fetch file from Supabase storage\n    // 3. Return the file with inline content disposition for viewing\n\n    // Create a simple PDF content as placeholder\n    const pdfContent = `%PDF-1.4\n1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n>>\nendobj\n\n2 0 obj\n<<\n/Type /Pages\n/Kids [3 0 R]\n/Count 1\n>>\nendobj\n\n3 0 obj\n<<\n/Type /Page\n/Parent 2 0 R\n/MediaBox [0 0 612 792]\n/Contents 4 0 R\n/Resources <<\n/ProcSet [/PDF /Text]\n/Font <<\n/F1 5 0 R\n>>\n>>\n>>\nendobj\n\n4 0 obj\n<<\n/Length 110\n>>\nstream\nBT\n/F1 16 Tf\n100 700 Td\n(Документ работника) Tj\n0 -30 Td\n/F1 12 Tf\n(ID документа: ${documentId}) Tj\n0 -20 Td\n(ID работника: ${id}) Tj\n0 -20 Td\n(Режим просмотра) Tj\nET\nendstream\nendobj\n\n5 0 obj\n<<\n/Type /Font\n/Subtype /Type1\n/BaseFont /Helvetica\n>>\nendobj\n\nxref\n0 6\n0000000000 65535 f\n0000000010 00000 n\n0000000053 00000 n\n0000000110 00000 n\n0000000297 00000 n\n0000000455 00000 n\ntrailer\n<<\n/Size 6\n/Root 1 0 R\n>>\nstartxref\n522\n%%EOF`;\n\n    // Return the mock PDF with inline content disposition for viewing\n    return new Response(pdfContent, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/pdf',\n        'Content-Disposition': `inline; filename=\"document-${documentId}-view.pdf\"`,\n        'Content-Length': pdfContent.length.toString(),\n      },\n    });\n  } catch (error) {\n    console.error('Document view API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to view document' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAA2D;IAEnE,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,MAAM;QAEjC,IAAI,CAAC,MAAM,CAAC,YAAY;YACtB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,oEAAoE;QACpE,wCAAwC;QACxC,6CAA6C;QAC7C,sCAAsC;QACtC,iEAAiE;QAEjE,6CAA6C;QAC7C,MAAM,aAAa,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA0CT,EAAE,WAAW;;eAEb,EAAE,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8Bf,CAAC;QAEF,kEAAkE;QAClE,OAAO,IAAI,SAAS,YAAY;YAC9B,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,uBAAuB,CAAC,2BAA2B,EAAE,WAAW,UAAU,CAAC;gBAC3E,kBAAkB,WAAW,MAAM,CAAC,QAAQ;YAC9C;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}