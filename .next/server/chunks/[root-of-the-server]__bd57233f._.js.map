{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/materials/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const per_page = parseInt(searchParams.get(\"per_page\") || \"20\");\n    const offset = (page - 1) * per_page;\n    const category = searchParams.get(\"category\");\n    const unit = searchParams.get(\"unit\");\n    const search = searchParams.get(\"search\");\n    const is_active = searchParams.get(\"is_active\");\n    const supplier_name = searchParams.get(\"supplier_name\");\n\n    let query = supabase\n      .from(\"materials\")\n      .select(\n        `\n        id,\n        name,\n        category,\n        unit,\n        unit_price_eur,\n        supplier_name,\n        description,\n        is_active,\n        current_stock,\n        min_stock_threshold,\n        created_at,\n        updated_at\n      `,\n        { count: \"exact\" }\n      )\n      .eq(\"is_active\", true)\n      .order(\"name\", { ascending: true })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters\n    if (category) {\n      query = query.eq(\"category\", category);\n    }\n\n    if (unit) {\n      query = query.eq(\"unit\", unit);\n    }\n\n    if (supplier_name) {\n      query = query.eq(\"supplier_name\", supplier_name);\n    }\n\n    if (is_active !== null) {\n      query = query.eq(\"is_active\", is_active === \"true\");\n    }\n\n    if (search) {\n      query = query.or(\n        `name.ilike.%${search}%,category.ilike.%${search}%,supplier_name.ilike.%${search}%,description.ilike.%${search}%`\n      );\n    }\n\n    const { data: materials, error, count } = await query;\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch materials from database\" },\n        { status: 500 }\n      );\n    }\n\n    // Transform materials to match frontend interface\n    const transformedMaterials = (materials || []).map(material => ({\n      ...material,\n      unit_cost: material.unit_price_eur || 0,\n      current_stock_qty: 100, // Default stock quantity\n      min_stock_level: 10     // Default minimum stock level\n    }));\n\n    return NextResponse.json({\n      items: transformedMaterials,\n      total: count || 0,\n      page,\n      per_page,\n      total_pages: Math.ceil((count || 0) / per_page),\n    });\n  } catch (error) {\n    console.error(\"Materials API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch materials\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      name,\n      category,\n      unit = \"pcs\",\n      unit_price_eur = 0,\n      supplier_name,\n      description,\n      is_active = true,\n    } = body;\n\n    // Validation\n    if (!name) {\n      return NextResponse.json(\n        { error: \"Name is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Create material in Supabase\n    const { data: material, error } = await supabase\n      .from(\"materials\")\n      .insert([\n        {\n          name,\n          category: category || null,\n          unit: unit || \"pcs\",\n          unit_price_eur: unit_price_eur || 0,\n          supplier_name: supplier_name || null,\n          description: description || null,\n          is_active: is_active !== false,\n        },\n      ])\n      .select(\n        `\n        id,\n        name,\n        category,\n        unit,\n        unit_price_eur,\n        supplier_name,\n        description,\n        is_active,\n        current_stock,\n        min_stock_threshold,\n        created_at,\n        updated_at\n      `\n      )\n      .single();\n\n    if (error) {\n      console.error(\"Supabase error creating material:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create material in database\" },\n        { status: 500 }\n      );\n    }\n\n    // Transform material to match frontend interface\n    const transformedMaterial = {\n      ...material,\n      unit_cost: material.unit_price_eur || 0,\n      current_stock_qty: 100, // Default stock quantity\n      min_stock_level: 10     // Default minimum stock level\n    };\n\n    return NextResponse.json(transformedMaterial, { status: 201 });\n  } catch (error) {\n    console.error(\"Create material error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create material\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}