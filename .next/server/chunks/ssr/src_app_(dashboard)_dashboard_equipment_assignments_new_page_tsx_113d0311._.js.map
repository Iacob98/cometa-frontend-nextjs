{"version":3,"sources":["turbopack:///[project]/src/app/(dashboard)/dashboard/equipment/assignments/new/page.tsx"],"sourcesContent":["\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\nimport { useState, useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { ArrowLeft, Save, Loader2, Calendar, Users, Wrench, Building2, Truck } from \"lucide-react\"\nimport { toast } from \"sonner\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\n\n// Validation schema for crew-based equipment/vehicle assignment\nconst assignmentFormSchema = z.object({\n  equipment_id: z.string().optional(),\n  vehicle_id: z.string().optional(),\n  crew_id: z.string().min(1, \"Crew selection is required\"), // Now required - crew-based logic\n  project_id: z.string().optional(), // Optional - will be auto-assigned when crew joins project\n  assignment_type: z.enum(['equipment', 'vehicle']),\n  from_ts: z.string().min(1, \"Start date is required\"),\n  to_ts: z.string().optional(),\n  is_permanent: z.boolean().default(false),\n  rental_cost_per_day: z.string().optional().transform((val) => val ? parseFloat(val) : undefined),\n}).refine((data) => {\n  // Either equipment_id or vehicle_id must be provided based on assignment_type\n  if (data.assignment_type === 'equipment' && !data.equipment_id) {\n    return false;\n  }\n  if (data.assignment_type === 'vehicle' && !data.vehicle_id) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Resource selection is required\",\n  path: ['equipment_id']\n})\n\ntype AssignmentFormValues = z.infer<typeof assignmentFormSchema>\n\ninterface Equipment {\n  id: string\n  name: string\n  type: string\n  inventory_no?: string\n  status: string\n}\n\ninterface Vehicle {\n  id: string\n  brand: string\n  model: string\n  plate_number: string\n  type: string\n  status: string\n}\n\ninterface Project {\n  id: string\n  name: string\n  customer: string\n  status: string\n}\n\ninterface Crew {\n  id: string\n  name: string\n  project_id?: string\n  project_name?: string\n}\n\nexport default function NewEquipmentAssignmentPage() {\n  const router = useRouter()\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [equipment, setEquipment] = useState<Equipment[]>([])\n  const [vehicles, setVehicles] = useState<Vehicle[]>([])\n  const [projects, setProjects] = useState<Project[]>([])\n  const [crews, setCrews] = useState<Crew[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  // Initialize form\n  const form = useForm<AssignmentFormValues>({\n    resolver: zodResolver(assignmentFormSchema),\n    defaultValues: {\n      equipment_id: \"\",\n      vehicle_id: \"\",\n      crew_id: \"\",\n      project_id: \"\",\n      assignment_type: \"equipment\" as const,\n      from_ts: \"\",\n      to_ts: \"\",\n      is_permanent: false,\n    },\n  })\n\n  // Load dropdown data\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setIsLoading(true)\n\n        // Load equipment (only available)\n        const equipmentResponse = await fetch('/api/equipment')\n        const equipmentData = await equipmentResponse.json()\n        const equipmentItems = equipmentData.items || equipmentData\n        const availableEquipment = equipmentItems.filter((eq: Equipment) =>\n          eq.status === 'available'\n        )\n        setEquipment(availableEquipment)\n\n        // Load vehicles (only available)\n        const vehiclesResponse = await fetch('/api/vehicles')\n        const vehiclesData = await vehiclesResponse.json()\n        const vehicleItems = vehiclesData.items || vehiclesData\n        const availableVehicles = vehicleItems.filter((veh: Vehicle) =>\n          veh.status === 'available'\n        )\n        setVehicles(availableVehicles)\n\n        // Load projects (only active)\n        const projectsResponse = await fetch('/api/projects?status=active')\n        const projectsData = await projectsResponse.json()\n        setProjects(projectsData.items || projectsData)\n\n        // Load crews\n        const crewsResponse = await fetch('/api/crews')\n        const crewsData = await crewsResponse.json()\n        setCrews(crewsData)\n\n      } catch (error) {\n        console.error('Failed to load data:', error)\n        toast.error('Failed to load form data')\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    loadData()\n  }, [])\n\n  // Form submission handler\n  async function onSubmit(values: AssignmentFormValues) {\n    setIsSubmitting(true)\n\n    try {\n      // Determine the API endpoint based on assignment type\n      const isVehicleAssignment = values.assignment_type === 'vehicle'\n      const endpoint = isVehicleAssignment ? '/api/vehicles/assignments' : '/api/equipment/assignments'\n\n      // Transform form values to API format\n      const assignmentData = {\n        ...(isVehicleAssignment ? { vehicle_id: values.vehicle_id } : { equipment_id: values.equipment_id }),\n        crew_id: values.crew_id, // Required for crew-based logic\n        project_id: values.project_id || undefined, // Optional\n        from_ts: values.from_ts,\n        to_ts: values.to_ts || undefined,\n        is_permanent: values.is_permanent,\n        rental_cost_per_day: values.rental_cost_per_day,\n      }\n\n      // Submit to appropriate API\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(assignmentData),\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.error || `Failed to create ${values.assignment_type} assignment`)\n      }\n\n      const result = await response.json()\n\n      toast.success(`${values.assignment_type === 'vehicle' ? 'Vehicle' : 'Equipment'} assignment created successfully!`)\n\n      // Navigate back to equipment page\n      router.push('/dashboard/equipment')\n\n    } catch (error) {\n      console.error('Assignment creation error:', error)\n      toast.error(error instanceof Error ? error.message : \"Failed to create assignment\")\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => router.back()}\n            className=\"flex items-center\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold tracking-tight\">Create Resource Assignment</h1>\n            <p className=\"text-muted-foreground\">\n              Assign equipment or vehicles to crews for project work\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <Separator />\n\n      {/* Form */}\n      <div className=\"max-w-4xl\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Wrench className=\"h-5 w-5 mr-2\" />\n                  Assignment Details\n                </CardTitle>\n                <CardDescription>\n                  Assign equipment or vehicles to crews. Projects will be auto-assigned when crews join them.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {/* Assignment Type Selection */}\n                  <FormField\n                    control={form.control}\n                    name=\"assignment_type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Resource Type *</FormLabel>\n                        <Select onValueChange={(value) => {\n                          field.onChange(value)\n                          // Clear resource selection when type changes\n                          form.setValue('equipment_id', '')\n                          form.setValue('vehicle_id', '')\n                        }} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select resource type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"equipment\">\n                              <div className=\"flex items-center\">\n                                <Wrench className=\"h-4 w-4 mr-2\" />\n                                <span>Equipment</span>\n                              </div>\n                            </SelectItem>\n                            <SelectItem value=\"vehicle\">\n                              <div className=\"flex items-center\">\n                                <Truck className=\"h-4 w-4 mr-2\" />\n                                <span>Vehicle</span>\n                              </div>\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormDescription>\n                          Choose whether to assign equipment or vehicles\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Equipment Selection (conditionally shown) */}\n                  {form.watch('assignment_type') === 'equipment' && (\n                    <FormField\n                      control={form.control}\n                      name=\"equipment_id\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Equipment *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select equipment\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {equipment.map((eq) => (\n                                <SelectItem key={eq.id} value={eq.id}>\n                                  <div className=\"flex items-center\">\n                                    <Wrench className=\"h-4 w-4 mr-2\" />\n                                    <span>{eq.name}</span>\n                                    {eq.inventory_no && (\n                                      <span className=\"text-muted-foreground ml-2\">\n                                        ({eq.inventory_no})\n                                      </span>\n                                    )}\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormDescription>\n                            Only available equipment is shown\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  {/* Vehicle Selection (conditionally shown) */}\n                  {form.watch('assignment_type') === 'vehicle' && (\n                    <FormField\n                      control={form.control}\n                      name=\"vehicle_id\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vehicle *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select vehicle\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {vehicles.map((vehicle) => (\n                                <SelectItem key={vehicle.id} value={vehicle.id}>\n                                  <div className=\"flex items-center\">\n                                    <Truck className=\"h-4 w-4 mr-2\" />\n                                    <span>{vehicle.brand} {vehicle.model}</span>\n                                    <span className=\"text-muted-foreground ml-2\">\n                                      ({vehicle.plate_number})\n                                    </span>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormDescription>\n                            Only available vehicles are shown\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  {/* Crew Selection (Required) */}\n                  <FormField\n                    control={form.control}\n                    name=\"crew_id\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Crew *</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select crew\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {crews.map((crew) => (\n                              <SelectItem key={crew.id} value={crew.id}>\n                                <div className=\"flex items-center\">\n                                  <Users className=\"h-4 w-4 mr-2\" />\n                                  <span>{crew.name}</span>\n                                  {crew.project_name && (\n                                    <span className=\"text-muted-foreground ml-2\">\n                                      (Project: {crew.project_name})\n                                    </span>\n                                  )}\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormDescription>\n                          Resources are assigned to crews first, then auto-assigned to projects when crews join them\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Project Selection (Optional) */}\n                  <FormField\n                    control={form.control}\n                    name=\"project_id\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Project (Optional)</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select project (optional)\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {projects.map((project) => (\n                              <SelectItem key={project.id} value={project.id}>\n                                <div className=\"flex items-center\">\n                                  <Building2 className=\"h-4 w-4 mr-2\" />\n                                  <span>{project.name}</span>\n                                  <span className=\"text-muted-foreground ml-2\">\n                                    ({project.customer})\n                                  </span>\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormDescription>\n                          Optional direct project assignment (will be auto-assigned when crew joins project)\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Rental Cost */}\n                  <FormField\n                    control={form.control}\n                    name=\"rental_cost_per_day\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Daily Rental Cost (€)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"0.00\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Daily cost for this assignment (optional)\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Start Date */}\n                  <FormField\n                    control={form.control}\n                    name=\"from_ts\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Date & Time *</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"datetime-local\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          When the assignment begins\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* End Date */}\n                  <FormField\n                    control={form.control}\n                    name=\"to_ts\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>End Date & Time</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"datetime-local\"\n                            {...field}\n                            disabled={form.watch('is_permanent')}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          When the assignment ends (leave empty for ongoing)\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Permanent Assignment */}\n                <FormField\n                  control={form.control}\n                  name=\"is_permanent\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={(checked) => {\n                            field.onChange(checked)\n                            if (checked) {\n                              form.setValue('to_ts', '')\n                            }\n                          }}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel>\n                          Permanent Assignment\n                        </FormLabel>\n                        <FormDescription>\n                          Check if this is a permanent assignment (no end date)\n                        </FormDescription>\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Form Actions */}\n            <div className=\"flex items-center justify-end space-x-4 pt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => router.back()}\n                disabled={isSubmitting}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Creating Assignment...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Create {form.watch('assignment_type') === 'vehicle' ? 'Vehicle' : 'Equipment'} Assignment\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  )\n}"],"names":[],"mappings":"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"}