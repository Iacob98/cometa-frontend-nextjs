{"version":3,"sources":["turbopack:///[project]/src/app/(dashboard)/dashboard/materials/order/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { ArrowLeft, Plus, Trash2, Package, ShoppingCart } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\n\nimport { useCreateMaterialOrderWithBudget } from \"@/hooks/use-material-orders\";\nimport { useProjects } from \"@/hooks/use-projects\";\nimport { useSuppliers } from \"@/hooks/use-suppliers\";\nimport { useSupplierMaterials } from \"@/hooks/use-suppliers\";\nimport type { CreateMaterialOrderRequest } from \"@/types\";\n\nconst createOrderSchema = z.object({\n  project_id: z.string().min(1, \"Project is required\"),\n  supplier_id: z.string().min(1, \"Supplier is required\"),\n  expected_delivery_date: z.string().optional(),\n  notes: z.string().optional(),\n  deduct_from_budget: z.boolean().default(true),\n  items: z.array(z.object({\n    material_id: z.string().min(1, \"Material is required\"),\n    quantity: z.coerce.number().positive(\"Quantity must be positive\"),\n    unit_cost: z.coerce.number().positive(\"Unit cost must be positive\").optional(),\n  })).min(1, \"At least one item is required\"),\n});\n\ntype CreateOrderFormData = z.infer<typeof createOrderSchema>;\n\nexport default function OrderMaterialsPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const initialProjectId = searchParams.get('project_id') || '';\n\n  const [selectedSupplierId, setSelectedSupplierId] = useState<string>('');\n\n  const createOrder = useCreateMaterialOrderWithBudget();\n  const { data: projectsResponse } = useProjects();\n  const { data: suppliers = [] } = useSuppliers();\n  const { data: supplierMaterials = [] } = useSupplierMaterials(selectedSupplierId);\n\n  const projects = projectsResponse?.items || [];\n\n  const form = useForm<CreateOrderFormData>({\n    resolver: zodResolver(createOrderSchema),\n    defaultValues: {\n      project_id: initialProjectId,\n      supplier_id: \"\",\n      expected_delivery_date: \"\",\n      notes: \"\",\n      deduct_from_budget: true,\n      items: [{ material_id: \"\", quantity: 1, unit_cost: 0 }],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"items\",\n  });\n\n  const watchedSupplierId = form.watch(\"supplier_id\");\n\n  // Update selected supplier when form changes\n  if (watchedSupplierId !== selectedSupplierId) {\n    setSelectedSupplierId(watchedSupplierId);\n    // Clear existing items when supplier changes\n    if (selectedSupplierId && watchedSupplierId !== selectedSupplierId) {\n      form.setValue(\"items\", [{ material_id: \"\", quantity: 1, unit_cost: 0 }]);\n    }\n  }\n\n  const handleCreateOrder = async (data: CreateOrderFormData) => {\n    try {\n      // Create separate orders for each item since API expects one material per order\n      for (const item of data.items) {\n        const orderData: CreateMaterialOrderRequest & { deduct_from_budget?: boolean } = {\n          project_id: data.project_id,\n          supplier_material_id: item.material_id,\n          quantity: item.quantity,\n          unit_price_eur: item.unit_cost || undefined,\n          expected_delivery_date: data.expected_delivery_date || undefined,\n          notes: data.notes || undefined,\n          deduct_from_budget: data.deduct_from_budget,\n        };\n\n        await createOrder.mutateAsync(orderData);\n      }\n\n      router.push(\"/dashboard/materials\");\n    } catch (error) {\n      console.error(\"Failed to create order:\", error);\n    }\n  };\n\n  const addItem = () => {\n    append({ material_id: \"\", quantity: 1, unit_cost: 0 });\n  };\n\n  const calculateTotal = () => {\n    const items = form.getValues(\"items\");\n    return items.reduce((total, item) => {\n      return total + (item.quantity * (item.unit_cost || 0));\n    }, 0);\n  };\n\n  const selectedProject = projects.find(p => p.id === form.watch(\"project_id\"));\n  const selectedSupplier = suppliers.find(s => s.id === selectedSupplierId);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => router.back()}\n            className=\"flex items-center space-x-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            <span>Back</span>\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Order Materials</h1>\n            <p className=\"text-muted-foreground\">\n              Create a material order for your project\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Form */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <ShoppingCart className=\"h-5 w-5\" />\n                <span>Order Details</span>\n              </CardTitle>\n              <CardDescription>\n                Select project, supplier, and materials to order\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleCreateOrder)} className=\"space-y-6\">\n                  {/* Project and Supplier Selection */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"project_id\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Project *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select project\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {projects.map((project) => (\n                                <SelectItem key={project.id} value={project.id}>\n                                  {project.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"supplier_id\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Supplier *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select supplier\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {suppliers.map((supplier) => (\n                                <SelectItem key={supplier.id} value={supplier.id}>\n                                  {supplier.org_name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"expected_delivery_date\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Expected Delivery Date</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"date\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Materials List */}\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-medium\">Materials</h3>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={addItem}\n                        disabled={!selectedSupplierId}\n                      >\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Add Item\n                      </Button>\n                    </div>\n\n                    {!selectedSupplierId && (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        Please select a supplier to add materials\n                      </div>\n                    )}\n\n                    {selectedSupplierId && supplierMaterials.length === 0 && (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        No materials available from this supplier\n                      </div>\n                    )}\n\n                    {selectedSupplierId && supplierMaterials.length > 0 && (\n                      <div className=\"border rounded-lg\">\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead>Material</TableHead>\n                              <TableHead>Quantity</TableHead>\n                              <TableHead>Unit Cost (€)</TableHead>\n                              <TableHead>Total (€)</TableHead>\n                              <TableHead className=\"w-[50px]\"></TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {fields.map((field, index) => {\n                              const selectedMaterial = supplierMaterials.find(\n                                m => m.id === form.watch(`items.${index}.material_id`)\n                              );\n                              const quantity = form.watch(`items.${index}.quantity`) || 0;\n                              const unitCost = form.watch(`items.${index}.unit_cost`) || selectedMaterial?.unit_price_eur || 0;\n                              const total = quantity * unitCost;\n\n                              return (\n                                <TableRow key={field.id}>\n                                  <TableCell>\n                                    <FormField\n                                      control={form.control}\n                                      name={`items.${index}.material_id`}\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <Select onValueChange={(value) => {\n                                            field.onChange(value);\n                                            // Auto-fill unit cost from supplier material\n                                            const material = supplierMaterials.find(m => m.id === value);\n                                            if (material) {\n                                              form.setValue(`items.${index}.unit_cost`, material.unit_price_eur);\n                                            }\n                                          }} value={field.value}>\n                                            <FormControl>\n                                              <SelectTrigger>\n                                                <SelectValue placeholder=\"Select material\" />\n                                              </SelectTrigger>\n                                            </FormControl>\n                                            <SelectContent>\n                                              {supplierMaterials.map((material) => (\n                                                <SelectItem key={material.id} value={material.id}>\n                                                  <div className=\"flex flex-col\">\n                                                    <span>{material.material_type}</span>\n                                                    <span className=\"text-xs text-muted-foreground\">\n                                                      €{material.unit_price_eur}/{material.unit}\n                                                    </span>\n                                                  </div>\n                                                </SelectItem>\n                                              ))}\n                                            </SelectContent>\n                                          </Select>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                    {selectedMaterial && (\n                                      <div className=\"mt-1 text-xs text-muted-foreground\">\n                                        Unit: {selectedMaterial.unit}\n                                        {selectedMaterial.min_order_quantity > 1 && (\n                                          <span className=\"ml-1\">\n                                            (Min: {selectedMaterial.min_order_quantity})\n                                          </span>\n                                        )}\n                                      </div>\n                                    )}\n                                  </TableCell>\n                                  <TableCell>\n                                    <FormField\n                                      control={form.control}\n                                      name={`items.${index}.quantity`}\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormControl>\n                                            <Input\n                                              type=\"number\"\n                                              step=\"0.001\"\n                                              min={selectedMaterial?.min_order_quantity || 1}\n                                              {...field}\n                                            />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                  </TableCell>\n                                  <TableCell>\n                                    <FormField\n                                      control={form.control}\n                                      name={`items.${index}.unit_cost`}\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormControl>\n                                            <Input\n                                              type=\"number\"\n                                              step=\"0.01\"\n                                              min=\"0\"\n                                              {...field}\n                                            />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                  </TableCell>\n                                  <TableCell>\n                                    <span className=\"font-medium\">\n                                      €{total.toFixed(2)}\n                                    </span>\n                                  </TableCell>\n                                  <TableCell>\n                                    {fields.length > 1 && (\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        onClick={() => remove(index)}\n                                      >\n                                        <Trash2 className=\"h-4 w-4\" />\n                                      </Button>\n                                    )}\n                                  </TableCell>\n                                </TableRow>\n                              );\n                            })}\n                          </TableBody>\n                        </Table>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Notes */}\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Additional notes for this order...\"\n                            rows={3}\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Budget Deduction */}\n                  <FormField\n                    control={form.control}\n                    name=\"deduct_from_budget\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>\n                            Automatically deduct from project budget\n                          </FormLabel>\n                          <FormDescription>\n                            When enabled, the order cost will be automatically deducted from the project's budget as an expense transaction. You can manage this manually later if disabled.\n                          </FormDescription>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => router.back()}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createOrder.isPending}\n                    >\n                      {createOrder.isPending ? (\n                        <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-background border-t-transparent mr-2\" />\n                      ) : (\n                        <Package className=\"mr-2 h-4 w-4\" />\n                      )}\n                      Create Order\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Order Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Order Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {selectedProject && (\n                <div>\n                  <h4 className=\"font-medium text-sm\">Project</h4>\n                  <p className=\"text-sm text-muted-foreground\">{selectedProject.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">{selectedProject.customer}</p>\n                </div>\n              )}\n\n              {selectedSupplier && (\n                <div>\n                  <h4 className=\"font-medium text-sm\">Supplier</h4>\n                  <p className=\"text-sm text-muted-foreground\">{selectedSupplier.org_name}</p>\n                  <p className=\"text-xs text-muted-foreground\">{selectedSupplier.contact_person}</p>\n                </div>\n              )}\n\n              <div className=\"pt-2 border-t\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-medium\">Total Cost</span>\n                  <span className=\"text-lg font-bold\">€{calculateTotal().toFixed(2)}</span>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Excludes delivery costs\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Help */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Order Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 text-sm\">\n              <div>\n                <h4 className=\"font-medium\">Order Process</h4>\n                <p className=\"text-muted-foreground\">\n                  Orders are created with \"pending\" status and can be tracked through delivery\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Costs</h4>\n                <p className=\"text-muted-foreground\">\n                  Order costs will be deducted from the project budget automatically\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Delivery</h4>\n                <p className=\"text-muted-foreground\">\n                  Check with supplier for delivery costs and minimum order requirements\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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"}