{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,mNAAgB,CAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AACA,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/hooks/use-materials.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport {\n  materialsApi,\n  suppliersApi,\n  materialAllocationsApi,\n  materialOrdersApi,\n  type Material,\n  type Supplier,\n  type MaterialAllocation,\n  type MaterialOrder,\n  type MaterialFilters,\n  type AllocationFilters,\n  type OrderFilters,\n  type AllocationRequest,\n  type MaterialOrderStatus,\n  type PaginatedResponse,\n} from \"@/lib/api-client\";\n\n// Query keys\nexport const materialKeys = {\n  all: [\"materials\"] as const,\n  lists: () => [...materialKeys.all, \"list\"] as const,\n  list: (filters: MaterialFilters) => [...materialKeys.lists(), filters] as const,\n  details: () => [...materialKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...materialKeys.details(), id] as const,\n  lowStock: () => [...materialKeys.all, \"low-stock\"] as const,\n};\n\nexport const supplierKeys = {\n  all: [\"suppliers\"] as const,\n  lists: () => [...supplierKeys.all, \"list\"] as const,\n  details: () => [...supplierKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...supplierKeys.details(), id] as const,\n};\n\nexport const allocationKeys = {\n  all: [\"allocations\"] as const,\n  lists: () => [...allocationKeys.all, \"list\"] as const,\n  list: (filters: AllocationFilters) => [...allocationKeys.lists(), filters] as const,\n  details: () => [...allocationKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...allocationKeys.details(), id] as const,\n};\n\nexport const orderKeys = {\n  all: [\"orders\"] as const,\n  lists: () => [...orderKeys.all, \"list\"] as const,\n  list: (filters: OrderFilters) => [...orderKeys.lists(), filters] as const,\n  details: () => [...orderKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...orderKeys.details(), id] as const,\n};\n\n// Centralized cache invalidation function for all material-related queries\nexport function invalidateAllMaterialQueries(queryClient: any) {\n  // Invalidate all material queries\n  queryClient.invalidateQueries({ queryKey: materialKeys.all });\n  queryClient.invalidateQueries({ queryKey: allocationKeys.all });\n  queryClient.invalidateQueries({ queryKey: orderKeys.all });\n\n  // Invalidate unified material views\n  queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n  queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n\n  // Force refetch critical queries\n  queryClient.refetchQueries({\n    queryKey: [...materialKeys.all, \"unified-warehouse\"],\n    type: 'active'\n  });\n}\n\n// Unified Material Hooks with consistent data source\nexport function useMaterials(filters?: MaterialFilters) {\n  return useQuery({\n    queryKey: materialKeys.list(filters || {}),\n    queryFn: () => materialsApi.getMaterials(filters),\n    staleTime: 2 * 60 * 1000, // 2 minutes - shorter for inventory accuracy\n  });\n}\n\nexport function useMaterial(id: string) {\n  return useQuery({\n    queryKey: materialKeys.detail(id),\n    queryFn: () => materialsApi.getMaterial(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  });\n}\n\nexport function useLowStockMaterials() {\n  return useQuery({\n    queryKey: materialKeys.lowStock(),\n    queryFn: async () => {\n      const response = await fetch('/api/materials/low-stock');\n      if (!response.ok) {\n        throw new Error('Failed to fetch low stock materials');\n      }\n      const data = await response.json();\n      return data.materials || []; // Extract materials array from API response\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes - more frequent updates for stock alerts\n  });\n}\n\n// Unified Warehouse Materials Hook - Single source of truth for inventory\nexport function useUnifiedWarehouseMaterials() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"unified-warehouse\"],\n    queryFn: async () => {\n      const response = await fetch('/api/materials/unified?view=warehouse');\n      if (!response.ok) {\n        throw new Error('Failed to fetch warehouse materials');\n      }\n      const data = await response.json();\n      return data.materials || [];\n    },\n    staleTime: 30 * 1000, // 30 seconds for faster updates\n    gcTime: 5 * 60 * 1000, // Keep in cache for 5 minutes\n    refetchOnWindowFocus: true, // Refetch when user returns to window\n    refetchInterval: 60 * 1000, // Auto-refetch every minute\n  });\n}\n\n// Project Material Allocations Hook with unified data\nexport function useUnifiedProjectMaterials(projectId: string) {\n  return useQuery({\n    queryKey: [...allocationKeys.all, \"project\", projectId, \"unified\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/materials/unified?view=project_allocations&project_id=${projectId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch project materials');\n      }\n      const data = await response.json();\n      return { materials: data.materials || [], summary: data.allocation_summary };\n    },\n    enabled: !!projectId,\n    staleTime: 1 * 60 * 1000, // 1 minute\n    gcTime: 5 * 60 * 1000,\n  });\n}\n\n// Material Allocation Targets Hook\nexport function useMaterialAllocationTargets() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"allocation-targets\"],\n    queryFn: async () => {\n      const response = await fetch('/api/materials/unified?view=allocation_targets');\n      if (!response.ok) {\n        throw new Error('Failed to fetch allocation targets');\n      }\n      const data = await response.json();\n      return data.materials || [];\n    },\n    staleTime: 30 * 1000, // 30 seconds for responsive allocation targets\n    refetchOnWindowFocus: true,\n  });\n}\n\nexport function useCreateMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<Material>) => materialsApi.createMaterial(data),\n    onSuccess: (newMaterial) => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.setQueryData(materialKeys.detail(newMaterial.id), newMaterial);\n      toast.success(\"Material created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create material: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Material> }) =>\n      materialsApi.updateMaterial(id, data),\n    onMutate: async ({ id, data }) => {\n      await queryClient.cancelQueries({ queryKey: materialKeys.detail(id) });\n      const previousMaterial = queryClient.getQueryData(materialKeys.detail(id));\n\n      queryClient.setQueryData(materialKeys.detail(id), (old: Material | undefined) => {\n        if (!old) return old;\n        return { ...old, ...data };\n      });\n\n      return { previousMaterial };\n    },\n    onError: (error, { id }, context) => {\n      if (context?.previousMaterial) {\n        queryClient.setQueryData(materialKeys.detail(id), context.previousMaterial);\n      }\n      toast.error(`Failed to update material: ${error.message}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      toast.success(\"Material updated successfully\");\n    },\n    onSettled: (data, error, { id }) => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.detail(id) });\n    },\n  });\n}\n\nexport function useDeleteMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => materialsApi.deleteMaterial(id),\n    onSuccess: (_, deletedId) => {\n      queryClient.removeQueries({ queryKey: materialKeys.detail(deletedId) });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      toast.success(\"Material deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete material: ${error.message}`);\n    },\n  });\n}\n\nexport function useAdjustStock() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, adjustment }: { id: string; adjustment: { quantity: number; reason: string } }) =>\n      materialsApi.adjustStock(id, adjustment),\n    onSuccess: (updatedMaterial) => {\n      queryClient.setQueryData(materialKeys.detail(updatedMaterial.id), updatedMaterial);\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      // Invalidate unified warehouse and allocation views\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n      toast.success(\"Stock adjusted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to adjust stock: ${error.message}`);\n    },\n  });\n}\n\n// Material Consumption Hook\nexport function useConsumeMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: {\n      allocation_id: string;\n      consumed_qty: number;\n      work_entry_id?: string;\n      notes?: string\n    }) => {\n      return fetch('/api/materials/consume', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      }).then(response => {\n        if (!response.ok) {\n          return response.json().then(err => Promise.reject(new Error(err.error || 'Failed to consume material')));\n        }\n        return response.json();\n      });\n    },\n    onSuccess: (result, variables) => {\n      // Invalidate all material-related queries to ensure consistency\n      queryClient.invalidateQueries({ queryKey: materialKeys.all });\n      queryClient.invalidateQueries({ queryKey: [...allocationKeys.all] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n\n      // If we know the project, invalidate project-specific queries\n      if (variables.work_entry_id) {\n        queryClient.invalidateQueries({ queryKey: [...allocationKeys.all, \"project\"] });\n      }\n\n      toast.success(result.message || \"Material consumed successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to consume material: ${error.message}`);\n    },\n  });\n}\n\n// Supplier Hooks\nexport function useSuppliers() {\n  return useQuery({\n    queryKey: supplierKeys.lists(),\n    queryFn: () => suppliersApi.getSuppliers(),\n    staleTime: 10 * 60 * 1000, // 10 minutes - suppliers change less frequently\n  });\n}\n\nexport function useSupplier(id: string) {\n  return useQuery({\n    queryKey: supplierKeys.detail(id),\n    queryFn: () => suppliersApi.getSupplier(id),\n    enabled: !!id,\n    staleTime: 10 * 60 * 1000,\n  });\n}\n\nexport function useCreateSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<Supplier>) => suppliersApi.createSupplier(data),\n    onSuccess: (newSupplier) => {\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      queryClient.setQueryData(supplierKeys.detail(newSupplier.id), newSupplier);\n      toast.success(\"Supplier created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create supplier: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Supplier> }) =>\n      suppliersApi.updateSupplier(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      toast.success(\"Supplier updated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to update supplier: ${error.message}`);\n    },\n  });\n}\n\nexport function useDeleteSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => suppliersApi.deleteSupplier(id),\n    onSuccess: (_, deletedId) => {\n      queryClient.removeQueries({ queryKey: supplierKeys.detail(deletedId) });\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      toast.success(\"Supplier deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete supplier: ${error.message}`);\n    },\n  });\n}\n\n// Allocation Hooks\nexport function useAllocations(filters?: AllocationFilters) {\n  return useQuery({\n    queryKey: allocationKeys.list(filters || {}),\n    queryFn: () => materialAllocationsApi.getAllocations(filters),\n    staleTime: 2 * 60 * 1000, // 2 minutes - allocations change frequently\n  });\n}\n\nexport function useAllocation(id: string) {\n  return useQuery({\n    queryKey: allocationKeys.detail(id),\n    queryFn: () => materialAllocationsApi.getAllocation(id),\n    enabled: !!id,\n    staleTime: 2 * 60 * 1000,\n  });\n}\n\nexport function useCreateAllocation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: AllocationRequest) => materialAllocationsApi.createAllocation(data),\n    onSuccess: (newAllocation) => {\n      queryClient.invalidateQueries({ queryKey: allocationKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      queryClient.setQueryData(allocationKeys.detail(newAllocation.id), newAllocation);\n      toast.success(\"Material allocated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to allocate material: ${error.message}`);\n    },\n  });\n}\n\nexport function useRecordUsage() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, usage }: { id: string; usage: { used_qty: number; notes?: string } }) =>\n      materialAllocationsApi.recordUsage(id, usage),\n    onSuccess: (updatedAllocation) => {\n      queryClient.setQueryData(allocationKeys.detail(updatedAllocation.id), updatedAllocation);\n      queryClient.invalidateQueries({ queryKey: allocationKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      toast.success(\"Usage recorded successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to record usage: ${error.message}`);\n    },\n  });\n}\n\n// Order Hooks\nexport function useOrders(filters?: OrderFilters) {\n  return useQuery({\n    queryKey: orderKeys.list(filters || {}),\n    queryFn: () => materialOrdersApi.getOrders(filters),\n    staleTime: 3 * 60 * 1000, // 3 minutes\n  });\n}\n\nexport function useOrder(id: string) {\n  return useQuery({\n    queryKey: orderKeys.detail(id),\n    queryFn: () => materialOrdersApi.getOrder(id),\n    enabled: !!id,\n    staleTime: 3 * 60 * 1000,\n  });\n}\n\nexport function useCreateOrder() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<MaterialOrder>) => materialOrdersApi.createOrder(data),\n    onSuccess: (newOrder) => {\n      queryClient.invalidateQueries({ queryKey: orderKeys.lists() });\n      queryClient.setQueryData(orderKeys.detail(newOrder.id), newOrder);\n      toast.success(\"Order created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create order: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateOrderStatus() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, status }: { id: string; status: MaterialOrderStatus }) =>\n      materialOrdersApi.updateOrderStatus(id, status),\n    onSuccess: (updatedOrder) => {\n      queryClient.setQueryData(orderKeys.detail(updatedOrder.id), updatedOrder);\n      queryClient.invalidateQueries({ queryKey: orderKeys.lists() });\n\n      // If order is delivered, update material stock levels\n      if (updatedOrder.status === \"delivered\") {\n        queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n        queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      }\n\n      toast.success(\"Order status updated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to update order status: ${error.message}`);\n    },\n  });\n}\n\n// Specialized hooks\nexport function useProjectAllocations(projectId: string) {\n  return useAllocations({ project_id: projectId });\n}\n\nexport function useTeamAllocations(teamId: string) {\n  return useAllocations({ team_id: teamId });\n}\n\nexport function usePendingOrders() {\n  return useOrders({ status: \"pending\" });\n}\n\nexport function useSupplierOrders(supplierId: string) {\n  return useOrders({ supplier_id: supplierId });\n}\n\n// Project Preparation specific hooks\nexport interface ProjectMaterial {\n  id: string;\n  material_id: string;\n  name: string;\n  sku?: string;\n  unit: string;\n  description?: string;\n  allocated_qty: number;\n  unit_price: number;\n  total_cost: number;\n  allocation_date: string;\n  return_date?: string;\n  status: 'allocated' | 'used' | 'returned' | 'cancelled';\n  notes?: string;\n  allocated_by_name?: string;\n}\n\nexport interface WarehouseMaterial {\n  id: string;\n  name: string;\n  sku?: string;\n  unit: string;\n  description?: string;\n  available_qty: number;\n  total_qty: number;\n  reserved_qty: number;\n  min_stock: number;\n  price: number;\n}\n\nexport interface ProjectMaterialsResponse {\n  materials: ProjectMaterial[];\n  summary: {\n    total_materials: number;\n    pending_count: number;\n    used_count: number;\n    total_cost: number;\n  };\n}\n\nexport interface MaterialAssignmentData {\n  project_id: string;\n  material_id: string;\n  quantity: number;\n  from_date: string;\n  to_date?: string;\n  notes?: string;\n}\n\nexport interface UpdateMaterialAssignmentData {\n  assignment_id: string;\n  quantity: number;\n  unit_price: number;\n  from_date: string;\n  to_date?: string;\n  notes?: string;\n}\n\nexport function useProjectMaterials(projectId: string) {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"project\", projectId],\n    queryFn: async (): Promise<ProjectMaterialsResponse> => {\n      const response = await fetch(`/api/materials/project/${projectId}`, {\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch project materials');\n      }\n      return response.json();\n    },\n    enabled: !!projectId,\n    staleTime: 0, // Force fresh data every time\n    gcTime: 0, // Don't keep old data in memory\n  });\n}\n\nexport function useWarehouseMaterials() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"warehouse\"],\n    queryFn: async (): Promise<WarehouseMaterial[]> => {\n      const response = await fetch('/api/materials/warehouse');\n      if (!response.ok) {\n        throw new Error('Failed to fetch warehouse materials');\n      }\n      return response.json();\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n}\n\nexport function useAssignMaterialToProject() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: MaterialAssignmentData) => {\n      const response = await fetch('/api/materials/assignments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to assign material');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate legacy project materials\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"project\", variables.project_id]\n      });\n\n      // Invalidate unified project materials\n      queryClient.invalidateQueries({\n        queryKey: [...allocationKeys.all, \"project\", variables.project_id, \"unified\"]\n      });\n\n      // Invalidate warehouse materials (stock has changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      // Invalidate unified warehouse materials\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      // Invalidate allocation targets (availability may have changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      // Force immediate refetch for real-time updates\n      queryClient.refetchQueries({\n        queryKey: [...allocationKeys.all, \"project\", variables.project_id, \"unified\"]\n      });\n\n      queryClient.refetchQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      toast.success('Material assigned successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to assign material: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateMaterialAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: UpdateMaterialAssignmentData) => {\n      const { assignment_id, ...updateData } = data;\n      const response = await fetch(`/api/materials/assignments/${assignment_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update material assignment');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate legacy project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey[0] === \"materials\" &&\n                 query.queryKey[1] === \"project\";\n        }\n      });\n\n      // Invalidate unified project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey.includes(\"unified\");\n        }\n      });\n\n      // Invalidate warehouse and allocation targets (stock may have changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      toast.success('Material assignment updated successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to update material assignment: ${error.message}`);\n    },\n  });\n}\n\nexport function useDeleteMaterialAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (assignmentId: string) => {\n      const response = await fetch(`/api/materials/assignments/${assignmentId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete material assignment');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, assignmentId) => {\n      // Invalidate all legacy project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey[0] === \"materials\" &&\n                 query.queryKey[1] === \"project\";\n        }\n      });\n\n      // Invalidate all unified queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey.includes(\"unified\");\n        }\n      });\n\n      // Invalidate warehouse materials (stock has been restored)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      // Invalidate allocation targets (availability increased)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      toast.success('Material assignment deleted successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete material assignment: ${error.message}`);\n    },\n  });\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 919, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/%28dashboard%29/dashboard/materials/new/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { ArrowLeft, Save, X, Package } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nimport { useCreateMaterial } from \"@/hooks/use-materials\";\nimport type { MaterialUnit } from \"@/types\";\n\nconst createMaterialSchema = z.object({\n  name: z.string().min(1, \"Material name is required\"),\n  description: z.string().optional(),\n  unit: z.string().min(1, \"Unit is required\"),\n  sku: z.string().optional(),\n  default_price_eur: z.coerce.number().min(0, \"Price must be non-negative\").optional(),\n  purchase_price_eur: z.coerce.number().min(0, \"Purchase price must be non-negative\").optional(),\n  initial_stock: z.coerce.number().min(0, \"Initial stock must be non-negative\").optional(),\n  min_stock_level: z.coerce.number().min(0, \"Minimum stock level must be non-negative\").optional(),\n});\n\ntype CreateMaterialFormData = z.infer<typeof createMaterialSchema>;\n\nconst materialUnits: { value: MaterialUnit; label: string }[] = [\n  { value: \"pcs\", label: \"Pieces (pcs)\" },\n  { value: \"m\", label: \"Meters (m)\" },\n  { value: \"m2\", label: \"Square meters (m²)\" },\n  { value: \"kg\", label: \"Kilograms (kg)\" },\n  { value: \"t\", label: \"Tons (t)\" },\n  { value: \"l\", label: \"Liters (L)\" },\n  { value: \"m3\", label: \"Cubic meters (m³)\" },\n  { value: \"roll\", label: \"Rolls\" },\n  { value: \"other\", label: \"Other\" },\n];\n\nexport default function NewMaterialPage() {\n  const router = useRouter();\n  const createMaterial = useCreateMaterial();\n\n  const form = useForm<CreateMaterialFormData>({\n    resolver: zodResolver(createMaterialSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      unit: \"\",\n      sku: \"\",\n      default_price_eur: 0,\n      purchase_price_eur: 0,\n      initial_stock: 0,\n      min_stock_level: 0,\n    },\n  });\n\n  const handleCreateMaterial = async (data: CreateMaterialFormData) => {\n    try {\n      await createMaterial.mutateAsync(data);\n      router.push(\"/dashboard/materials\");\n    } catch (error) {\n      console.error(\"Failed to create material:\", error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => router.back()}\n            className=\"flex items-center space-x-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            <span>Back</span>\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Create New Material</h1>\n            <p className=\"text-muted-foreground\">\n              Add a new material to your inventory system\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Form */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Package className=\"h-5 w-5\" />\n                <span>Material Information</span>\n              </CardTitle>\n              <CardDescription>\n                Enter the basic information for the new material\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleCreateMaterial)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem className=\"md:col-span-2\">\n                          <FormLabel>Material Name *</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"e.g., Single Mode Fiber Cable 12-strand\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"sku\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SKU</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"e.g., FOC-SM-12\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormDescription>\n                            Stock Keeping Unit (optional)\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"unit\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Unit of Measurement *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select unit\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {materialUnits.map((unit) => (\n                                <SelectItem key={unit.value} value={unit.value}>\n                                  {unit.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem className=\"md:col-span-2\">\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Detailed description of the material, specifications, etc.\"\n                              rows={3}\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"border-t pt-4\">\n                      <h3 className=\"text-lg font-medium mb-4\">Pricing</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"purchase_price_eur\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Purchase Price (EUR)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  step=\"0.01\"\n                                  min=\"0\"\n                                  placeholder=\"0.00\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormDescription>\n                                Cost price from supplier\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"default_price_eur\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Selling Price (EUR)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  step=\"0.01\"\n                                  min=\"0\"\n                                  placeholder=\"0.00\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormDescription>\n                                Default selling price\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"border-t pt-4\">\n                      <h3 className=\"text-lg font-medium mb-4\">Inventory</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"initial_stock\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Initial Stock Quantity</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  step=\"0.001\"\n                                  min=\"0\"\n                                  placeholder=\"0\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormDescription>\n                                Starting inventory amount\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"min_stock_level\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Minimum Stock Level</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  step=\"0.001\"\n                                  min=\"0\"\n                                  placeholder=\"0\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormDescription>\n                                Alert when stock falls below this level\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => router.back()}\n                    >\n                      <X className=\"mr-2 h-4 w-4\" />\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createMaterial.isPending}\n                    >\n                      {createMaterial.isPending ? (\n                        <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-background border-t-transparent mr-2\" />\n                      ) : (\n                        <Save className=\"mr-2 h-4 w-4\" />\n                      )}\n                      Create Material\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Tips</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 text-sm\">\n              <div>\n                <h4 className=\"font-medium\">Material Name</h4>\n                <p className=\"text-muted-foreground\">\n                  Use descriptive names that include key specifications like \"Single Mode Fiber Cable 12-strand\"\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">SKU</h4>\n                <p className=\"text-muted-foreground\">\n                  Create unique identifiers for easy tracking and ordering\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Units</h4>\n                <p className=\"text-muted-foreground\">\n                  Choose the most appropriate unit for purchasing and usage tracking\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Pricing</h4>\n                <p className=\"text-muted-foreground\">\n                  Purchase price helps track costs, selling price is used for project estimates\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Categories</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-sm\">\n              <p className=\"text-muted-foreground\">\n                Materials are automatically categorized based on their names:\n              </p>\n              <ul className=\"mt-2 space-y-1 text-muted-foreground\">\n                <li>• Cables - Fiber, copper cables</li>\n                <li>• Connectors - SC, LC, splice closures</li>\n                <li>• Tools - Installation equipment</li>\n                <li>• Conduits - Ducts, pipes</li>\n                <li>• Equipment - Hardware devices</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}