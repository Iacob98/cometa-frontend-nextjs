{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/components/project-preparation/zone-layout.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Package,\n  Plus,\n  Edit,\n  Trash2,\n  MapPin,\n  Ruler,\n  AlertTriangle,\n  FileText,\n  Router,\n  Construction\n} from 'lucide-react';\nimport {\n  useCabinets,\n  useCreateCabinet,\n  useUpdateCabinet,\n  useDeleteCabinet,\n} from '@/hooks/use-zone-layout';\nimport { toast } from 'sonner';\n\ninterface ZoneLayoutProps {\n  projectId: string;\n}\n\nconst CABINET_STATUSES = [\n  { value: 'planned', label: 'Planned', color: 'bg-blue-100 text-blue-800' },\n  { value: 'installed', label: 'Installed', color: 'bg-green-100 text-green-800' },\n  { value: 'active', label: 'Active', color: 'bg-green-100 text-green-800' },\n  { value: 'maintenance', label: 'Maintenance', color: 'bg-yellow-100 text-yellow-800' },\n];\n\nconst CONSTRAINT_TYPES = [\n  { value: 'road_work', label: 'Road Work', description: 'Traffic-related restrictions', icon: Construction },\n  { value: 'power_lines', label: 'Power Lines', description: 'High voltage lines and transformers', icon: AlertTriangle },\n  { value: 'utilities', label: 'Water/Sewer', description: 'Existing utility networks', icon: Package },\n  { value: 'vegetation', label: 'Green Areas', description: 'Trees and protected areas', icon: Package },\n  { value: 'buildings', label: 'Existing Buildings', description: 'Buildings and structures', icon: Package },\n  { value: 'road_crossing', label: 'Road Crossings', description: 'Roadways and sidewalks', icon: MapPin },\n  { value: 'telecom', label: 'Telecom', description: 'Existing cable networks', icon: Router },\n  { value: 'underground', label: 'Underground', description: 'Subway, underground passages', icon: Package },\n];\n\nexport default function ZoneLayout({ projectId }: ZoneLayoutProps) {\n  const { data: cabinets, isLoading: cabinetsLoading } = useCabinets(projectId);\n  const createCabinetMutation = useCreateCabinet();\n  const updateCabinetMutation = useUpdateCabinet();\n  const deleteCabinetMutation = useDeleteCabinet();\n\n  const [showCabinetForm, setShowCabinetForm] = useState(false);\n  const [showConstraintForm, setShowConstraintForm] = useState(false);\n  const [editingCabinetId, setEditingCabinetId] = useState<string | null>(null);\n  const [cabinetFormData, setCabinetFormData] = useState({\n    code: '',\n    name: '',\n    address: '',\n    notes: '',\n  });\n\n  const [constraintFormData, setConstraintFormData] = useState({\n    type: '',\n    severity: '',\n    location: '',\n    description: '',\n  });\n\n  const [savedConstraints, setSavedConstraints] = useState<Array<{\n    id: string;\n    type: string;\n    severity: string;\n    location: string;\n    description: string;\n    createdAt: string;\n  }>>([]);\n\n  const handleSubmitCabinet = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!cabinetFormData.code || !cabinetFormData.name) {\n      toast.error('Please fill in all required fields');\n      return;\n    }\n\n    try {\n      if (editingCabinetId) {\n        // Update existing cabinet\n        await updateCabinetMutation.mutateAsync({\n          id: editingCabinetId,\n          ...cabinetFormData,\n        });\n        setEditingCabinetId(null);\n      } else {\n        // Create new cabinet\n        await createCabinetMutation.mutateAsync({\n          project_id: projectId,\n          ...cabinetFormData,\n        });\n      }\n\n      // Reset form\n      setCabinetFormData({\n        code: '',\n        name: '',\n        address: '',\n        notes: '',\n      });\n      setShowCabinetForm(false);\n    } catch (error) {\n      // Error is handled by the mutation\n    }\n  };\n\n  const handleEditCabinet = (cabinet: any) => {\n    setCabinetFormData({\n      code: cabinet.code,\n      name: cabinet.name,\n      address: cabinet.address || '',\n      notes: cabinet.notes || '',\n    });\n    setEditingCabinetId(cabinet.id);\n    setShowCabinetForm(true);\n  };\n\n  const handleDeleteCabinet = async (cabinetId: string, cabinetCode: string) => {\n    if (confirm(`Are you sure you want to delete cabinet \"${cabinetCode}\"? This will also delete all associated segments.`)) {\n      try {\n        await deleteCabinetMutation.mutateAsync(cabinetId);\n      } catch (error) {\n        // Error is handled by the mutation\n      }\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingCabinetId(null);\n    setCabinetFormData({\n      code: '',\n      name: '',\n      address: '',\n      notes: '',\n    });\n    setShowCabinetForm(false);\n  };\n\n  const handleSubmitConstraint = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!constraintFormData.type || !constraintFormData.severity || !constraintFormData.description) {\n      toast.error('Please fill in all required fields');\n      return;\n    }\n\n    try {\n      // Create new constraint object\n      const newConstraint = {\n        id: Date.now().toString(),\n        type: constraintFormData.type,\n        severity: constraintFormData.severity,\n        location: constraintFormData.location,\n        description: constraintFormData.description,\n        createdAt: new Date().toLocaleDateString()\n      };\n\n      // Add to saved constraints\n      setSavedConstraints(prev => [...prev, newConstraint]);\n\n      // TODO: API call to save constraint\n      console.log('Saving constraint:', constraintFormData);\n\n      // Reset form\n      setConstraintFormData({\n        type: '',\n        severity: '',\n        location: '',\n        description: '',\n      });\n      setShowConstraintForm(false);\n\n      toast.success('Project constraint added successfully!');\n    } catch (error) {\n      toast.error('Failed to add constraint');\n    }\n  };\n\n  const handleCancelConstraint = () => {\n    setConstraintFormData({\n      type: '',\n      severity: '',\n      location: '',\n      description: '',\n    });\n    setShowConstraintForm(false);\n  };\n\n  const handleDeleteConstraint = (id: string) => {\n    setSavedConstraints(prev => prev.filter(constraint => constraint.id !== id));\n    toast.success('Constraint removed successfully!');\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'low': return 'bg-green-100 text-green-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'high': return 'bg-orange-100 text-orange-800';\n      case 'critical': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusInfo = (status: string) => {\n    return CABINET_STATUSES.find(s => s.value === status) || {\n      label: status,\n      color: 'bg-gray-100 text-gray-800'\n    };\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Zone Layout Management</h3>\n          <p className=\"text-gray-600\">\n            Manage cabinets and project constraints\n          </p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"cabinets\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"cabinets\" className=\"flex items-center gap-2\">\n            <Package className=\"w-4 h-4\" />\n            NVT Points\n          </TabsTrigger>\n          <TabsTrigger value=\"constraints\" className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"w-4 h-4\" />\n            Constraints\n          </TabsTrigger>\n          <TabsTrigger value=\"installation\" className=\"flex items-center gap-2\">\n            <Construction className=\"w-4 h-4\" />\n            Installation\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Cabinets Tab */}\n        <TabsContent value=\"cabinets\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"text-md font-medium\">NVT Points (Network Termination)</h4>\n            <Button\n              onClick={() => setShowCabinetForm(!showCabinetForm)}\n              className=\"flex items-center gap-2\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Add NVT Point\n            </Button>\n          </div>\n\n          {/* Add Cabinet Form */}\n          {showCabinetForm && (\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  {editingCabinetId ? 'Edit NVT Point' : 'Add New NVT Point'}\n                </CardTitle>\n                <CardDescription>\n                  {editingCabinetId\n                    ? 'Update network termination point information'\n                    : 'Create a new network termination point for the project'\n                  }\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmitCabinet} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"code\">NVT Code *</Label>\n                      <Input\n                        id=\"code\"\n                        value={cabinetFormData.code}\n                        onChange={(e) => setCabinetFormData(prev => ({ ...prev, code: e.target.value }))}\n                        placeholder=\"9V1005\"\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"name\">Name *</Label>\n                      <Input\n                        id=\"name\"\n                        value={cabinetFormData.name}\n                        onChange={(e) => setCabinetFormData(prev => ({ ...prev, name: e.target.value }))}\n                        placeholder=\"Cabinet Entrance 1\"\n                        required\n                      />\n                    </div>\n\n                    <div className=\"md:col-span-2\">\n                      <Label htmlFor=\"address\">Address</Label>\n                      <Input\n                        id=\"address\"\n                        value={cabinetFormData.address}\n                        onChange={(e) => setCabinetFormData(prev => ({ ...prev, address: e.target.value }))}\n                        placeholder=\"Müllerstraße 1, 13353 Berlin\"\n                      />\n                    </div>\n\n                    <div className=\"md:col-span-2\">\n                      <Label htmlFor=\"notes\">Notes</Label>\n                      <Textarea\n                        id=\"notes\"\n                        value={cabinetFormData.notes}\n                        onChange={(e) => setCabinetFormData(prev => ({ ...prev, notes: e.target.value }))}\n                        placeholder=\"Additional information...\"\n                        rows={3}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      type=\"submit\"\n                      disabled={createCabinetMutation.isPending || updateCabinetMutation.isPending}\n                    >\n                      {editingCabinetId ? 'Update NVT Point' : 'Create NVT Point'}\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleCancelEdit}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Cabinets List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>NVT Points List</CardTitle>\n              <CardDescription>\n                {cabinets?.length || 0} NVT points configured\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {cabinetsLoading ? (\n                <div>Loading cabinets...</div>\n              ) : !cabinets || cabinets.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Router className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No NVT Points</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Add network termination points to get started.\n                  </p>\n                  <Button onClick={() => setShowCabinetForm(true)}>\n                    Add First NVT Point\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Code</TableHead>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Address</TableHead>\n                        <TableHead>Segments</TableHead>\n                        <TableHead>Total Length</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {cabinets.map((cabinet) => (\n                        <TableRow key={cabinet.id}>\n                          <TableCell className=\"font-medium\">\n                            {cabinet.code}\n                          </TableCell>\n                          <TableCell>{cabinet.name}</TableCell>\n                          <TableCell>\n                            {cabinet.address ? (\n                              <div className=\"flex items-center gap-2\">\n                                <MapPin className=\"w-4 h-4 text-gray-400\" />\n                                {cabinet.address}\n                              </div>\n                            ) : (\n                              <span className=\"text-gray-400\">-</span>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant=\"secondary\">\n                              {cabinet.segment_count || 0} segments\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {cabinet.total_length ? `${cabinet.total_length.toFixed(1)}m` : '0.0m'}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-1\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleEditCabinet(cabinet)}\n                                disabled={updateCabinetMutation.isPending}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleDeleteCabinet(cabinet.id, cabinet.code)}\n                                disabled={deleteCabinetMutation.isPending}\n                              >\n                                <Trash2 className=\"w-4 h-4 text-red-500\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n\n        {/* Constraints Tab */}\n        <TabsContent value=\"constraints\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"text-md font-medium\">Project Constraints & Obstacles</h4>\n            <Button\n              onClick={() => setShowConstraintForm(!showConstraintForm)}\n              className=\"flex items-center gap-2\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Add Constraint\n            </Button>\n          </div>\n\n          {/* Constraint Types Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Planned Constraint Types</CardTitle>\n              <CardDescription>\n                Common obstacles encountered during fiber optic installation\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {CONSTRAINT_TYPES.map((constraint) => {\n                  const Icon = constraint.icon;\n                  return (\n                    <div key={constraint.value} className=\"flex items-start gap-3 p-3 border rounded-lg\">\n                      <Icon className=\"w-5 h-5 text-blue-500 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <div className=\"font-medium\">{constraint.label}</div>\n                        <div className=\"text-sm text-gray-600\">{constraint.description}</div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Add Constraint Form */}\n          {showConstraintForm && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Add Project Constraint</CardTitle>\n                <CardDescription>\n                  Document obstacles and restrictions for planning\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmitConstraint} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"constraint-type\">Constraint Type *</Label>\n                      <Select\n                        value={constraintFormData.type}\n                        onValueChange={(value) => setConstraintFormData(prev => ({ ...prev, type: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select constraint type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {CONSTRAINT_TYPES.map((type) => {\n                            const Icon = type.icon;\n                            return (\n                              <SelectItem key={type.value} value={type.value}>\n                                <div className=\"flex items-center gap-2\">\n                                  <Icon className=\"w-4 h-4\" />\n                                  {type.label}\n                                </div>\n                              </SelectItem>\n                            );\n                          })}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"severity\">Criticality *</Label>\n                      <Select\n                        value={constraintFormData.severity}\n                        onValueChange={(value) => setConstraintFormData(prev => ({ ...prev, severity: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select severity\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"low\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                              Low\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"medium\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                              Medium\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"high\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-3 h-3 bg-orange-500 rounded-full\"></div>\n                              High\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"critical\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                              Critical\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"md:col-span-2\">\n                      <Label htmlFor=\"location\">Location</Label>\n                      <Input\n                        id=\"location\"\n                        value={constraintFormData.location}\n                        onChange={(e) => setConstraintFormData(prev => ({ ...prev, location: e.target.value }))}\n                        placeholder=\"Specific location or address\"\n                      />\n                    </div>\n\n                    <div className=\"md:col-span-2\">\n                      <Label htmlFor=\"description\">Constraint Description *</Label>\n                      <Textarea\n                        id=\"description\"\n                        value={constraintFormData.description}\n                        onChange={(e) => setConstraintFormData(prev => ({ ...prev, description: e.target.value }))}\n                        placeholder=\"Describe the constraint and its impact...\"\n                        rows={4}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button type=\"submit\">\n                      Add Constraint\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleCancelConstraint}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Saved Constraints Table */}\n          {savedConstraints.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Saved Project Constraints</CardTitle>\n                <CardDescription>\n                  {savedConstraints.length} constraint{savedConstraints.length !== 1 ? 's' : ''} documented for this project\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Type</TableHead>\n                        <TableHead>Severity</TableHead>\n                        <TableHead>Location</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead>Added</TableHead>\n                        <TableHead className=\"w-[50px]\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {savedConstraints.map((constraint) => {\n                        const constraintType = CONSTRAINT_TYPES.find(type => type.value === constraint.type);\n                        const Icon = constraintType?.icon || Package;\n\n                        return (\n                          <TableRow key={constraint.id}>\n                            <TableCell>\n                              <div className=\"flex items-center gap-2\">\n                                <Icon className=\"w-4 h-4 text-blue-500\" />\n                                {constraintType?.label || constraint.type}\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant=\"secondary\" className={getSeverityColor(constraint.severity)}>\n                                {constraint.severity.charAt(0).toUpperCase() + constraint.severity.slice(1)}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              {constraint.location || <span className=\"text-gray-400\">-</span>}\n                            </TableCell>\n                            <TableCell className=\"max-w-xs\">\n                              <div className=\"truncate\" title={constraint.description}>\n                                {constraint.description}\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"text-sm text-gray-500\">\n                              {constraint.createdAt}\n                            </TableCell>\n                            <TableCell>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleDeleteConstraint(constraint.id)}\n                                className=\"text-red-500 hover:text-red-700\"\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Installation Plans Tab */}\n        <TabsContent value=\"installation\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Cabinet Installation Plans</CardTitle>\n              <CardDescription>\n                Installation procedures for new cabinet enclosures\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Lower Part */}\n                <div>\n                  <h4 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                    <Construction className=\"w-5 h-5\" />\n                    Lower Cabinet Part\n                  </h4>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h5 className=\"font-medium flex items-center gap-2\">\n                        <MapPin className=\"w-4 h-4 text-blue-500\" />\n                        1. Installation Site Marking\n                      </h5>\n                      <ul className=\"text-sm text-gray-600 ml-6 space-y-1\">\n                        <li>• Determine exact location per project</li>\n                        <li>• Check for absence of utility lines</li>\n                        <li>• Mark excavation outline</li>\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium flex items-center gap-2\">\n                        <Construction className=\"w-4 h-4 text-orange-500\" />\n                        2. Earthwork\n                      </h5>\n                      <ul className=\"text-sm text-gray-600 ml-6 space-y-1\">\n                        <li>• Excavate pit according to cabinet size</li>\n                        <li>• Depth: typically 1.2-1.5m</li>\n                        <li>• Install formwork if needed</li>\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium flex items-center gap-2\">\n                        <Router className=\"w-4 h-4 text-green-500\" />\n                        3. Cable Routing\n                      </h5>\n                      <ul className=\"text-sm text-gray-600 ml-6 space-y-1\">\n                        <li>• Route incoming cables to installation site</li>\n                        <li>• Prepare cable penetrations</li>\n                        <li>• Ensure watertight sealing</li>\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium flex items-center gap-2\">\n                        <Package className=\"w-4 h-4 text-purple-500\" />\n                        4. Lower Part Installation\n                      </h5>\n                      <ul className=\"text-sm text-gray-600 ml-6 space-y-1\">\n                        <li>• Install cabinet base</li>\n                        <li>• Level with spirit level</li>\n                        <li>• Backfill and compact</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Upper Part */}\n                <div>\n                  <h4 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                    <Router className=\"w-5 h-5\" />\n                    Upper Cabinet Part\n                  </h4>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h5 className=\"font-medium flex items-center gap-2\">\n                        <FileText className=\"w-4 h-4 text-blue-500\" />\n                        1. Preparation per Plans\n                      </h5>\n                      <ul className=\"text-sm text-gray-600 ml-6 space-y-1\">\n                        <li>• Study connection diagram</li>\n                        <li>• Prepare required materials</li>\n                        <li>• Check equipment completeness</li>\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium flex items-center gap-2\">\n                        <Router className=\"w-4 h-4 text-green-500\" />\n                        2. Connection Assembly\n                      </h5>\n                      <ul className=\"text-sm text-gray-600 ml-6 space-y-1\">\n                        <li>• Route all cables into cabinet</li>\n                        <li>• Perform fiber splicing per diagram</li>\n                        <li>• Install splitters and patch panels</li>\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium flex items-center gap-2\">\n                        <Package className=\"w-4 h-4 text-purple-500\" />\n                        3. Equipment Connection\n                      </h5>\n                      <ul className=\"text-sm text-gray-600 ml-6 space-y-1\">\n                        <li>• Install active equipment</li>\n                        <li>• Connect power supply</li>\n                        <li>• Configure equipment</li>\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium flex items-center gap-2\">\n                        <Ruler className=\"w-4 h-4 text-orange-500\" />\n                        4. Testing & Completion\n                      </h5>\n                      <ul className=\"text-sm text-gray-600 ml-6 space-y-1\">\n                        <li>• Test all connections</li>\n                        <li>• Measure line attenuation</li>\n                        <li>• Close and seal cabinet</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* File Upload Section */}\n              <div className=\"mt-8 border-t pt-6\">\n                <h4 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                  <FileText className=\"w-5 h-5\" />\n                  Cabinet Plans Upload\n                </h4>\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Upload Cabinet Plans</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Drag and drop files here or click to browse\n                  </p>\n                  <Button variant=\"outline\">\n                    Select Files\n                  </Button>\n                  <p className=\"text-sm text-gray-500 mt-2\">\n                    Supported formats: PDF, DWG, PNG, JPG, JPEG\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}