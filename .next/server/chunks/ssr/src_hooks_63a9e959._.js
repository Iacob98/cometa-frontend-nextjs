module.exports=[7671,a=>{"use strict";a.s(["invalidateAllMaterialQueries",()=>k,"useAdjustStock",()=>t,"useAssignMaterialToProject",()=>w,"useCreateMaterial",()=>q,"useDeleteMaterial",()=>s,"useDeleteMaterialAssignment",()=>y,"useLowStockMaterials",()=>n,"useMaterial",()=>m,"useMaterials",()=>l,"useOrders",()=>v,"useSuppliers",()=>u,"useUnifiedProjectMaterials",()=>p,"useUnifiedWarehouseMaterials",()=>o,"useUpdateMaterial",()=>r,"useUpdateMaterialAssignment",()=>x]);var b=a.i(33217),c=a.i(70025),d=a.i(37927),e=a.i(23292),f=a.i(91938);let g={all:["materials"],lists:()=>[...g.all,"list"],list:a=>[...g.lists(),a],details:()=>[...g.all,"detail"],detail:a=>[...g.details(),a],lowStock:()=>[...g.all,"low-stock"]},h={all:["suppliers"],lists:()=>[...h.all,"list"],details:()=>[...h.all,"detail"],detail:a=>[...h.details(),a]},i={all:["allocations"],lists:()=>[...i.all,"list"],list:a=>[...i.lists(),a],details:()=>[...i.all,"detail"],detail:a=>[...i.details(),a]},j={all:["orders"],lists:()=>[...j.all,"list"],list:a=>[...j.lists(),a],details:()=>[...j.all,"detail"],detail:a=>[...j.details(),a]};function k(a){a.invalidateQueries({queryKey:g.all}),a.invalidateQueries({queryKey:i.all}),a.invalidateQueries({queryKey:j.all}),a.invalidateQueries({queryKey:[...g.all,"unified-warehouse"]}),a.invalidateQueries({queryKey:[...g.all,"allocation-targets"]}),a.refetchQueries({queryKey:[...g.all,"unified-warehouse"],type:"active"})}function l(a){return(0,b.useQuery)({queryKey:g.list(a||{}),queryFn:()=>f.materialsApi.getMaterials(a),staleTime:12e4})}function m(a){return(0,b.useQuery)({queryKey:g.detail(a),queryFn:()=>f.materialsApi.getMaterial(a),enabled:!!a,staleTime:3e5})}function n(){return(0,b.useQuery)({queryKey:g.lowStock(),queryFn:async()=>{let a=await fetch("/api/materials/low-stock");if(!a.ok)throw Error("Failed to fetch low stock materials");return(await a.json()).materials||[]},staleTime:12e4})}function o(){return(0,b.useQuery)({queryKey:[...g.all,"unified-warehouse"],queryFn:async()=>{let a=await fetch("/api/materials/unified?view=warehouse");if(!a.ok)throw Error("Failed to fetch warehouse materials");return(await a.json()).materials||[]},staleTime:3e4,gcTime:3e5,refetchOnWindowFocus:!0,refetchInterval:6e4})}function p(a){return(0,b.useQuery)({queryKey:[...i.all,"project",a,"unified"],queryFn:async()=>{let b=await fetch(`/api/materials/unified?view=project_allocations&project_id=${a}`);if(!b.ok)throw Error("Failed to fetch project materials");let c=await b.json();return{materials:c.materials||[],summary:c.allocation_summary}},enabled:!!a,staleTime:6e4,gcTime:3e5})}function q(){let a=(0,d.useQueryClient)();return(0,c.useMutation)({mutationFn:a=>f.materialsApi.createMaterial(a),onSuccess:b=>{a.invalidateQueries({queryKey:g.lists()}),a.setQueryData(g.detail(b.id),b),e.toast.success("Material created successfully")},onError:a=>{e.toast.error(`Failed to create material: ${a.message}`)}})}function r(){let a=(0,d.useQueryClient)();return(0,c.useMutation)({mutationFn:({id:a,data:b})=>f.materialsApi.updateMaterial(a,b),onMutate:async({id:b,data:c})=>{await a.cancelQueries({queryKey:g.detail(b)});let d=a.getQueryData(g.detail(b));return a.setQueryData(g.detail(b),a=>a?{...a,...c}:a),{previousMaterial:d}},onError:(b,{id:c},d)=>{d?.previousMaterial&&a.setQueryData(g.detail(c),d.previousMaterial),e.toast.error(`Failed to update material: ${b.message}`)},onSuccess:()=>{a.invalidateQueries({queryKey:g.lists()}),a.invalidateQueries({queryKey:g.lowStock()}),e.toast.success("Material updated successfully")},onSettled:(b,c,{id:d})=>{a.invalidateQueries({queryKey:g.detail(d)})}})}function s(){let a=(0,d.useQueryClient)();return(0,c.useMutation)({mutationFn:a=>f.materialsApi.deleteMaterial(a),onSuccess:(b,c)=>{a.removeQueries({queryKey:g.detail(c)}),a.invalidateQueries({queryKey:g.lists()}),a.invalidateQueries({queryKey:g.lowStock()}),e.toast.success("Material deleted successfully")},onError:a=>{e.toast.error(`Failed to delete material: ${a.message}`)}})}function t(){let a=(0,d.useQueryClient)();return(0,c.useMutation)({mutationFn:({id:a,adjustment:b})=>f.materialsApi.adjustStock(a,b),onSuccess:b=>{a.setQueryData(g.detail(b.id),b),a.invalidateQueries({queryKey:g.lists()}),a.invalidateQueries({queryKey:g.lowStock()}),a.invalidateQueries({queryKey:[...g.all,"unified-warehouse"]}),a.invalidateQueries({queryKey:[...g.all,"allocation-targets"]}),e.toast.success("Stock adjusted successfully")},onError:a=>{e.toast.error(`Failed to adjust stock: ${a.message}`)}})}function u(){return(0,b.useQuery)({queryKey:h.lists(),queryFn:()=>f.suppliersApi.getSuppliers(),staleTime:6e5})}function v(a){return(0,b.useQuery)({queryKey:j.list(a||{}),queryFn:()=>f.materialOrdersApi.getOrders(a),staleTime:18e4})}function w(){let a=(0,d.useQueryClient)();return(0,c.useMutation)({mutationFn:async a=>{let b=await fetch("/api/materials/assignments",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(!b.ok)throw Error((await b.json()).message||"Failed to assign material");return b.json()},onSuccess:(b,c)=>{a.invalidateQueries({queryKey:[...g.all,"project",c.project_id]}),a.invalidateQueries({queryKey:[...i.all,"project",c.project_id,"unified"]}),a.invalidateQueries({queryKey:[...g.all,"warehouse"]}),a.invalidateQueries({queryKey:[...g.all,"unified-warehouse"]}),a.invalidateQueries({queryKey:[...g.all,"allocation-targets"]}),a.refetchQueries({queryKey:[...i.all,"project",c.project_id,"unified"]}),a.refetchQueries({queryKey:[...g.all,"unified-warehouse"]}),e.toast.success("Material assigned successfully")},onError:a=>{e.toast.error(`Failed to assign material: ${a.message}`)}})}function x(){let a=(0,d.useQueryClient)();return(0,c.useMutation)({mutationFn:async a=>{let{assignment_id:b,...c}=a,d=await fetch(`/api/materials/assignments/${b}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(c)});if(!d.ok)throw Error((await d.json()).message||"Failed to update material assignment");return d.json()},onSuccess:(b,c)=>{a.invalidateQueries({predicate:a=>"materials"===a.queryKey[0]&&"project"===a.queryKey[1]}),a.invalidateQueries({predicate:a=>a.queryKey.includes("unified")}),a.invalidateQueries({queryKey:[...g.all,"warehouse"]}),a.invalidateQueries({queryKey:[...g.all,"unified-warehouse"]}),a.invalidateQueries({queryKey:[...g.all,"allocation-targets"]}),e.toast.success("Material assignment updated successfully")},onError:a=>{e.toast.error(`Failed to update material assignment: ${a.message}`)}})}function y(){let a=(0,d.useQueryClient)();return(0,c.useMutation)({mutationFn:async a=>{let b=await fetch(`/api/materials/assignments/${a}`,{method:"DELETE"});if(!b.ok)throw Error((await b.json()).message||"Failed to delete material assignment");return b.json()},onSuccess:(b,c)=>{a.invalidateQueries({predicate:a=>"materials"===a.queryKey[0]&&"project"===a.queryKey[1]}),a.invalidateQueries({predicate:a=>a.queryKey.includes("unified")}),a.invalidateQueries({queryKey:[...g.all,"warehouse"]}),a.invalidateQueries({queryKey:[...g.all,"unified-warehouse"]}),a.invalidateQueries({queryKey:[...g.all,"allocation-targets"]}),e.toast.success("Material assignment deleted successfully")},onError:a=>{e.toast.error(`Failed to delete material assignment: ${a.message}`)}})}},40533,a=>{"use strict";a.s(["useAllocations",()=>h,"useCreateAllocation",()=>i]);var b=a.i(70025),c=a.i(33217),d=a.i(37927),e=a.i(23292),f=a.i(7671);let g={getAllocations:async a=>{let b=new URLSearchParams;a?.project_id&&b.append("project_id",a.project_id),a?.crew_id&&b.append("crew_id",a.crew_id),a?.status&&b.append("status",a.status),a?.material_id&&b.append("material_id",a.material_id);let c=`/api/materials/allocations${b.toString()?`?${b.toString()}`:""}`,d=await fetch(c);if(!d.ok)throw Error("Failed to fetch allocations");return(await d.json()).allocations||[]},createAllocation:async a=>{let b=await fetch("/api/materials/allocations",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(!b.ok)throw Error((await b.json()).error||"Failed to create allocation");return b.json()}};function h(a){return(0,c.useQuery)({queryKey:["allocations",a],queryFn:()=>g.getAllocations(a)})}function i(){let a=(0,d.useQueryClient)();return(0,b.useMutation)({mutationFn:g.createAllocation,onSuccess:b=>{(0,f.invalidateAllMaterialQueries)(a),a.invalidateQueries({queryKey:["allocations","project"]}),e.toast.success(b.message||"Allocation created successfully")},onError:a=>{e.toast.error(a.message)}})}}];

//# sourceMappingURL=src_hooks_63a9e959._.js.map