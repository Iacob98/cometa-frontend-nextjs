{"version":3,"sources":["turbopack:///[project]/src/hooks/use-materials.ts","turbopack:///[project]/src/hooks/use-allocations.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport {\n  materialsApi,\n  suppliersApi,\n  materialAllocationsApi,\n  materialOrdersApi,\n  type Material,\n  type Supplier,\n  type MaterialAllocation,\n  type MaterialOrder,\n  type MaterialFilters,\n  type AllocationFilters,\n  type OrderFilters,\n  type AllocationRequest,\n  type MaterialOrderStatus,\n  type PaginatedResponse,\n} from \"@/lib/api-client\";\n\n// Query keys\nexport const materialKeys = {\n  all: [\"materials\"] as const,\n  lists: () => [...materialKeys.all, \"list\"] as const,\n  list: (filters: MaterialFilters) => [...materialKeys.lists(), filters] as const,\n  details: () => [...materialKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...materialKeys.details(), id] as const,\n  lowStock: () => [...materialKeys.all, \"low-stock\"] as const,\n};\n\nexport const supplierKeys = {\n  all: [\"suppliers\"] as const,\n  lists: () => [...supplierKeys.all, \"list\"] as const,\n  details: () => [...supplierKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...supplierKeys.details(), id] as const,\n};\n\nexport const allocationKeys = {\n  all: [\"allocations\"] as const,\n  lists: () => [...allocationKeys.all, \"list\"] as const,\n  list: (filters: AllocationFilters) => [...allocationKeys.lists(), filters] as const,\n  details: () => [...allocationKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...allocationKeys.details(), id] as const,\n};\n\nexport const orderKeys = {\n  all: [\"orders\"] as const,\n  lists: () => [...orderKeys.all, \"list\"] as const,\n  list: (filters: OrderFilters) => [...orderKeys.lists(), filters] as const,\n  details: () => [...orderKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...orderKeys.details(), id] as const,\n};\n\n// Centralized cache invalidation function for all material-related queries\nexport function invalidateAllMaterialQueries(queryClient: any) {\n  // Invalidate all material queries\n  queryClient.invalidateQueries({ queryKey: materialKeys.all });\n  queryClient.invalidateQueries({ queryKey: allocationKeys.all });\n  queryClient.invalidateQueries({ queryKey: orderKeys.all });\n\n  // Invalidate unified material views\n  queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n  queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n\n  // Force refetch critical queries\n  queryClient.refetchQueries({\n    queryKey: [...materialKeys.all, \"unified-warehouse\"],\n    type: 'active'\n  });\n}\n\n// Unified Material Hooks with consistent data source\nexport function useMaterials(filters?: MaterialFilters) {\n  return useQuery({\n    queryKey: materialKeys.list(filters || {}),\n    queryFn: () => materialsApi.getMaterials(filters),\n    staleTime: 2 * 60 * 1000, // 2 minutes - shorter for inventory accuracy\n  });\n}\n\nexport function useMaterial(id: string) {\n  return useQuery({\n    queryKey: materialKeys.detail(id),\n    queryFn: () => materialsApi.getMaterial(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  });\n}\n\nexport function useLowStockMaterials() {\n  return useQuery({\n    queryKey: materialKeys.lowStock(),\n    queryFn: async () => {\n      const response = await fetch('/api/materials/low-stock');\n      if (!response.ok) {\n        throw new Error('Failed to fetch low stock materials');\n      }\n      const data = await response.json();\n      return data.materials || []; // Extract materials array from API response\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes - more frequent updates for stock alerts\n  });\n}\n\n// Unified Warehouse Materials Hook - Single source of truth for inventory\nexport function useUnifiedWarehouseMaterials() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"unified-warehouse\"],\n    queryFn: async () => {\n      const response = await fetch('/api/materials/unified?view=warehouse');\n      if (!response.ok) {\n        throw new Error('Failed to fetch warehouse materials');\n      }\n      const data = await response.json();\n      return data.materials || [];\n    },\n    staleTime: 30 * 1000, // 30 seconds for faster updates\n    gcTime: 5 * 60 * 1000, // Keep in cache for 5 minutes\n    refetchOnWindowFocus: true, // Refetch when user returns to window\n    refetchInterval: 60 * 1000, // Auto-refetch every minute\n  });\n}\n\n// Project Material Allocations Hook with unified data\nexport function useUnifiedProjectMaterials(projectId: string) {\n  return useQuery({\n    queryKey: [...allocationKeys.all, \"project\", projectId, \"unified\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/materials/unified?view=project_allocations&project_id=${projectId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch project materials');\n      }\n      const data = await response.json();\n      return { materials: data.materials || [], summary: data.allocation_summary };\n    },\n    enabled: !!projectId,\n    staleTime: 1 * 60 * 1000, // 1 minute\n    gcTime: 5 * 60 * 1000,\n  });\n}\n\n// Material Allocation Targets Hook\nexport function useMaterialAllocationTargets() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"allocation-targets\"],\n    queryFn: async () => {\n      const response = await fetch('/api/materials/unified?view=allocation_targets');\n      if (!response.ok) {\n        throw new Error('Failed to fetch allocation targets');\n      }\n      const data = await response.json();\n      return data.materials || [];\n    },\n    staleTime: 30 * 1000, // 30 seconds for responsive allocation targets\n    refetchOnWindowFocus: true,\n  });\n}\n\nexport function useCreateMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<Material>) => materialsApi.createMaterial(data),\n    onSuccess: (newMaterial) => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.setQueryData(materialKeys.detail(newMaterial.id), newMaterial);\n      toast.success(\"Material created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create material: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Material> }) =>\n      materialsApi.updateMaterial(id, data),\n    onMutate: async ({ id, data }) => {\n      await queryClient.cancelQueries({ queryKey: materialKeys.detail(id) });\n      const previousMaterial = queryClient.getQueryData(materialKeys.detail(id));\n\n      queryClient.setQueryData(materialKeys.detail(id), (old: Material | undefined) => {\n        if (!old) return old;\n        return { ...old, ...data };\n      });\n\n      return { previousMaterial };\n    },\n    onError: (error, { id }, context) => {\n      if (context?.previousMaterial) {\n        queryClient.setQueryData(materialKeys.detail(id), context.previousMaterial);\n      }\n      toast.error(`Failed to update material: ${error.message}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      toast.success(\"Material updated successfully\");\n    },\n    onSettled: (data, error, { id }) => {\n      queryClient.invalidateQueries({ queryKey: materialKeys.detail(id) });\n    },\n  });\n}\n\nexport function useDeleteMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => materialsApi.deleteMaterial(id),\n    onSuccess: (_, deletedId) => {\n      queryClient.removeQueries({ queryKey: materialKeys.detail(deletedId) });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      toast.success(\"Material deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete material: ${error.message}`);\n    },\n  });\n}\n\nexport function useAdjustStock() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, adjustment }: { id: string; adjustment: { quantity: number; reason: string } }) =>\n      materialsApi.adjustStock(id, adjustment),\n    onSuccess: (updatedMaterial) => {\n      queryClient.setQueryData(materialKeys.detail(updatedMaterial.id), updatedMaterial);\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      // Invalidate unified warehouse and allocation views\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n      toast.success(\"Stock adjusted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to adjust stock: ${error.message}`);\n    },\n  });\n}\n\n// Material Consumption Hook\nexport function useConsumeMaterial() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: {\n      allocation_id: string;\n      consumed_qty: number;\n      work_entry_id?: string;\n      notes?: string\n    }) => {\n      return fetch('/api/materials/consume', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      }).then(response => {\n        if (!response.ok) {\n          return response.json().then(err => Promise.reject(new Error(err.error || 'Failed to consume material')));\n        }\n        return response.json();\n      });\n    },\n    onSuccess: (result, variables) => {\n      // Invalidate all material-related queries to ensure consistency\n      queryClient.invalidateQueries({ queryKey: materialKeys.all });\n      queryClient.invalidateQueries({ queryKey: [...allocationKeys.all] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"unified-warehouse\"] });\n      queryClient.invalidateQueries({ queryKey: [...materialKeys.all, \"allocation-targets\"] });\n\n      // If we know the project, invalidate project-specific queries\n      if (variables.work_entry_id) {\n        queryClient.invalidateQueries({ queryKey: [...allocationKeys.all, \"project\"] });\n      }\n\n      toast.success(result.message || \"Material consumed successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to consume material: ${error.message}`);\n    },\n  });\n}\n\n// Supplier Hooks\nexport function useSuppliers() {\n  return useQuery({\n    queryKey: supplierKeys.lists(),\n    queryFn: () => suppliersApi.getSuppliers(),\n    staleTime: 10 * 60 * 1000, // 10 minutes - suppliers change less frequently\n  });\n}\n\nexport function useSupplier(id: string) {\n  return useQuery({\n    queryKey: supplierKeys.detail(id),\n    queryFn: () => suppliersApi.getSupplier(id),\n    enabled: !!id,\n    staleTime: 10 * 60 * 1000,\n  });\n}\n\nexport function useCreateSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<Supplier>) => suppliersApi.createSupplier(data),\n    onSuccess: (newSupplier) => {\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      queryClient.setQueryData(supplierKeys.detail(newSupplier.id), newSupplier);\n      toast.success(\"Supplier created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create supplier: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Supplier> }) =>\n      suppliersApi.updateSupplier(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      toast.success(\"Supplier updated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to update supplier: ${error.message}`);\n    },\n  });\n}\n\nexport function useDeleteSupplier() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => suppliersApi.deleteSupplier(id),\n    onSuccess: (_, deletedId) => {\n      queryClient.removeQueries({ queryKey: supplierKeys.detail(deletedId) });\n      queryClient.invalidateQueries({ queryKey: supplierKeys.lists() });\n      toast.success(\"Supplier deleted successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete supplier: ${error.message}`);\n    },\n  });\n}\n\n// Allocation Hooks\nexport function useAllocations(filters?: AllocationFilters) {\n  return useQuery({\n    queryKey: allocationKeys.list(filters || {}),\n    queryFn: () => materialAllocationsApi.getAllocations(filters),\n    staleTime: 2 * 60 * 1000, // 2 minutes - allocations change frequently\n  });\n}\n\nexport function useAllocation(id: string) {\n  return useQuery({\n    queryKey: allocationKeys.detail(id),\n    queryFn: () => materialAllocationsApi.getAllocation(id),\n    enabled: !!id,\n    staleTime: 2 * 60 * 1000,\n  });\n}\n\nexport function useCreateAllocation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: AllocationRequest) => materialAllocationsApi.createAllocation(data),\n    onSuccess: (newAllocation) => {\n      queryClient.invalidateQueries({ queryKey: allocationKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      queryClient.setQueryData(allocationKeys.detail(newAllocation.id), newAllocation);\n      toast.success(\"Material allocated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to allocate material: ${error.message}`);\n    },\n  });\n}\n\nexport function useRecordUsage() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, usage }: { id: string; usage: { used_qty: number; notes?: string } }) =>\n      materialAllocationsApi.recordUsage(id, usage),\n    onSuccess: (updatedAllocation) => {\n      queryClient.setQueryData(allocationKeys.detail(updatedAllocation.id), updatedAllocation);\n      queryClient.invalidateQueries({ queryKey: allocationKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n      toast.success(\"Usage recorded successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to record usage: ${error.message}`);\n    },\n  });\n}\n\n// Order Hooks\nexport function useOrders(filters?: OrderFilters) {\n  return useQuery({\n    queryKey: orderKeys.list(filters || {}),\n    queryFn: () => materialOrdersApi.getOrders(filters),\n    staleTime: 3 * 60 * 1000, // 3 minutes\n  });\n}\n\nexport function useOrder(id: string) {\n  return useQuery({\n    queryKey: orderKeys.detail(id),\n    queryFn: () => materialOrdersApi.getOrder(id),\n    enabled: !!id,\n    staleTime: 3 * 60 * 1000,\n  });\n}\n\nexport function useCreateOrder() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: Partial<MaterialOrder>) => materialOrdersApi.createOrder(data),\n    onSuccess: (newOrder) => {\n      queryClient.invalidateQueries({ queryKey: orderKeys.lists() });\n      queryClient.setQueryData(orderKeys.detail(newOrder.id), newOrder);\n      toast.success(\"Order created successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to create order: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateOrderStatus() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, status }: { id: string; status: MaterialOrderStatus }) =>\n      materialOrdersApi.updateOrderStatus(id, status),\n    onSuccess: (updatedOrder) => {\n      queryClient.setQueryData(orderKeys.detail(updatedOrder.id), updatedOrder);\n      queryClient.invalidateQueries({ queryKey: orderKeys.lists() });\n\n      // If order is delivered, update material stock levels\n      if (updatedOrder.status === \"delivered\") {\n        queryClient.invalidateQueries({ queryKey: materialKeys.lists() });\n        queryClient.invalidateQueries({ queryKey: materialKeys.lowStock() });\n      }\n\n      toast.success(\"Order status updated successfully\");\n    },\n    onError: (error) => {\n      toast.error(`Failed to update order status: ${error.message}`);\n    },\n  });\n}\n\n// Specialized hooks\nexport function useProjectAllocations(projectId: string) {\n  return useAllocations({ project_id: projectId });\n}\n\nexport function useTeamAllocations(teamId: string) {\n  return useAllocations({ team_id: teamId });\n}\n\nexport function usePendingOrders() {\n  return useOrders({ status: \"pending\" });\n}\n\nexport function useSupplierOrders(supplierId: string) {\n  return useOrders({ supplier_id: supplierId });\n}\n\n// Project Preparation specific hooks\nexport interface ProjectMaterial {\n  id: string;\n  material_id: string;\n  name: string;\n  sku?: string;\n  unit: string;\n  description?: string;\n  allocated_qty: number;\n  unit_price: number;\n  total_cost: number;\n  allocation_date: string;\n  return_date?: string;\n  status: 'allocated' | 'used' | 'returned' | 'cancelled';\n  notes?: string;\n  allocated_by_name?: string;\n}\n\nexport interface WarehouseMaterial {\n  id: string;\n  name: string;\n  sku?: string;\n  unit: string;\n  description?: string;\n  available_qty: number;\n  total_qty: number;\n  reserved_qty: number;\n  min_stock: number;\n  price: number;\n}\n\nexport interface ProjectMaterialsResponse {\n  materials: ProjectMaterial[];\n  summary: {\n    total_materials: number;\n    pending_count: number;\n    used_count: number;\n    total_cost: number;\n  };\n}\n\nexport interface MaterialAssignmentData {\n  project_id: string;\n  material_id: string;\n  quantity: number;\n  from_date: string;\n  to_date?: string;\n  notes?: string;\n}\n\nexport interface UpdateMaterialAssignmentData {\n  assignment_id: string;\n  quantity: number;\n  unit_price: number;\n  from_date: string;\n  to_date?: string;\n  notes?: string;\n}\n\nexport function useProjectMaterials(projectId: string) {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"project\", projectId],\n    queryFn: async (): Promise<ProjectMaterialsResponse> => {\n      const response = await fetch(`/api/materials/project/${projectId}`, {\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch project materials');\n      }\n      return response.json();\n    },\n    enabled: !!projectId,\n    staleTime: 0, // Force fresh data every time\n    gcTime: 0, // Don't keep old data in memory\n  });\n}\n\nexport function useWarehouseMaterials() {\n  return useQuery({\n    queryKey: [...materialKeys.all, \"warehouse\"],\n    queryFn: async (): Promise<WarehouseMaterial[]> => {\n      const response = await fetch('/api/materials/warehouse');\n      if (!response.ok) {\n        throw new Error('Failed to fetch warehouse materials');\n      }\n      return response.json();\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n}\n\nexport function useAssignMaterialToProject() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: MaterialAssignmentData) => {\n      const response = await fetch('/api/materials/assignments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to assign material');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate legacy project materials\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"project\", variables.project_id]\n      });\n\n      // Invalidate unified project materials\n      queryClient.invalidateQueries({\n        queryKey: [...allocationKeys.all, \"project\", variables.project_id, \"unified\"]\n      });\n\n      // Invalidate warehouse materials (stock has changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      // Invalidate unified warehouse materials\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      // Invalidate allocation targets (availability may have changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      // Force immediate refetch for real-time updates\n      queryClient.refetchQueries({\n        queryKey: [...allocationKeys.all, \"project\", variables.project_id, \"unified\"]\n      });\n\n      queryClient.refetchQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      toast.success('Material assigned successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to assign material: ${error.message}`);\n    },\n  });\n}\n\nexport function useUpdateMaterialAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: UpdateMaterialAssignmentData) => {\n      const { assignment_id, ...updateData } = data;\n      const response = await fetch(`/api/materials/assignments/${assignment_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update material assignment');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate legacy project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey[0] === \"materials\" &&\n                 query.queryKey[1] === \"project\";\n        }\n      });\n\n      // Invalidate unified project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey.includes(\"unified\");\n        }\n      });\n\n      // Invalidate warehouse and allocation targets (stock may have changed)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      toast.success('Material assignment updated successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to update material assignment: ${error.message}`);\n    },\n  });\n}\n\nexport function useDeleteMaterialAssignment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (assignmentId: string) => {\n      const response = await fetch(`/api/materials/assignments/${assignmentId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete material assignment');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, assignmentId) => {\n      // Invalidate all legacy project materials queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey[0] === \"materials\" &&\n                 query.queryKey[1] === \"project\";\n        }\n      });\n\n      // Invalidate all unified queries\n      queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey.includes(\"unified\");\n        }\n      });\n\n      // Invalidate warehouse materials (stock has been restored)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"warehouse\"]\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"unified-warehouse\"]\n      });\n\n      // Invalidate allocation targets (availability increased)\n      queryClient.invalidateQueries({\n        queryKey: [...materialKeys.all, \"allocation-targets\"]\n      });\n\n      toast.success('Material assignment deleted successfully');\n    },\n    onError: (error) => {\n      toast.error(`Failed to delete material assignment: ${error.message}`);\n    },\n  });\n}","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\nimport { invalidateAllMaterialQueries } from './use-materials';\n\nexport interface MaterialAllocation {\n  id: string;\n  material_id: string;\n  project_id?: string;\n  crew_id?: string;\n  quantity_allocated: number;\n  quantity_used: number;\n  quantity_remaining: number;\n  allocated_date: string;\n  return_date?: string;\n  status: 'allocated' | 'partially_used' | 'fully_used' | 'returned';\n  notes?: string;\n  allocated_by?: string;\n  material?: {\n    id: string;\n    name: string;\n    category: string;\n    unit: string;\n    unit_price_eur: number;\n    supplier_name: string;\n  };\n  project?: {\n    id: string;\n    name: string;\n    city: string;\n    address: string;\n  };\n  allocator?: {\n    id: string;\n    name: string;\n    first_name: string;\n    last_name: string;\n    email: string;\n    role: string;\n  };\n  total_value: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateAllocationData {\n  material_id: string;\n  project_id?: string;\n  crew_id?: string;\n  quantity_allocated: number;\n  allocated_date: string;\n  notes?: string;\n  allocated_by?: string;\n}\n\nexport interface UpdateAllocationData {\n  quantity_used?: number;\n  status?: string;\n  notes?: string;\n  return_date?: string;\n}\n\ninterface AllocationsFilters {\n  project_id?: string;\n  crew_id?: string;\n  status?: string;\n  material_id?: string;\n}\n\nconst api = {\n  getAllocations: async (filters?: AllocationsFilters): Promise<MaterialAllocation[]> => {\n    const params = new URLSearchParams();\n    if (filters?.project_id) params.append('project_id', filters.project_id);\n    if (filters?.crew_id) params.append('crew_id', filters.crew_id);\n    if (filters?.status) params.append('status', filters.status);\n    if (filters?.material_id) params.append('material_id', filters.material_id);\n\n    const url = `/api/materials/allocations${params.toString() ? `?${params.toString()}` : ''}`;\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch allocations');\n    }\n\n    const data = await response.json();\n    return data.allocations || [];\n  },\n\n  getAllocation: async (id: string): Promise<MaterialAllocation> => {\n    const response = await fetch(`/api/materials/allocations/${id}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch allocation');\n    }\n\n    return response.json();\n  },\n\n  createAllocation: async (data: CreateAllocationData): Promise<{ success: boolean; allocation_id: string; message: string }> => {\n    const response = await fetch('/api/materials/allocations', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create allocation');\n    }\n\n    return response.json();\n  },\n\n  updateAllocation: async (id: string, data: UpdateAllocationData): Promise<{ success: boolean }> => {\n    const response = await fetch(`/api/materials/allocations/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update allocation');\n    }\n\n    return response.json();\n  },\n\n  deleteAllocation: async (id: string): Promise<{ success: boolean }> => {\n    const response = await fetch(`/api/materials/allocations/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete allocation');\n    }\n\n    return response.json();\n  },\n};\n\nexport function useAllocations(filters?: AllocationsFilters) {\n  return useQuery({\n    queryKey: ['allocations', filters],\n    queryFn: () => api.getAllocations(filters),\n  });\n}\n\nexport function useAllocation(id: string) {\n  return useQuery({\n    queryKey: ['allocation', id],\n    queryFn: () => api.getAllocation(id),\n    enabled: !!id,\n  });\n}\n\nexport function useCreateAllocation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.createAllocation,\n    onSuccess: (data) => {\n      // Use centralized cache invalidation for consistency\n      invalidateAllMaterialQueries(queryClient);\n\n      // Invalidate project-specific allocation views\n      queryClient.invalidateQueries({ queryKey: ['allocations', 'project'] });\n\n      toast.success(data.message || 'Allocation created successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useUpdateAllocation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdateAllocationData }) =>\n      api.updateAllocation(id, data),\n    onSuccess: (_, { id }) => {\n      // Use centralized cache invalidation\n      invalidateAllMaterialQueries(queryClient);\n      queryClient.invalidateQueries({ queryKey: ['allocation', id] });\n\n      toast.success('Allocation updated successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}\n\nexport function useDeleteAllocation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: api.deleteAllocation,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['allocations'] });\n      queryClient.invalidateQueries({ queryKey: ['materials'] });\n      toast.success('Allocation deleted successfully');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n}"],"names":[],"mappings":"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"}