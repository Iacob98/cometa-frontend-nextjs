{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/lib/document-storage.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\n// Persistent storage directories\nconst STORAGE_DIR = path.join(process.cwd(), '.tmp', 'documents');\nconst METADATA_FILE = path.join(STORAGE_DIR, 'metadata.json');\n\n// Ensure storage directory exists\nif (!fs.existsSync(STORAGE_DIR)) {\n  fs.mkdirSync(STORAGE_DIR, { recursive: true });\n}\n\n// Load metadata from file or initialize empty\nlet uploadedDocuments: Record<string, any[]> = {};\ntry {\n  if (fs.existsSync(METADATA_FILE)) {\n    const data = fs.readFileSync(METADATA_FILE, 'utf8');\n    uploadedDocuments = JSON.parse(data);\n  }\n} catch (error) {\n  console.warn('Could not load document metadata:', error);\n  uploadedDocuments = {};\n}\n\n// Save metadata to file\nfunction saveMetadata() {\n  try {\n    fs.writeFileSync(METADATA_FILE, JSON.stringify(uploadedDocuments, null, 2));\n  } catch (error) {\n    console.error('Could not save document metadata:', error);\n  }\n}\n\n// Helper functions for document storage\nexport function storeDocument(userId: string, document: any) {\n  if (!uploadedDocuments[userId]) {\n    uploadedDocuments[userId] = [];\n  }\n  uploadedDocuments[userId].push(document);\n  saveMetadata(); // Save to file\n  console.log('📝 Document stored:', {\n    userId,\n    documentId: document.id,\n    fileName: document.file_name,\n    totalUserDocs: uploadedDocuments[userId].length\n  });\n}\n\nexport function storeFile(documentId: string, fileBuffer: Buffer) {\n  const filePath = path.join(STORAGE_DIR, `${documentId}.bin`);\n  try {\n    fs.writeFileSync(filePath, fileBuffer);\n    console.log('💾 File stored:', {\n      documentId,\n      fileSize: fileBuffer.length,\n      filePath\n    });\n  } catch (error) {\n    console.error('Error storing file:', error);\n  }\n}\n\nexport function getDocument(userId: string, documentId: string) {\n  const userDocuments = uploadedDocuments[userId] || [];\n  const document = userDocuments.find(doc => doc.id === documentId);\n  console.log('🔍 Get document:', {\n    userId,\n    documentId,\n    totalUserDocs: userDocuments.length,\n    found: !!document,\n    fileName: document?.file_name\n  });\n  return document;\n}\n\nexport function getFile(documentId: string) {\n  const filePath = path.join(STORAGE_DIR, `${documentId}.bin`);\n  try {\n    if (fs.existsSync(filePath)) {\n      const file = fs.readFileSync(filePath);\n      console.log('🔍 Get file:', {\n        documentId,\n        filePath,\n        found: true,\n        fileSize: file.length\n      });\n      return file;\n    } else {\n      console.log('🔍 Get file:', {\n        documentId,\n        filePath,\n        found: false,\n        fileSize: undefined\n      });\n      return null;\n    }\n  } catch (error) {\n    console.error('Error reading file:', error);\n    return null;\n  }\n}\n\nexport function deleteDocument(userId: string, documentId: string) {\n  const userDocuments = uploadedDocuments[userId] || [];\n  const documentIndex = userDocuments.findIndex(doc => doc.id === documentId);\n\n  if (documentIndex !== -1) {\n    const deletedDoc = userDocuments.splice(documentIndex, 1)[0];\n    saveMetadata(); // Save to file\n\n    // Also delete the file content\n    const filePath = path.join(STORAGE_DIR, `${documentId}.bin`);\n    try {\n      if (fs.existsSync(filePath)) {\n        fs.unlinkSync(filePath);\n      }\n    } catch (error) {\n      console.error('Error deleting file:', error);\n    }\n\n    return deletedDoc;\n  }\n\n  return null;\n}\n\nexport function getUserDocuments(userId: string) {\n  return uploadedDocuments[userId] || [];\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/users/%5Bid%5D/documents/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\nimport {\n  getUserDocuments,\n  storeDocument,\n  storeFile\n} from '@/lib/document-storage';\n\n// Service role client for bypassing RLS\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'User ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get documents from shared storage\n    const documents = getUserDocuments(id);\n\n    const categories = [\n      // Mock categories for testing - replace with actual database query when implemented\n      {\n        id: \"work_permit\",\n        code: \"WORK_PERMIT\",\n        name_en: \"Work Permit\",\n        name_ru: \"Разрешение на работу\",\n        name_de: \"Arbeitserlaubnis\",\n        required_for_work: true,\n        color: \"#22c55e\",\n        created_at: new Date().toISOString()\n      },\n      {\n        id: \"passport\",\n        code: \"PASSPORT\",\n        name_en: \"Passport\",\n        name_ru: \"Паспорт\",\n        name_de: \"Reisepass\",\n        required_for_work: true,\n        color: \"#3b82f6\",\n        created_at: new Date().toISOString()\n      },\n      {\n        id: \"driver_license\",\n        code: \"DRIVER_LICENSE\",\n        name_en: \"Driver's License\",\n        name_ru: \"Водительские права\",\n        name_de: \"Führerschein\",\n        required_for_work: false,\n        color: \"#f59e0b\",\n        created_at: new Date().toISOString()\n      },\n      {\n        id: \"medical_certificate\",\n        code: \"MEDICAL_CERT\",\n        name_en: \"Medical Certificate\",\n        name_ru: \"Медицинская справка\",\n        name_de: \"Ärztliches Attest\",\n        required_for_work: true,\n        color: \"#ef4444\",\n        created_at: new Date().toISOString()\n      },\n      {\n        id: \"contract\",\n        code: \"CONTRACT\",\n        name_en: \"Employment Contract\",\n        name_ru: \"Трудовой договор\",\n        name_de: \"Arbeitsvertrag\",\n        required_for_work: true,\n        color: \"#8b5cf6\",\n        created_at: new Date().toISOString()\n      }\n    ];\n\n    const stats = {\n      total: documents.length,\n      active: documents.filter(d => d.status === 'active').length,\n      expired: documents.filter(d => d.status === 'expired').length,\n      expiring_soon: documents.filter(d => d.status === 'expiring_soon').length\n    };\n\n    return NextResponse.json({\n      documents,\n      categories,\n      stats\n    });\n  } catch (error) {\n    console.error('User documents GET API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch user documents' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'User ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Parse the form data for file upload\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    const categoryId = formData.get('category_id') as string;\n    const documentNumber = formData.get('document_number') as string;\n    const issuingAuthority = formData.get('issuing_authority') as string;\n    const issueDate = formData.get('issue_date') as string;\n    const expiryDate = formData.get('expiry_date') as string;\n    const notes = formData.get('notes') as string;\n\n    // Log received file data for debugging\n    console.log('📄 API: Получен документ для загрузки:', {\n      fileName: file?.name,\n      fileSize: file?.size,\n      fileType: file?.type,\n      fileConstructor: file?.constructor?.name,\n      hasArrayBuffer: typeof file?.arrayBuffer === 'function',\n      hasStream: typeof file?.stream === 'function',\n      isFile: file instanceof File,\n      categoryId,\n      documentNumber,\n      issuingAuthority,\n      issueDate,\n      expiryDate,\n      notes,\n      userId: id\n    });\n\n    console.log('📋 API: Все FormData ключи:');\n    for (const [key, value] of formData.entries()) {\n      if (value instanceof File) {\n        console.log(`  ${key}: File(name=\"${value.name}\", size=${value.size}, type=\"${value.type}\")`);\n      } else {\n        console.log(`  ${key}: \"${value}\"`);\n      }\n    }\n\n    if (!file) {\n      return NextResponse.json(\n        { error: 'File is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!categoryId) {\n      return NextResponse.json(\n        { error: 'Category is required' },\n        { status: 400 }\n      );\n    }\n\n    // Convert file to buffer and store it\n    let fileBuffer: Buffer;\n    try {\n      // First try arrayBuffer method\n      if (file.arrayBuffer && typeof file.arrayBuffer === 'function') {\n        const arrayBuffer = await file.arrayBuffer();\n        fileBuffer = Buffer.from(arrayBuffer);\n      } else if (file.stream && typeof file.stream === 'function') {\n        // Fallback to stream method\n        const chunks: Uint8Array[] = [];\n        const reader = file.stream().getReader();\n\n        try {\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) break;\n            chunks.push(value);\n          }\n        } finally {\n          reader.releaseLock();\n        }\n\n        // Combine all chunks into a single buffer\n        const totalLength = chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n        const combined = new Uint8Array(totalLength);\n        let offset = 0;\n        for (const chunk of chunks) {\n          combined.set(chunk, offset);\n          offset += chunk.length;\n        }\n        fileBuffer = Buffer.from(combined);\n      } else {\n        // If neither method is available, try direct buffer conversion\n        if (file instanceof Buffer) {\n          fileBuffer = file;\n        } else if (file instanceof Uint8Array) {\n          fileBuffer = Buffer.from(file);\n        } else {\n          throw new Error('File object does not have supported read methods');\n        }\n      }\n    } catch (error) {\n      console.error('Error reading file content:', error);\n      return NextResponse.json(\n        { error: 'Failed to read file content' },\n        { status: 400 }\n      );\n    }\n\n    // Create document with proper category information\n    const documentId = `doc-${Date.now()}`;\n\n    // Store the actual file content\n    storeFile(documentId, fileBuffer);\n\n    // Define categories (same as in GET method)\n    const categories = [\n      // Mock categories for testing - replace with actual database query when implemented\n      {\n        id: \"work_permit\",\n        code: \"WORK_PERMIT\",\n        name_en: \"Work Permit\",\n        name_ru: \"Разрешение на работу\",\n        name_de: \"Arbeitserlaubnis\",\n        required_for_work: true,\n        color: \"#22c55e\",\n        created_at: new Date().toISOString()\n      },\n      {\n        id: \"passport\",\n        code: \"PASSPORT\",\n        name_en: \"Passport\",\n        name_ru: \"Паспорт\",\n        name_de: \"Reisepass\",\n        required_for_work: true,\n        color: \"#3b82f6\",\n        created_at: new Date().toISOString()\n      },\n      {\n        id: \"driver_license\",\n        code: \"DRIVER_LICENSE\",\n        name_en: \"Driver's License\",\n        name_ru: \"Водительские права\",\n        name_de: \"Führerschein\",\n        required_for_work: false,\n        color: \"#f59e0b\",\n        created_at: new Date().toISOString()\n      },\n      {\n        id: \"medical_certificate\",\n        code: \"MEDICAL_CERT\",\n        name_en: \"Medical Certificate\",\n        name_ru: \"Медицинская справка\",\n        name_de: \"Ärztliches Attest\",\n        required_for_work: true,\n        color: \"#ef4444\",\n        created_at: new Date().toISOString()\n      },\n      {\n        id: \"contract\",\n        code: \"CONTRACT\",\n        name_en: \"Employment Contract\",\n        name_ru: \"Трудовой договор\",\n        name_de: \"Arbeitsvertrag\",\n        required_for_work: true,\n        color: \"#8b5cf6\",\n        created_at: new Date().toISOString()\n      }\n    ];\n\n    // Find matching category\n    const matchingCategory = categories.find(cat => cat.id === categoryId);\n\n    const newDocument = {\n      id: documentId,\n      user_id: id,\n      category_id: categoryId,\n      document_number: documentNumber || '',\n      file_name: file.name,\n      file_size: file.size,\n      file_type: file.type,\n      file_url: `/api/users/${id}/documents/${documentId}/download`,\n      status: 'active',\n      notes: notes || '',\n      issuing_authority: issuingAuthority || '',\n      issue_date: issueDate || null,\n      expiry_date: expiryDate || null,\n      is_verified: false,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      category: matchingCategory || {\n        id: categoryId,\n        code: categoryId.toUpperCase(),\n        name_en: categoryId,\n        name_ru: categoryId,\n        name_de: categoryId,\n        required_for_work: false,\n        color: \"#6b7280\",\n        created_at: new Date().toISOString()\n      }\n    };\n\n    // Store document metadata\n    storeDocument(id, newDocument);\n\n    console.log('✅ Документ сохранен:', {\n      documentId: newDocument.id,\n      fileName: newDocument.file_name,\n      userId: id,\n      category: newDocument.category.name_ru || newDocument.category.name_en,\n      totalUserDocs: getUserDocuments(id).length\n    });\n\n    return NextResponse.json({\n      message: 'Document uploaded successfully',\n      document: newDocument\n    });\n  } catch (error) {\n    console.error('User documents POST API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to upload document' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}