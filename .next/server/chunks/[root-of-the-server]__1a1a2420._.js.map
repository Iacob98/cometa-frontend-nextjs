{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/projects/%5Bid%5D/documents/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: projectId } = await params;\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const per_page = parseInt(searchParams.get('per_page') || '20');\n    const offset = (page - 1) * per_page;\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get real documents from database\n    const { data: documents, error: documentsError } = await supabase\n      .from('documents')\n      .select(`\n        id,\n        filename,\n        original_filename,\n        file_type,\n        file_size,\n        document_type,\n        description,\n        upload_date,\n        uploaded_by,\n        is_active,\n        uploader:users!documents_uploaded_by_fkey(\n          id,\n          first_name,\n          last_name,\n          email\n        )\n      `)\n      .eq('project_id', projectId)\n      .eq('is_active', true)\n      .order('upload_date', { ascending: false })\n      .range(offset, offset + per_page - 1);\n\n    if (documentsError) {\n      console.error('Documents query error:', documentsError);\n      return NextResponse.json(\n        { error: 'Failed to fetch project documents' },\n        { status: 500 }\n      );\n    }\n\n    // Transform data for frontend compatibility\n    const transformedDocuments = (documents || []).map(doc => ({\n      id: doc.id,\n      project_id: projectId,\n      document_type: doc.document_type,\n      file_name: doc.original_filename || doc.filename,\n      file_path: `/documents/${doc.document_type}s/${doc.filename}`,\n      file_size: doc.file_size,\n      uploaded_at: doc.upload_date,\n      uploaded_by: doc.uploader?.email || null,\n      notes: doc.description || '',\n      status: doc.is_active ? 'active' : 'inactive',\n      uploaded_by_name: doc.uploader ? `${doc.uploader.first_name} ${doc.uploader.last_name}` : 'Unknown',\n      uploader_email: doc.uploader?.email || null\n    }));\n\n    // Get total count for pagination\n    const { count: totalCount, error: countError } = await supabase\n      .from('documents')\n      .select('*', { count: 'exact', head: true })\n      .eq('project_id', projectId)\n      .eq('is_active', true);\n\n    if (countError) {\n      console.error('Documents count query error:', countError);\n    }\n\n    // Calculate summary counts from real data\n    const documentCounts = {\n      document_count: totalCount || 0,\n      active_count: transformedDocuments.filter(d => d.status === 'active').length,\n      pending_count: transformedDocuments.filter(d => d.status === 'pending').length,\n      plans_count: transformedDocuments.filter(d => d.document_type === 'plan').length,\n      permits_count: transformedDocuments.filter(d => d.document_type === 'permit').length,\n      reports_count: transformedDocuments.filter(d => d.document_type === 'report').length,\n      photos_count: transformedDocuments.filter(d => d.document_type === 'photo').length\n    };\n\n    // Create categories for frontend compatibility\n    const categories = [\n      {\n        id: 'plans',\n        name: 'Plans',\n        count: documentCounts.plans_count,\n        color: '#3b82f6'\n      },\n      {\n        id: 'permits',\n        name: 'Permits',\n        count: documentCounts.permits_count,\n        color: '#22c55e'\n      },\n      {\n        id: 'reports',\n        name: 'Reports',\n        count: documentCounts.reports_count,\n        color: '#f59e0b'\n      },\n      {\n        id: 'photos',\n        name: 'Photos',\n        count: documentCounts.photos_count,\n        color: '#8b5cf6'\n      },\n      {\n        id: 'total',\n        name: 'Total',\n        count: documentCounts.document_count,\n        color: '#6b7280'\n      }\n    ];\n\n    return NextResponse.json({\n      documents: transformedDocuments,\n      summary: documentCounts,\n      categories: categories,\n      pagination: {\n        page,\n        per_page,\n        total: totalCount || 0,\n        total_pages: Math.ceil((totalCount || 0) / per_page)\n      }\n    });\n  } catch (error) {\n    console.error('Project documents API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: projectId } = await params;\n    const body = await request.json();\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const { document_type, file_name, file_size, uploaded_by, notes } = body;\n\n    if (!document_type || !file_name) {\n      return NextResponse.json(\n        { error: 'Document type and file name are required' },\n        { status: 400 }\n      );\n    }\n\n    // Create document in database\n    const { data: newDocument, error: insertError } = await supabase\n      .from('documents')\n      .insert({\n        project_id: projectId,\n        filename: file_name.replace(/[^a-zA-Z0-9.-]/g, '_'), // Sanitize filename\n        original_filename: file_name,\n        file_type: file_name.split('.').pop()?.toLowerCase() || 'unknown',\n        file_size: file_size || 0,\n        document_type: document_type,\n        description: notes || null,\n        uploaded_by: uploaded_by || null,\n        is_active: true\n      })\n      .select(`\n        id,\n        filename,\n        original_filename,\n        file_type,\n        file_size,\n        document_type,\n        description,\n        upload_date,\n        uploaded_by,\n        is_active\n      `)\n      .single();\n\n    if (insertError) {\n      console.error('Document creation error:', insertError);\n      return NextResponse.json(\n        { error: 'Failed to create document in database' },\n        { status: 500 }\n      );\n    }\n\n    // Transform for frontend compatibility\n    const transformedDocument = {\n      id: newDocument.id,\n      project_id: projectId,\n      document_type: newDocument.document_type,\n      file_name: newDocument.original_filename,\n      file_path: `/documents/${newDocument.document_type}s/${newDocument.filename}`,\n      file_size: newDocument.file_size,\n      uploaded_at: newDocument.upload_date,\n      uploaded_by: uploaded_by,\n      notes: newDocument.description || '',\n      status: newDocument.is_active ? 'active' : 'inactive',\n      uploaded_by_name: 'Current User',\n      uploader_email: uploaded_by\n    };\n\n    return NextResponse.json({\n      message: 'Document uploaded successfully',\n      document: transformedDocument\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Project documents POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to upload document' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}