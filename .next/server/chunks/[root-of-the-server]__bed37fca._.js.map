{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/geo-routes/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get(\"project_id\");\n    const route_type = searchParams.get(\"route_type\");\n\n    let query = supabase\n      .from(\"geo_routes\")\n      .select(`\n        id,\n        name,\n        description,\n        waypoints,\n        distance_meters,\n        estimated_duration_minutes,\n        route_type,\n        project_id,\n        created_by,\n        created_at,\n        updated_at\n      `);\n\n    if (project_id) {\n      query = query.eq(\"project_id\", project_id);\n    }\n\n    if (route_type) {\n      query = query.eq(\"route_type\", route_type);\n    }\n\n    const { data: routes, error } = await query.order(\"created_at\", { ascending: false });\n\n    if (error) {\n      console.error(\"Supabase geo routes query error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch geo routes\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(routes || []);\n  } catch (error) {\n    console.error(\"Geo routes API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate required fields\n    if (!body.name || !body.waypoints || !Array.isArray(body.waypoints)) {\n      return NextResponse.json(\n        { error: \"Name and waypoints array are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Calculate basic distance (simplified calculation)\n    let totalDistance = 0;\n    if (body.waypoints.length > 1) {\n      for (let i = 1; i < body.waypoints.length; i++) {\n        const prev = body.waypoints[i - 1];\n        const curr = body.waypoints[i];\n        // Haversine formula approximation for basic distance calculation\n        const lat1 = prev.latitude * Math.PI / 180;\n        const lat2 = curr.latitude * Math.PI / 180;\n        const deltaLat = (curr.latitude - prev.latitude) * Math.PI / 180;\n        const deltaLon = (curr.longitude - prev.longitude) * Math.PI / 180;\n\n        const a = Math.sin(deltaLat/2) * Math.sin(deltaLat/2) +\n                  Math.cos(lat1) * Math.cos(lat2) *\n                  Math.sin(deltaLon/2) * Math.sin(deltaLon/2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        const earthRadius = 6371000; // meters\n        totalDistance += earthRadius * c;\n      }\n    }\n\n    const routeData = {\n      name: body.name,\n      description: body.description,\n      waypoints: body.waypoints,\n      distance_meters: body.distance_meters || Math.round(totalDistance),\n      estimated_duration_minutes: body.estimated_duration_minutes || Math.round(totalDistance / 83.33), // ~5 km/h walking speed\n      route_type: body.route_type || \"walking\",\n      project_id: body.project_id || null,\n      created_by: body.created_by || \"system\",\n    };\n\n    const { data: route, error } = await supabase\n      .from(\"geo_routes\")\n      .insert([routeData])\n      .select()\n      .single();\n\n    if (error) {\n      console.error(\"Supabase geo route creation error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create geo route\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(route, { status: 201 });\n  } catch (error) {\n    console.error(\"Geo route creation API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}