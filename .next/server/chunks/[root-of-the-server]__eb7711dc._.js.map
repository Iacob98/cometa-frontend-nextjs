{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/materials/%5Bid%5D/transactions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// Service role client for bypassing RLS\nconst supabaseService = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Material ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Check if material_transactions table exists, if not return empty result\n    try {\n      // Fetch material transactions history\n      const { data: transactions, error } = await supabaseService\n        .from('material_transactions')\n        .select(`\n          id,\n          transaction_type,\n          quantity,\n          unit_price,\n          total_price,\n          reference_type,\n          reference_id,\n          notes,\n          created_at,\n          updated_at\n        `)\n        .eq('material_id', id)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Supabase error fetching transactions:', error);\n        // If table doesn't exist, return empty result instead of error\n        if (error.code === '42P01' || error.message.includes('does not exist')) {\n          console.log('material_transactions table does not exist, returning empty result');\n          return NextResponse.json({\n            items: [],\n            total: 0\n          });\n        }\n        return NextResponse.json(\n          { error: 'Failed to fetch material transactions' },\n          { status: 500 }\n        );\n      }\n\n      return NextResponse.json({\n        items: transactions || [],\n        total: transactions?.length || 0\n      });\n    } catch (dbError) {\n      console.error('Database connection error:', dbError);\n      // Return empty result instead of error for missing table\n      return NextResponse.json({\n        items: [],\n        total: 0\n      });\n    }\n  } catch (error) {\n    console.error('Material transactions API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,WAAW,IAAA,yMAAY;AAK7B,wCAAwC;AACxC,MAAM,kBAAkB,IAAA,yMAAY,gFAElC,QAAQ,GAAG,CAAC,yBAAyB;AAGhC,eAAe,IAAI,OAAoB,EAAE,EAAE,MAAM,EAAuC;IAC7F,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,IAAI,CAAC,IAAI;YACP,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,0EAA0E;QAC1E,IAAI;YACF,sCAAsC;YACtC,MAAM,EAAE,MAAM,YAAY,EAAE,KAAK,EAAE,GAAG,MAAM,gBACzC,IAAI,CAAC,yBACL,MAAM,CAAC,CAAC;;;;;;;;;;;QAWT,CAAC,EACA,EAAE,CAAC,eAAe,IAClB,KAAK,CAAC,cAAc;gBAAE,WAAW;YAAM;YAE1C,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,yCAAyC;gBACvD,+DAA+D;gBAC/D,IAAI,MAAM,IAAI,KAAK,WAAW,MAAM,OAAO,CAAC,QAAQ,CAAC,mBAAmB;oBACtE,QAAQ,GAAG,CAAC;oBACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;wBACvB,OAAO,EAAE;wBACT,OAAO;oBACT;gBACF;gBACA,OAAO,gJAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAwC,GACjD;oBAAE,QAAQ;gBAAI;YAElB;YAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO,gBAAgB,EAAE;gBACzB,OAAO,cAAc,UAAU;YACjC;QACF,EAAE,OAAO,SAAS;YAChB,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,yDAAyD;YACzD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO,EAAE;gBACT,OAAO;YACT;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}