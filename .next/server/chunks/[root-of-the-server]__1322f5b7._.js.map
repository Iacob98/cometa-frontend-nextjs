{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/geospatial/features/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get(\"project_id\");\n    const entity_type = searchParams.get(\"entity_type\");\n    const entity_id = searchParams.get(\"entity_id\");\n    const geometry_type = searchParams.get(\"geometry_type\");\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const per_page = Math.min(parseInt(searchParams.get(\"per_page\") || \"50\"), 100);\n\n    let query = supabase\n      .from(\"geospatial_features\")\n      .select(`\n        id,\n        type,\n        geometry,\n        properties,\n        project_id,\n        entity_type,\n        entity_id,\n        created_at,\n        updated_at,\n        created_by\n      `);\n\n    if (project_id) {\n      query = query.eq(\"project_id\", project_id);\n    }\n\n    if (entity_type) {\n      query = query.eq(\"entity_type\", entity_type);\n    }\n\n    if (entity_id) {\n      query = query.eq(\"entity_id\", entity_id);\n    }\n\n    if (geometry_type) {\n      query = query.eq(\"type\", geometry_type);\n    }\n\n    // Count total for pagination\n    const { count } = await supabase\n      .from(\"geospatial_features\")\n      .select(\"*\", { count: \"exact\", head: true });\n\n    const { data: features, error } = await query\n      .range((page - 1) * per_page, page * per_page - 1)\n      .order(\"created_at\", { ascending: false });\n\n    if (error) {\n      console.error(\"Supabase geospatial features query error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch geospatial features\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      items: features || [],\n      total: count || 0,\n      page,\n      per_page,\n      total_pages: Math.ceil((count || 0) / per_page),\n    });\n  } catch (error) {\n    console.error(\"Geospatial features API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate required fields\n    if (!body.type || !body.geometry || !body.entity_type || !body.entity_id) {\n      return NextResponse.json(\n        { error: \"Type, geometry, entity_type, and entity_id are required\" },\n        { status: 400 }\n      );\n    }\n\n    const featureData = {\n      type: body.type,\n      geometry: body.geometry,\n      properties: body.properties || {},\n      project_id: body.project_id || null,\n      entity_type: body.entity_type,\n      entity_id: body.entity_id,\n      created_by: body.created_by || \"system\",\n    };\n\n    const { data: feature, error } = await supabase\n      .from(\"geospatial_features\")\n      .insert([featureData])\n      .select()\n      .single();\n\n    if (error) {\n      console.error(\"Supabase geospatial feature creation error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create geospatial feature\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(feature, { status: 201 });\n  } catch (error) {\n    console.error(\"Geospatial feature creation API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}