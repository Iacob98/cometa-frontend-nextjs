{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/notifications/%5Bid%5D/read/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Notification ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const updateData = {\n      is_read: true,\n      read_at: new Date().toISOString()\n    };\n\n    const { data: updatedNotification, error } = await supabase\n      .from('in_app_notifications')\n      .update(updateData)\n      .eq('id', id)\n      .select(`\n        id,\n        user_id,\n        title,\n        message,\n        notification_type,\n        priority,\n        is_read,\n        read_at,\n        action_url,\n        action_label,\n        expires_at,\n        created_at\n      `)\n      .single();\n\n    if (error) {\n      console.error('Supabase notification mark as read error:', error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Notification not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to mark notification as read' },\n        { status: 500 }\n      );\n    }\n\n    // Transform response to match frontend expectations\n    const transformedNotification = {\n      ...updatedNotification,\n      type: updatedNotification.notification_type,\n      body: updatedNotification.message,\n    };\n\n    return NextResponse.json(transformedNotification);\n  } catch (error) {\n    console.error('Notification read PATCH error:', error);\n    return NextResponse.json(\n      { error: 'Failed to mark notification as read' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,WAAW,IAAA,yMAAY,gFAE3B,QAAQ,GAAG,CAAC,yBAAyB;AAGhC,eAAe,MACpB,OAAoB,EACpB,EAAE,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,IAAI,CAAC,IAAI;YACP,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,aAAa;YACjB,SAAS;YACT,SAAS,IAAI,OAAO,WAAW;QACjC;QAEA,MAAM,EAAE,MAAM,mBAAmB,EAAE,KAAK,EAAE,GAAG,MAAM,SAChD,IAAI,CAAC,wBACL,MAAM,CAAC,YACP,EAAE,CAAC,MAAM,IACT,MAAM,CAAC,CAAC;;;;;;;;;;;;;MAaT,CAAC,EACA,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,6CAA6C;YAC3D,IAAI,MAAM,IAAI,KAAK,YAAY;gBAC7B,OAAO,gJAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAyB,GAClC;oBAAE,QAAQ;gBAAI;YAElB;YACA,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,oDAAoD;QACpD,MAAM,0BAA0B;YAC9B,GAAG,mBAAmB;YACtB,MAAM,oBAAoB,iBAAiB;YAC3C,MAAM,oBAAoB,OAAO;QACnC;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAsC,GAC/C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}