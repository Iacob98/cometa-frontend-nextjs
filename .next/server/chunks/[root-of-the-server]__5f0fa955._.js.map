{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Supabase configuration\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\n// Create a single supabase client for interacting with your database\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true,\n  },\n})\n\n// Storage bucket names from environment\nexport const STORAGE_BUCKETS = {\n  PROJECT_PHOTOS: process.env.SUPABASE_PROJECT_PHOTOS_BUCKET || 'project-photos',\n  WORK_PHOTOS: process.env.SUPABASE_WORK_PHOTOS_BUCKET || 'work-photos',\n  PROJECT_DOCUMENTS: process.env.SUPABASE_PROJECT_DOCUMENTS_BUCKET || 'project-documents',\n  HOUSE_DOCUMENTS: process.env.SUPABASE_HOUSE_DOCUMENTS_BUCKET || 'house-documents',\n  USER_AVATARS: process.env.SUPABASE_USER_AVATARS_BUCKET || 'user-avatars',\n  REPORTS: process.env.SUPABASE_REPORTS_BUCKET || 'reports',\n} as const\n\n// File upload configuration\nexport const FILE_UPLOAD_CONFIG = {\n  // Maximum file size: 10MB\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n\n  // Maximum files per batch upload\n  MAX_FILES_PER_BATCH: 5,\n\n  // Allowed file types\n  ALLOWED_FILE_TYPES: {\n    IMAGES: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n    DOCUMENTS: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n    SPREADSHEETS: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\n    PLANS: ['application/pdf', 'application/dwg', 'application/dxf', 'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/bmp', 'image/tiff'],\n  },\n\n  // Get all allowed MIME types\n  getAllowedTypes: () => {\n    const allTypes = [\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.IMAGES,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.DOCUMENTS,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.SPREADSHEETS,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.PLANS,\n    ];\n    // Remove duplicates using Set\n    return [...new Set(allTypes)];\n  },\n} as const\n\n// File validation utilities\nexport const validateFile = (file: File) => {\n  const errors: string[] = []\n\n  // Check file size\n  if (file.size > FILE_UPLOAD_CONFIG.MAX_FILE_SIZE) {\n    errors.push(`File size must be less than ${FILE_UPLOAD_CONFIG.MAX_FILE_SIZE / (1024 * 1024)}MB`)\n  }\n\n  // Check file type\n  const allowedTypes = FILE_UPLOAD_CONFIG.getAllowedTypes()\n  console.log('🔍 File validation:', {\n    fileName: file.name,\n    fileType: file.type,\n    allowedTypes,\n    isTypeAllowed: allowedTypes.includes(file.type)\n  });\n\n  if (!allowedTypes.includes(file.type)) {\n    errors.push(`File type ${file.type} is not allowed`)\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  }\n}\n\n// Generate secure file name\nexport const generateSecureFileName = (originalFileName: string, userId?: string) => {\n  const timestamp = Date.now()\n  const randomString = Math.random().toString(36).substring(2, 15)\n  const fileExtension = originalFileName.split('.').pop()\n  const baseName = originalFileName.split('.')[0].toLowerCase().replace(/[^a-z0-9]/g, '-')\n\n  const prefix = userId ? `${userId}_` : ''\n  return `${prefix}${baseName}_${timestamp}_${randomString}.${fileExtension}`\n}\n\n// Get file category based on bucket\nexport const getFileCategoryFromBucket = (bucketName: string) => {\n  const bucketMap = {\n    [STORAGE_BUCKETS.PROJECT_PHOTOS]: 'project-photo',\n    [STORAGE_BUCKETS.WORK_PHOTOS]: 'work-photo',\n    [STORAGE_BUCKETS.PROJECT_DOCUMENTS]: 'project-document',\n    [STORAGE_BUCKETS.HOUSE_DOCUMENTS]: 'house-document',\n    [STORAGE_BUCKETS.USER_AVATARS]: 'user-avatar',\n    [STORAGE_BUCKETS.REPORTS]: 'report',\n  } as const\n\n  return bucketMap[bucketName as keyof typeof bucketMap] || 'unknown'\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/project-preparation/costs/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { supabase } from '@/lib/supabase'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams\n    const projectId = searchParams.get('project_id')\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      )\n    }\n\n    // Get project costs from various sources\n    const [\n      projectRes,\n      facilitiesRes,\n      housingRes,\n      equipmentRes,\n      materialRes,\n      laborRes\n    ] = await Promise.all([\n      // Project information\n      supabase\n        .from('projects')\n        .select('id, name')\n        .eq('id', projectId)\n        .single(),\n      // Facilities costs\n      supabase\n        .from('facilities')\n        .select('*')\n        .eq('project_id', projectId),\n\n      // Housing units costs\n      supabase\n        .from('housing_units')\n        .select('*')\n        .eq('project_id', projectId),\n\n      // Equipment assignment costs\n      supabase\n        .from('equipment_assignments')\n        .select(`\n          *,\n          equipment:equipment_id (\n            id,\n            name,\n            type,\n            daily_rate\n          )\n        `)\n        .eq('project_id', projectId),\n\n      // Material allocation costs\n      supabase\n        .from('material_allocations')\n        .select(`\n          *,\n          materials:material_id (\n            id,\n            name,\n            price_per_unit,\n            unit\n          )\n        `)\n        .eq('project_id', projectId),\n\n      // Labor costs from work entries\n      supabase\n        .from('work_entries')\n        .select('*')\n        .eq('project_id', projectId)\n    ])\n\n    if (projectRes.error) {\n      console.error('Project query error:', projectRes.error)\n    }\n\n    if (facilitiesRes.error) {\n      console.error('Facilities costs query error:', facilitiesRes.error)\n    }\n\n    if (housingRes.error) {\n      console.error('Housing costs query error:', housingRes.error)\n    }\n\n    if (equipmentRes.error) {\n      console.error('Equipment costs query error:', equipmentRes.error)\n    }\n\n    if (materialRes.error) {\n      console.error('Material costs query error:', materialRes.error)\n    }\n\n    if (laborRes.error) {\n      console.error('Labor costs query error:', laborRes.error)\n    }\n\n    // Calculate totals\n    const facilityCosts = (facilitiesRes.data || []).reduce((total, facility) => {\n      const dailyRate = parseFloat(facility.rent_daily_eur || 0)\n      const days = facility.start_date && facility.end_date\n        ? Math.ceil((new Date(facility.end_date).getTime() - new Date(facility.start_date).getTime()) / (1000 * 60 * 60 * 24))\n        : 0\n      return total + (dailyRate * days)\n    }, 0)\n\n    const housingCosts = (housingRes.data || []).reduce((total, housing) => {\n      const dailyRate = parseFloat(housing.rent_daily_eur || 0)\n      const days = housing.check_in_date && housing.check_out_date\n        ? Math.ceil((new Date(housing.check_out_date).getTime() - new Date(housing.check_in_date).getTime()) / (1000 * 60 * 60 * 24))\n        : 0\n      return total + (dailyRate * days)\n    }, 0)\n\n    const equipmentCosts = (equipmentRes.data || []).reduce((total, assignment) => {\n      const dailyRate = parseFloat(assignment.equipment?.daily_rate || 0)\n      const days = assignment.assigned_at && assignment.returned_at\n        ? Math.ceil((new Date(assignment.returned_at).getTime() - new Date(assignment.assigned_at).getTime()) / (1000 * 60 * 60 * 24))\n        : 30 // Default 30 days if still assigned\n      return total + (dailyRate * days)\n    }, 0)\n\n    const materialCosts = (materialRes.data || []).reduce((total, allocation) => {\n      const pricePerUnit = parseFloat(allocation.materials?.price_per_unit || 0)\n      const quantity = parseFloat(allocation.allocated_quantity || 0)\n      return total + (pricePerUnit * quantity)\n    }, 0)\n\n    const laborCosts = (laborRes.data || []).reduce((total, entry) => {\n      return total + parseFloat(entry.labor_cost || 0)\n    }, 0)\n\n    const totalCosts = facilityCosts + housingCosts + equipmentCosts + materialCosts + laborCosts\n    const projectBudget = parseFloat(projectRes.data?.budget || 0)\n    const remainingBudget = projectBudget - totalCosts\n    const budgetUtilized = projectBudget > 0 ? (totalCosts / projectBudget) * 100 : 0\n\n    const costs = {\n      project: {\n        id: projectRes.data?.id,\n        name: projectRes.data?.name,\n        budget: projectBudget,\n        remaining_budget: remainingBudget,\n        budget_utilized_percentage: budgetUtilized\n      },\n      facilities: {\n        items: facilitiesRes.data || [],\n        total: facilityCosts\n      },\n      housing: {\n        items: housingRes.data || [],\n        total: housingCosts\n      },\n      equipment: {\n        items: equipmentRes.data || [],\n        total: equipmentCosts\n      },\n      materials: {\n        items: materialRes.data || [],\n        total: materialCosts\n      },\n      labor: {\n        items: laborRes.data || [],\n        total: laborCosts\n      },\n      summary: {\n        facilities: facilityCosts,\n        housing: housingCosts,\n        equipment: equipmentCosts,\n        materials: materialCosts,\n        labor: laborCosts,\n        total: totalCosts\n      }\n    }\n\n    return NextResponse.json(costs)\n\n  } catch (error) {\n    console.error('Project costs error:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch project costs' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}