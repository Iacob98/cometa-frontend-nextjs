{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/suppliers/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// Service role client for bypassing RLS\nconst supabaseService = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Supplier ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const { data: supplier, error } = await supabaseService\n      .from(\"suppliers\")\n      .select(\n        `\n        id,\n        name,\n        short_name,\n        contact_person,\n        email,\n        phone,\n        address,\n        tax_number,\n        payment_terms,\n        rating,\n        is_active,\n        notes,\n        created_at,\n        updated_at\n      `\n      )\n      .eq(\"id\", id)\n      .single();\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: \"Supplier not found\" },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: \"Failed to fetch supplier from database\" },\n        { status: 500 }\n      );\n    }\n\n    // Get materials count for this supplier\n    const { count: materialsCount } = await supabaseService\n      .from(\"supplier_materials\")\n      .select(\"*\", { count: \"exact\", head: true })\n      .eq(\"supplier_id\", supplier.id);\n\n    // Map name to org_name for frontend compatibility\n    const supplierWithOrgName = {\n      ...supplier,\n      org_name: supplier.name,\n      materials_count: materialsCount || 0,\n    };\n\n    return NextResponse.json(supplierWithOrgName);\n  } catch (error) {\n    console.error(\"Supplier GET API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch supplier\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Supplier ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const {\n      name,\n      short_name,\n      contact_person,\n      email,\n      phone,\n      address,\n      tax_number,\n      payment_terms,\n      rating,\n      is_active,\n      notes,\n    } = body;\n\n    // Validation\n    if (!name) {\n      return NextResponse.json(\n        { error: \"Name is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Email validation if provided\n    if (email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n      return NextResponse.json(\n        { error: \"Invalid email format\" },\n        { status: 400 }\n      );\n    }\n\n    // Rating validation\n    if (rating && (rating < 1 || rating > 5)) {\n      return NextResponse.json(\n        { error: \"Rating must be between 1 and 5\" },\n        { status: 400 }\n      );\n    }\n\n    // Update supplier in Supabase using service role to bypass RLS\n    const { data: supplier, error } = await supabaseService\n      .from(\"suppliers\")\n      .update({\n        name,\n        short_name: short_name || null,\n        contact_person: contact_person || null,\n        email: email || null,\n        phone: phone || null,\n        address: address || null,\n        tax_number: tax_number || null,\n        payment_terms: payment_terms || null,\n        rating: rating || null,\n        is_active: is_active !== false,\n        notes: notes || null,\n        updated_at: new Date().toISOString()\n      })\n      .eq(\"id\", id)\n      .select(\n        `\n        id,\n        name,\n        short_name,\n        contact_person,\n        email,\n        phone,\n        address,\n        tax_number,\n        payment_terms,\n        rating,\n        is_active,\n        notes,\n        created_at,\n        updated_at\n      `\n      )\n      .single();\n\n    if (error) {\n      console.error(\"Supabase error updating supplier:\", error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: \"Supplier not found\" },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: \"Failed to update supplier in database\" },\n        { status: 500 }\n      );\n    }\n\n    // Get materials count for this supplier\n    const { count: materialsCount } = await supabaseService\n      .from(\"supplier_materials\")\n      .select(\"*\", { count: \"exact\", head: true })\n      .eq(\"supplier_id\", supplier.id);\n\n    // Map name to org_name for frontend compatibility\n    const supplierWithOrgName = {\n      ...supplier,\n      org_name: supplier.name,\n      materials_count: materialsCount || 0,\n    };\n\n    return NextResponse.json(supplierWithOrgName);\n  } catch (error) {\n    console.error(\"Update supplier error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to update supplier\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Supplier ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Delete supplier using service role to bypass RLS\n    const { error } = await supabaseService\n      .from(\"suppliers\")\n      .delete()\n      .eq(\"id\", id);\n\n    if (error) {\n      console.error(\"Supabase error deleting supplier:\", error);\n      return NextResponse.json(\n        { error: \"Failed to delete supplier from database\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({ message: \"Supplier deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete supplier error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to delete supplier\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}