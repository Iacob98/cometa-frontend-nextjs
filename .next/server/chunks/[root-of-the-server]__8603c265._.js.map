{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/work-entries/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const per_page = parseInt(searchParams.get('per_page') || searchParams.get('limit') || '20');\n    const offset = (page - 1) * per_page;\n    const project_id = searchParams.get('project_id');\n    const user_id = searchParams.get('user_id');\n    const crew_id = searchParams.get('crew_id');\n    const status = searchParams.get('status');\n    const work_type = searchParams.get('work_type');\n\n    // Build simple Supabase query first\n    let query = supabase\n      .from('work_entries')\n      .select(`\n        id,\n        project_id,\n        user_id,\n        crew_id,\n        work_type,\n        description,\n        start_time,\n        end_time,\n        duration_hours,\n        latitude,\n        longitude,\n        location_accuracy,\n        status,\n        approved,\n        approved_by,\n        approved_at,\n        photos,\n        notes,\n        created_at,\n        updated_at\n      `, { count: 'exact' })\n      .order('created_at', { ascending: false })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters\n    if (project_id) {\n      query = query.eq('project_id', project_id);\n    }\n\n    if (user_id) {\n      query = query.eq('user_id', user_id);\n    }\n\n    if (crew_id) {\n      query = query.eq('crew_id', crew_id);\n    }\n\n    if (status) {\n      query = query.eq('status', status);\n    }\n\n    if (work_type) {\n      query = query.eq('work_type', work_type);\n    }\n\n    const { data: workEntries, error, count } = await query;\n\n    if (error) {\n      console.error('Supabase work entries error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch work entries from database' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      items: workEntries || [],\n      total: count || 0,\n      page,\n      per_page,\n      total_pages: Math.ceil((count || 0) / per_page)\n    });\n  } catch (error) {\n    console.error('Work entries API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch work entries' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      project_id,\n      user_id,\n      crew_id,\n      work_type,\n      description,\n      start_time,\n      end_time,\n      duration_hours,\n      latitude,\n      longitude,\n      location_accuracy,\n      photos = [],\n      notes,\n      status = 'submitted'\n    } = body;\n\n    // Validation\n    if (!project_id || !user_id || !work_type || !start_time) {\n      return NextResponse.json(\n        { error: 'Project ID, User ID, work type, and start time are required' },\n        { status: 400 }\n      );\n    }\n\n    // Calculate duration if not provided and end_time exists\n    let calculatedDuration = duration_hours;\n    if (!calculatedDuration && start_time && end_time) {\n      const startDate = new Date(start_time);\n      const endDate = new Date(end_time);\n      calculatedDuration = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60); // hours\n    }\n\n    // Create work entry in Supabase\n    const { data: workEntry, error } = await supabase\n      .from('work_entries')\n      .insert([{\n        project_id,\n        user_id,\n        crew_id,\n        work_type,\n        description,\n        start_time,\n        end_time,\n        duration_hours: calculatedDuration,\n        latitude,\n        longitude,\n        location_accuracy,\n        photos,\n        notes,\n        status\n      }])\n      .select(`\n        id,\n        project_id,\n        user_id,\n        crew_id,\n        work_type,\n        description,\n        start_time,\n        end_time,\n        duration_hours,\n        latitude,\n        longitude,\n        location_accuracy,\n        status,\n        approved,\n        photos,\n        notes,\n        created_at,\n        updated_at\n      `)\n      .single();\n\n    if (error) {\n      console.error('Supabase work entry creation error:', error);\n      return NextResponse.json(\n        { error: 'Failed to create work entry in database' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(workEntry, { status: 201 });\n  } catch (error) {\n    console.error('Work entries POST API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create work entry' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}