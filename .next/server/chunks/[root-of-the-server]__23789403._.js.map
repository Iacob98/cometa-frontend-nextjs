{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/transactions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// FIXED: Add TypeScript interface for unified transactions\ninterface UnifiedTransaction {\n  id: string;\n  transaction_type: \"cost\" | \"material_order\" | \"rental_expense\";\n  category: string;\n  amount_eur: number;\n  date: string;\n  description: string;\n  project_id?: string | null;\n  project?: any;\n  reference_type?: string;\n  reference_id?: string;\n  status: string;\n  quantity?: number;\n  unit_price_eur?: number;\n  days?: number;\n  daily_rate_eur?: number;\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n\n    // Parse pagination parameters\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const per_page = parseInt(searchParams.get(\"per_page\") || \"20\");\n    const offset = (page - 1) * per_page;\n\n    // Parse filtering parameters\n    const project_id = searchParams.get(\"project_id\");\n    const transaction_type = searchParams.get(\"transaction_type\");\n    const date_from = searchParams.get(\"date_from\");\n    const date_to = searchParams.get(\"date_to\");\n\n    // Start with just costs for simplicity\n    let costsQuery = supabase\n      .from(\"costs\")\n      .select(\n        `\n        id,\n        project_id,\n        cost_type,\n        amount_eur,\n        date,\n        description,\n        reference_type,\n        reference_id,\n        project:projects(id, name, status)\n      `\n      )\n      .order(\"date\", { ascending: false });\n\n    if (project_id) {\n      costsQuery = costsQuery.eq(\"project_id\", project_id);\n    }\n    if (date_from) {\n      costsQuery = costsQuery.gte(\"date\", date_from);\n    }\n    if (date_to) {\n      costsQuery = costsQuery.lte(\"date\", date_to);\n    }\n\n    const { data: costsData, error: costsError } = await costsQuery;\n\n    if (costsError) {\n      console.error(\"Costs query error:\", costsError);\n      // Return empty data instead of error\n      return NextResponse.json({\n        items: [],\n        total: 0,\n        page,\n        per_page,\n        total_pages: 0,\n        summary: {\n          total_amount: 0,\n          by_type: {\n            costs: 0,\n            material_orders: 0,\n            rental_expenses: 0,\n          },\n        },\n      });\n    }\n\n    // Transform costs data to unified transaction format\n    const transactions: UnifiedTransaction[] = [];\n\n    // Transform costs\n    (costsData || []).forEach((cost: any) => {\n      transactions.push({\n        id: cost.id,\n        transaction_type: \"cost\",\n        category: cost.cost_type,\n        amount_eur: cost.amount_eur,\n        date: cost.date,\n        description: cost.description || `${cost.cost_type} expense`,\n        project_id: cost.project_id,\n        project: cost.project,\n        reference_type: cost.reference_type,\n        reference_id: cost.reference_id,\n        status: \"completed\",\n      });\n    });\n\n    // Sort by date and apply pagination\n    transactions.sort(\n      (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n\n    // Apply transaction type filter\n    const filteredTransactions = transaction_type\n      ? transactions.filter((t) => t.transaction_type === transaction_type)\n      : transactions;\n\n    const total = filteredTransactions.length;\n    const paginatedTransactions = filteredTransactions.slice(\n      offset,\n      offset + per_page\n    );\n\n    return NextResponse.json({\n      items: paginatedTransactions,\n      total,\n      page,\n      per_page,\n      total_pages: Math.ceil(total / per_page),\n      summary: {\n        total_amount: transactions.reduce(\n          (sum, t) => sum + (t.amount_eur || 0),\n          0\n        ),\n        by_type: {\n          costs: transactions.filter((t) => t.transaction_type === \"cost\")\n            .length,\n          material_orders: transactions.filter(\n            (t) => t.transaction_type === \"material_order\"\n          ).length,\n          rental_expenses: transactions.filter(\n            (t) => t.transaction_type === \"rental_expense\"\n          ).length,\n        },\n      },\n    });\n  } catch (error) {\n    console.error(\"Transactions API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { transaction_type, project_id, amount_eur, description, category } =\n      body;\n\n    // Validate required fields\n    if (!transaction_type || !amount_eur) {\n      return NextResponse.json(\n        { error: \"transaction_type and amount_eur are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate transaction_type\n    if (\n      ![\"cost\", \"material_order\", \"rental_expense\"].includes(transaction_type)\n    ) {\n      return NextResponse.json(\n        {\n          error:\n            \"Invalid transaction_type. Must be: cost, material_order, or rental_expense\",\n        },\n        { status: 400 }\n      );\n    }\n\n    let result;\n\n    // FIXED: Route to appropriate table based on transaction type\n    switch (transaction_type) {\n      case \"cost\":\n        if (!project_id) {\n          return NextResponse.json(\n            { error: \"project_id is required for cost transactions\" },\n            { status: 400 }\n          );\n        }\n\n        const { data: cost, error: costError } = await supabase\n          .from(\"costs\")\n          .insert([\n            {\n              project_id,\n              cost_type: category || \"other\",\n              amount_eur,\n              date: new Date().toISOString().split(\"T\")[0],\n              description: description || \"Manual cost entry\",\n            },\n          ])\n          .select(\n            `\n            id,\n            project_id,\n            cost_type,\n            amount_eur,\n            date,\n            description,\n            project:projects(id, name, status)\n          `\n          )\n          .single();\n\n        if (costError) {\n          throw costError;\n        }\n\n        result = {\n          id: cost.id,\n          transaction_type: \"cost\",\n          category: cost.cost_type,\n          amount_eur: cost.amount_eur,\n          date: cost.date,\n          description: cost.description,\n          project_id: cost.project_id,\n          project: cost.project,\n        };\n        break;\n\n      case \"material_order\":\n        return NextResponse.json(\n          {\n            error:\n              \"Material orders should be created via /api/materials/orders endpoint\",\n          },\n          { status: 400 }\n        );\n\n      case \"rental_expense\":\n        return NextResponse.json(\n          {\n            error:\n              \"Rental expenses should be created via rental management endpoints\",\n          },\n          { status: 400 }\n        );\n\n      default:\n        return NextResponse.json(\n          { error: \"Invalid transaction type\" },\n          { status: 400 }\n        );\n    }\n\n    return NextResponse.json(\n      {\n        message: \"Transaction created successfully\",\n        transaction: result,\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Transaction creation error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create transaction\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}