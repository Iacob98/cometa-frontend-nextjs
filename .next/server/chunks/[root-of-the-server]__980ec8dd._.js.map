{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/notifications/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const per_page = parseInt(searchParams.get('per_page') || '20');\n    const offset = (page - 1) * per_page;\n    const user_id = searchParams.get('user_id');\n    const read = searchParams.get('read');\n    const priority = searchParams.get('priority');\n    const created_after = searchParams.get('created_after');\n\n    // Build the query with filters\n    let query = supabase\n      .from('in_app_notifications')\n      .select(`\n        id,\n        user_id,\n        title,\n        message,\n        notification_type,\n        priority,\n        is_read,\n        read_at,\n        action_url,\n        action_label,\n        expires_at,\n        created_at\n      `)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters\n    if (user_id) {\n      query = query.eq('user_id', user_id);\n    }\n\n    if (read !== null) {\n      const isRead = read === 'true';\n      query = query.eq('is_read', isRead);\n    }\n\n    if (priority) {\n      query = query.eq('priority', priority);\n    }\n\n    if (created_after) {\n      query = query.gte('created_at', created_after);\n    }\n\n    // Execute the query\n    const { data: notifications, error } = await query;\n\n    if (error) {\n      console.error('Notifications query error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch notifications' },\n        { status: 500 }\n      );\n    }\n\n    // Get total count for pagination\n    let countQuery = supabase\n      .from('in_app_notifications')\n      .select('*', { count: 'exact', head: true });\n\n    if (user_id) {\n      countQuery = countQuery.eq('user_id', user_id);\n    }\n    if (read !== null) {\n      const isRead = read === 'true';\n      countQuery = countQuery.eq('is_read', isRead);\n    }\n    if (priority) {\n      countQuery = countQuery.eq('priority', priority);\n    }\n    if (created_after) {\n      countQuery = countQuery.gte('created_at', created_after);\n    }\n\n    const { count: totalCount } = await countQuery;\n\n    // Get summary counts\n    let summaryQueries = [\n      supabase\n        .from('in_app_notifications')\n        .select('*', { count: 'exact', head: true }),\n      supabase\n        .from('in_app_notifications')\n        .select('*', { count: 'exact', head: true })\n        .eq('is_read', false),\n      supabase\n        .from('in_app_notifications')\n        .select('*', { count: 'exact', head: true })\n        .eq('priority', 'urgent')\n        .eq('is_read', false)\n    ];\n\n    // Apply user filter to summary queries if specified\n    if (user_id) {\n      summaryQueries = summaryQueries.map(q => q.eq('user_id', user_id));\n    }\n\n    const [\n      { count: totalAllCount },\n      { count: unreadCount },\n      { count: urgentUnreadCount }\n    ] = await Promise.all(summaryQueries);\n\n    // Transform data to match frontend expectations\n    const transformedNotifications = (notifications || []).map(notif => ({\n      ...notif,\n      type: notif.notification_type, // Map notification_type to type\n      body: notif.message, // Map message to body\n      // Keep both is_read and read_at for compatibility\n    }));\n\n    return NextResponse.json({\n      items: transformedNotifications, // Frontend expects 'items' instead of 'notifications'\n      total: totalCount || 0,\n      page,\n      per_page,\n      total_pages: Math.ceil((totalCount || 0) / per_page),\n      summary: {\n        total_count: totalAllCount || 0,\n        unread_count: unreadCount || 0,\n        urgent_count: urgentUnreadCount || 0\n      }\n    });\n  } catch (error) {\n    console.error('Notifications API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { user_id, title, message, type = 'info', priority = 'normal', action_url, action_label, expires_at } = body;\n\n    if (!title || !message) {\n      return NextResponse.json(\n        { error: 'Title and message are required' },\n        { status: 400 }\n      );\n    }\n\n    // Set default expiration to 30 days from now if not provided\n    const defaultExpiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();\n\n    const { data: newNotification, error } = await supabase\n      .from('in_app_notifications')\n      .insert({\n        user_id: user_id || null,\n        title,\n        message,\n        notification_type: type,\n        priority,\n        is_read: false,\n        action_url: action_url || null,\n        action_label: action_label || null,\n        expires_at: expires_at || defaultExpiresAt,\n        created_at: new Date().toISOString()\n      })\n      .select(`\n        id,\n        user_id,\n        title,\n        message,\n        notification_type,\n        priority,\n        is_read,\n        read_at,\n        action_url,\n        action_label,\n        expires_at,\n        created_at\n      `)\n      .single();\n\n    if (error) {\n      console.error('Supabase notification creation error:', error);\n      return NextResponse.json(\n        { error: 'Failed to create notification in database' },\n        { status: 500 }\n      );\n    }\n\n    // Transform response to match frontend expectations\n    const transformedNotification = {\n      ...newNotification,\n      type: newNotification.notification_type,\n      body: newNotification.message,\n    };\n\n    return NextResponse.json({\n      message: 'Notification created successfully',\n      notification: transformedNotification\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Notifications POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create notification' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { notification_id, read = true } = body;\n\n    if (!notification_id) {\n      return NextResponse.json(\n        { error: 'Notification ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const updateData: any = {\n      is_read: read,\n      read_at: read ? new Date().toISOString() : null\n    };\n\n    const { data: updatedNotification, error } = await supabase\n      .from('in_app_notifications')\n      .update(updateData)\n      .eq('id', notification_id)\n      .select(`\n        id,\n        user_id,\n        title,\n        message,\n        notification_type,\n        priority,\n        is_read,\n        read_at,\n        action_url,\n        action_label,\n        expires_at,\n        created_at\n      `)\n      .single();\n\n    if (error) {\n      console.error('Supabase notification update error:', error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Notification not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to update notification in database' },\n        { status: 500 }\n      );\n    }\n\n    // Transform response to match frontend expectations\n    const transformedNotification = {\n      ...updatedNotification,\n      type: updatedNotification.notification_type,\n      body: updatedNotification.message,\n    };\n\n    return NextResponse.json({\n      message: 'Notification updated successfully',\n      notification: transformedNotification\n    });\n  } catch (error) {\n    console.error('Notifications PUT error:', error);\n    return NextResponse.json(\n      { error: 'Failed to update notification' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}