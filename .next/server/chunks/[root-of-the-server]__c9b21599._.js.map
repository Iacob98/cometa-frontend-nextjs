{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/vehicles/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: vehicleId } = await params;\n\n    // Get single vehicle from Supabase\n    const { data: vehicle, error } = await supabase\n      .from('vehicles')\n      .select(`\n        id,\n        brand,\n        model,\n        plate_number,\n        type,\n        status,\n        rental_cost_per_day,\n        fuel_type,\n        year_manufactured,\n        description,\n        is_active,\n        created_at,\n        updated_at,\n        vehicle_assignments(\n          id,\n          project_id,\n          crew_id,\n          user_id,\n          from_ts,\n          to_ts,\n          is_permanent,\n          rental_cost_per_day,\n          notes,\n          created_at,\n          project:projects(id, name, city),\n          crew:crews(id, name),\n          user:users(id, first_name, last_name, email)\n        )\n      `)\n      .eq('id', vehicleId)\n      .eq('is_active', true)\n      .single();\n\n    if (error) {\n      console.error('Supabase vehicle query error:', error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Vehicle not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to fetch vehicle' },\n        { status: 500 }\n      );\n    }\n\n    // Format response to match expected structure\n    const currentAssignments = (vehicle.vehicle_assignments || []).filter((assignment: any) => {\n      if (!assignment.to_ts) return true; // Permanent or ongoing assignments\n      return new Date(assignment.to_ts) > new Date(); // Future end date\n    });\n\n    let currentAssignment = null;\n    if (currentAssignments.length > 0) {\n      currentAssignment = currentAssignments[0];\n    }\n\n    const formattedVehicle = {\n      id: vehicle.id,\n      brand: vehicle.brand || '',\n      model: vehicle.model || '',\n      plate_number: vehicle.plate_number,\n      type: vehicle.type || 'truck',\n      status: vehicle.status || 'available',\n      rental_cost_per_day: Number(vehicle.rental_cost_per_day) || 0,\n      fuel_type: vehicle.fuel_type || 'diesel',\n      year_manufactured: vehicle.year_manufactured,\n      description: vehicle.description || '',\n      is_active: vehicle.is_active,\n      full_name: `${vehicle.brand || ''} ${vehicle.model || ''} (${vehicle.plate_number})`.trim(),\n      age: vehicle.year_manufactured ? new Date().getFullYear() - vehicle.year_manufactured : null,\n      current_assignment: currentAssignment ? {\n        id: currentAssignment.id,\n        project_id: currentAssignment.project_id,\n        crew_id: currentAssignment.crew_id,\n        user_id: currentAssignment.user_id,\n        from_ts: currentAssignment.from_ts,\n        to_ts: currentAssignment.to_ts,\n        is_permanent: currentAssignment.is_permanent,\n        rental_cost_per_day: Number(currentAssignment.rental_cost_per_day) || 0,\n        notes: currentAssignment.notes || '',\n        project: currentAssignment.project ? {\n          id: currentAssignment.project.id,\n          name: currentAssignment.project.name,\n          city: currentAssignment.project.city\n        } : null,\n        crew: currentAssignment.crew ? {\n          id: currentAssignment.crew.id,\n          name: currentAssignment.crew.name\n        } : null,\n        assigned_user: currentAssignment.user ? {\n          id: currentAssignment.user.id,\n          name: `${currentAssignment.user.first_name} ${currentAssignment.user.last_name}`,\n          email: currentAssignment.user.email\n        } : null,\n        duration_days: currentAssignment.to_ts ?\n          Math.ceil((new Date(currentAssignment.to_ts).getTime() - new Date(currentAssignment.from_ts).getTime()) / (1000 * 60 * 60 * 24)) : null\n      } : null,\n      assignments_count: vehicle.vehicle_assignments?.length || 0,\n      created_at: vehicle.created_at,\n      updated_at: vehicle.updated_at\n    };\n\n    return NextResponse.json(formattedVehicle);\n  } catch (error) {\n    console.error('Vehicle GET API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: vehicleId } = await params;\n    const body = await request.json();\n    const {\n      brand,\n      model,\n      status,\n      rental_cost_per_day,\n      fuel_type,\n      year_manufactured,\n      description\n    } = body;\n\n    // Prepare update data\n    const updateData: any = {\n      updated_at: new Date().toISOString()\n    };\n\n    if (brand !== undefined) updateData.brand = brand;\n    if (model !== undefined) updateData.model = model;\n    if (status !== undefined) updateData.status = status;\n    if (rental_cost_per_day !== undefined) updateData.rental_cost_per_day = Number(rental_cost_per_day);\n    if (fuel_type !== undefined) updateData.fuel_type = fuel_type;\n    if (year_manufactured !== undefined) updateData.year_manufactured = year_manufactured ? parseInt(year_manufactured) : null;\n    if (description !== undefined) updateData.description = description;\n\n    // Update vehicle\n    const { data: updatedVehicle, error: updateError } = await supabase\n      .from('vehicles')\n      .update(updateData)\n      .eq('id', vehicleId)\n      .select(`\n        id,\n        brand,\n        model,\n        plate_number,\n        type,\n        status,\n        rental_cost_per_day,\n        fuel_type,\n        year_manufactured,\n        description,\n        is_active,\n        created_at,\n        updated_at\n      `)\n      .single();\n\n    if (updateError) {\n      console.error('Supabase vehicle update error:', updateError);\n      if (updateError.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Vehicle not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to update vehicle' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Vehicle updated successfully',\n      vehicle: updatedVehicle\n    });\n  } catch (error) {\n    console.error('Vehicle PUT API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to update vehicle' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: vehicleId } = await params;\n\n    // Check if vehicle has active assignments\n    const { data: activeAssignments, error: assignmentError } = await supabase\n      .from('vehicle_assignments')\n      .select('id')\n      .eq('vehicle_id', vehicleId)\n      .is('to_ts', null); // Active assignments (no end date)\n\n    if (assignmentError) {\n      console.error('Error checking vehicle assignments:', assignmentError);\n      return NextResponse.json(\n        { error: 'Failed to check vehicle assignments' },\n        { status: 500 }\n      );\n    }\n\n    if (activeAssignments && activeAssignments.length > 0) {\n      return NextResponse.json(\n        { error: 'Cannot delete vehicle with active assignments. Please end all assignments first.' },\n        { status: 400 }\n      );\n    }\n\n    // Soft delete vehicle by setting is_active to false\n    const { error: deleteError } = await supabase\n      .from('vehicles')\n      .update({\n        is_active: false,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', vehicleId);\n\n    if (deleteError) {\n      console.error('Supabase vehicle delete error:', deleteError);\n      if (deleteError.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Vehicle not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to delete vehicle' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Vehicle deleted successfully'\n    });\n  } catch (error) {\n    console.error('Vehicle DELETE API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete vehicle' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}