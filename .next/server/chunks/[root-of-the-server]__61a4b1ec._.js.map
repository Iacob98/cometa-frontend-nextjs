{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/equipment/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const per_page = parseInt(searchParams.get(\"per_page\") || \"20\");\n    const offset = (page - 1) * per_page;\n    const type = searchParams.get(\"type\");\n    const status = searchParams.get(\"status\");\n    const search = searchParams.get(\"search\");\n    const owned = searchParams.get(\"owned\");\n\n    // Get equipment directly from Supabase with correct field names\n    let query = supabase\n      .from(\"equipment\")\n      .select(\n        `\n        id,\n        name,\n        type,\n        inventory_no,\n        status,\n        rental_cost_per_day,\n        purchase_date,\n        warranty_until,\n        description,\n        owned,\n        is_active,\n        created_at,\n        updated_at\n      `,\n        { count: \"exact\" }\n      )\n      .order(\"name\", { ascending: true })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters\n    if (type) {\n      query = query.eq(\"type\", type);\n    }\n\n    if (status) {\n      query = query.eq(\"status\", status);\n    }\n\n    if (owned && owned !== \"all\") {\n      query = query.eq(\"owned\", owned === \"true\");\n    }\n\n    if (search) {\n      query = query.or(\n        `name.ilike.%${search}%,inventory_no.ilike.%${search}%,type.ilike.%${search}%,description.ilike.%${search}%`\n      );\n    }\n\n    const { data: equipment, error, count } = await query;\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch equipment from database\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      items: equipment || [],\n      total: count || 0,\n      page,\n      per_page,\n      total_pages: Math.ceil((count || 0) / per_page),\n    });\n  } catch (error) {\n    console.error(\"Equipment API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch equipment\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      type,\n      name,\n      inventory_no,\n      status = \"available\",\n      rental_cost_per_day,\n      description,\n      owned = true,\n      purchase_price_eur,\n      rental_price_per_day_eur,\n      rental_price_per_hour_eur,\n      current_location,\n    } = body;\n\n    // Validation\n    if (!type || !name) {\n      return NextResponse.json(\n        { error: \"Type and name are required\" },\n        { status: 400 }\n      );\n    }\n\n    // FIXED: Create equipment directly in Supabase with correct field names\n    const { data: equipment, error } = await supabase\n      .from(\"equipment\")\n      .insert([\n        {\n          type,\n          name,\n          inventory_no,\n          status: status || \"available\",\n          rental_cost_per_day: rental_cost_per_day || null,\n          description: description || null,\n          owned: owned,\n          purchase_price_eur: purchase_price_eur || null,\n          rental_price_per_day_eur: rental_price_per_day_eur || null,\n          rental_price_per_hour_eur: rental_price_per_hour_eur || null,\n          current_location: current_location || null,\n        },\n      ])\n      .select(\n        `\n        id,\n        type,\n        name,\n        inventory_no,\n        status,\n        rental_cost_per_day,\n        description,\n        owned,\n        purchase_price_eur,\n        rental_price_per_day_eur,\n        rental_price_per_hour_eur,\n        current_location,\n        created_at\n      `\n      )\n      .single();\n\n    if (error) {\n      console.error(\"Supabase error creating equipment:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create equipment in database\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(equipment, { status: 201 });\n  } catch (error) {\n    console.error(\"Create equipment error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create equipment\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}