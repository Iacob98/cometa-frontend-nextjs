{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/users/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const per_page = parseInt(searchParams.get('per_page') || '20');\n    const offset = (page - 1) * per_page;\n    const role = searchParams.get('role');\n    const search = searchParams.get('search');\n    const is_active = searchParams.get('is_active');\n\n    // Build Supabase query\n    let query = supabase\n      .from('users')\n      .select(`\n        id,\n        email,\n        first_name,\n        last_name,\n        role,\n        phone,\n        is_active,\n        language_preference,\n        created_at,\n        updated_at\n      `, { count: 'exact' })\n      .order('created_at', { ascending: false })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters\n    if (role) {\n      query = query.eq('role', role);\n    }\n\n    if (is_active !== null && is_active !== undefined) {\n      query = query.eq('is_active', is_active === 'true');\n    }\n\n    if (search) {\n      query = query.or(`first_name.ilike.%${search}%,last_name.ilike.%${search}%,email.ilike.%${search}%`);\n    }\n\n    const { data: users, error, count } = await query;\n\n    if (error) {\n      console.error('Supabase users error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch users from database' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      items: users || [],\n      total: count || 0,\n      page,\n      per_page,\n      total_pages: Math.ceil((count || 0) / per_page)\n    });\n  } catch (error) {\n    console.error('Users API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch users' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      email,\n      pin_code,\n      first_name,\n      last_name,\n      role = 'worker',\n      phone,\n      language_preference = 'de',\n      is_active = true\n    } = body;\n\n    // Validation\n    if (!email || !pin_code) {\n      return NextResponse.json(\n        { error: 'Email and PIN code are required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate PIN code format (4-6 digits)\n    if (!/^\\d{4,6}$/.test(pin_code)) {\n      return NextResponse.json(\n        { error: 'PIN code must be 4-6 digits' },\n        { status: 400 }\n      );\n    }\n\n    // Create user in Supabase\n    const { data: user, error } = await supabase\n      .from('users')\n      .insert([{\n        email,\n        pin_code,\n        first_name,\n        last_name,\n        role,\n        phone,\n        language_preference,\n        is_active\n      }])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Supabase users creation error:', error);\n\n      // Handle unique constraint violations\n      if (error.code === '23505' && error.constraint === 'users_email_key') {\n        return NextResponse.json(\n          { error: 'User with this email already exists' },\n          { status: 409 }\n        );\n      }\n\n      return NextResponse.json(\n        { error: 'Failed to create user in database' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(user, { status: 201 });\n  } catch (error) {\n    console.error('Users POST API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create user' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,WAAW,IAAA,yMAAY;AAKtB,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW;QAClD,MAAM,WAAW,SAAS,aAAa,GAAG,CAAC,eAAe;QAC1D,MAAM,SAAS,CAAC,OAAO,CAAC,IAAI;QAC5B,MAAM,OAAO,aAAa,GAAG,CAAC;QAC9B,MAAM,SAAS,aAAa,GAAG,CAAC;QAChC,MAAM,YAAY,aAAa,GAAG,CAAC;QAEnC,uBAAuB;QACvB,IAAI,QAAQ,SACT,IAAI,CAAC,SACL,MAAM,CAAC,CAAC;;;;;;;;;;;MAWT,CAAC,EAAE;YAAE,OAAO;QAAQ,GACnB,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM,GACvC,KAAK,CAAC,QAAQ,SAAS,WAAW;QAErC,gBAAgB;QAChB,IAAI,MAAM;YACR,QAAQ,MAAM,EAAE,CAAC,QAAQ;QAC3B;QAEA,IAAI,cAAc,QAAQ,cAAc,WAAW;YACjD,QAAQ,MAAM,EAAE,CAAC,aAAa,cAAc;QAC9C;QAEA,IAAI,QAAQ;YACV,QAAQ,MAAM,EAAE,CAAC,CAAC,kBAAkB,EAAE,OAAO,mBAAmB,EAAE,OAAO,eAAe,EAAE,OAAO,CAAC,CAAC;QACrG;QAEA,MAAM,EAAE,MAAM,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM;QAE5C,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,OAAO,SAAS,EAAE;YAClB,OAAO,SAAS;YAChB;YACA;YACA,aAAa,KAAK,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI;QACxC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EACJ,KAAK,EACL,QAAQ,EACR,UAAU,EACV,SAAS,EACT,OAAO,QAAQ,EACf,KAAK,EACL,sBAAsB,IAAI,EAC1B,YAAY,IAAI,EACjB,GAAG;QAEJ,aAAa;QACb,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,wCAAwC;QACxC,IAAI,CAAC,YAAY,IAAI,CAAC,WAAW;YAC/B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,MAAM,EAAE,MAAM,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SACjC,IAAI,CAAC,SACL,MAAM,CAAC;YAAC;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;YACF;SAAE,EACD,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,kCAAkC;YAEhD,sCAAsC;YACtC,IAAI,MAAM,IAAI,KAAK,WAAW,MAAM,UAAU,KAAK,mBAAmB;gBACpE,OAAO,gJAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAsC,GAC/C;oBAAE,QAAQ;gBAAI;YAElB;YAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;IAC/C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}