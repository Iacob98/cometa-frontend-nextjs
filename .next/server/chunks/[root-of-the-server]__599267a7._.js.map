{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/teams/crews/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n\n    // Parse pagination parameters\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const per_page = parseInt(searchParams.get(\"per_page\") || \"50\");\n    const offset = (page - 1) * per_page;\n\n    // Parse filtering parameters\n    const status = searchParams.get(\"status\");\n    const search = searchParams.get(\"search\");\n\n    // FIXED: Build the main query with related data using correct field names (no project_id in crews)\n    let query = supabase\n      .from(\"crews\")\n      .select(\n        `\n        id,\n        name,\n        leader_user_id,\n        status,\n        description,\n        leader:users!crews_leader_user_id_fkey(\n          id,\n          first_name,\n          last_name,\n          email,\n          role\n        ),\n        crew_members(\n          crew_id,\n          user_id,\n          role,\n          joined_at,\n          left_at,\n          is_active,\n          user:users(\n            id,\n            first_name,\n            last_name,\n            email,\n            role\n          )\n        )\n      `,\n        { count: \"exact\" }\n      )\n      .eq(\"crew_members.is_active\", true)\n      .order(\"name\", { ascending: true })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters\n    if (status) {\n      query = query.eq(\"status\", status);\n    }\n\n    if (search) {\n      query = query.or(`name.ilike.%${search}%,description.ilike.%${search}%`);\n    }\n\n    const { data: crews, error, count } = await query;\n\n    if (error) {\n      console.error(\"Supabase crews query error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch crews\" },\n        { status: 500 }\n      );\n    }\n\n    // Calculate pagination info\n    const total_pages = Math.ceil((count || 0) / per_page);\n\n    // Format response to match expected structure\n    const response = {\n      crews: crews || [],\n      pagination: {\n        total: count || 0,\n        page,\n        per_page,\n        total_pages,\n        has_next: page < total_pages,\n        has_prev: page > 1,\n      },\n    };\n\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error(\"Teams/crews API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate required fields\n    if (!body.name) {\n      return NextResponse.json(\n        { error: \"Crew name is required\" },\n        { status: 400 }\n      );\n    }\n\n    // FIXED: Create crew data object with correct field names (no project_id field)\n    const crewData = {\n      name: body.name,\n      description: body.description || null,\n      status: body.status || \"active\",\n      leader_user_id: body.leader_user_id || body.foreman_user_id || null,\n    };\n\n    // FIXED: Insert new crew with correct field references (no project_id field)\n    const { data: crew, error: crewError } = await supabase\n      .from(\"crews\")\n      .insert([crewData])\n      .select(\n        `\n        id,\n        name,\n        leader_user_id,\n        status,\n        description,\n        leader:users!crews_leader_user_id_fkey(\n          id,\n          first_name,\n          last_name,\n          email,\n          role\n        )\n      `\n      )\n      .single();\n\n    if (crewError) {\n      console.error(\"Supabase crew creation error:\", crewError);\n      return NextResponse.json(\n        { error: \"Failed to create crew\" },\n        { status: 500 }\n      );\n    }\n\n    // FIXED: If initial members are provided, add them with correct field structure\n    if (body.members && Array.isArray(body.members) && crew) {\n      const memberData = body.members.map((member: any) => ({\n        crew_id: crew.id,\n        user_id: member.user_id,\n        role: member.role || \"member\",\n        is_active: true\n      }));\n\n      const { error: membersError } = await supabase\n        .from(\"crew_members\")\n        .insert(memberData);\n\n      if (membersError) {\n        console.error(\"Supabase crew members creation error:\", membersError);\n        // Don't fail the whole operation, just log the error\n      }\n    }\n\n    // Return the created crew with success status\n    return NextResponse.json(\n      {\n        message: \"Crew created successfully\",\n        crew,\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Teams/crews POST API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}