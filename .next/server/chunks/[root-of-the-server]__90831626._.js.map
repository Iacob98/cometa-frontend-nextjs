{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/equipment/assignments/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\nimport { join } from 'path';\nimport { createClient } from '@supabase/supabase-js';\n\n// Simple file-based storage for demo purposes\ninterface Assignment {\n  id: string;\n  resource_type: 'equipment' | 'vehicle';\n  equipment_id?: string;\n  vehicle_id?: string;\n  crew_id: string;\n  project_id?: string;\n  assigned_at: string;\n  returned_at?: string;\n  daily_rental_cost?: number;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nconst ASSIGNMENTS_FILE = join(process.cwd(), 'temp_assignments.json');\n\n// Supabase client - prefer this for production, fallback to file for development\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nfunction loadAssignments(): Assignment[] {\n  try {\n    if (existsSync(ASSIGNMENTS_FILE)) {\n      const data = readFileSync(ASSIGNMENTS_FILE, 'utf-8');\n      return JSON.parse(data);\n    }\n    return [];\n  } catch (error) {\n    console.error('Error loading assignments:', error);\n    return [];\n  }\n}\n\nfunction saveAssignments(assignments: Assignment[]) {\n  try {\n    writeFileSync(ASSIGNMENTS_FILE, JSON.stringify(assignments, null, 2));\n  } catch (error) {\n    console.error('Error saving assignments:', error);\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const per_page = parseInt(searchParams.get('per_page') || '20');\n    const active_only = searchParams.get('active_only') === 'true';\n    const crew_id = searchParams.get('crew_id');\n    const equipment_id = searchParams.get('equipment_id');\n    const project_id = searchParams.get('project_id');\n    const assignment_id = searchParams.get('assignment_id');\n\n    // Try to get from Supabase first, fallback to file storage\n    try {\n      let query = supabase\n        .from('equipment_assignments')\n        .select(`\n          id,\n          equipment_id,\n          project_id,\n          crew_id,\n          from_ts,\n          to_ts,\n          is_permanent,\n          rental_cost_per_day,\n          notes,\n          created_at,\n          equipment:equipment_id (\n            name,\n            type,\n            inventory_no\n          ),\n          project:project_id (\n            name\n          ),\n          crew:crew_id (\n            name\n          )\n        `)\n        .order('created_at', { ascending: false });\n\n      // Apply filters to Supabase query\n      if (active_only) {\n        query = query.is('to_ts', null);\n      }\n\n      if (crew_id) {\n        query = query.eq('crew_id', crew_id);\n      }\n\n      if (equipment_id) {\n        query = query.eq('equipment_id', equipment_id);\n      }\n\n      if (project_id) {\n        query = query.eq('project_id', project_id);\n      }\n\n      if (assignment_id) {\n        query = query.eq('id', assignment_id);\n      }\n\n      // Add pagination\n      const offset = (page - 1) * per_page;\n      query = query.range(offset, offset + per_page - 1);\n\n      const { data: assignments, error, count } = await query;\n\n      if (error) {\n        console.error('Supabase query error:', error);\n        throw error;\n      }\n\n      // Transform to match our API format\n      const transformedAssignments = (assignments || []).map(assignment => ({\n        id: assignment.id,\n        resource_type: 'equipment',\n        equipment_id: assignment.equipment_id,\n        project_id: assignment.project_id,\n        crew_id: assignment.crew_id,\n        assigned_at: assignment.from_ts,\n        returned_at: assignment.to_ts,\n        daily_rental_cost: assignment.rental_cost_per_day,\n        notes: assignment.notes,\n        created_at: assignment.created_at,\n        updated_at: assignment.created_at, // Use created_at as fallback for updated_at\n        equipment_name: assignment.equipment?.name,\n        project_name: assignment.project?.name,\n        crew_name: assignment.crew?.name,\n        // Add full equipment object for compatibility\n        equipment: assignment.equipment ? {\n          name: assignment.equipment.name,\n          type: assignment.equipment.type,\n          inventory_no: assignment.equipment.inventory_no\n        } : null\n      }));\n\n      return NextResponse.json({\n        items: transformedAssignments,\n        page,\n        per_page,\n        total: count || transformedAssignments.length,\n        total_pages: Math.ceil((count || transformedAssignments.length) / per_page)\n      });\n\n    } catch (supabaseError) {\n      console.warn('Supabase error, falling back to file storage:', supabaseError);\n\n      // Fallback to file storage\n      let assignments = loadAssignments();\n\n      // Apply filters\n      if (active_only) {\n        assignments = assignments.filter(assignment => !assignment.returned_at);\n      }\n\n      if (crew_id) {\n        assignments = assignments.filter(assignment => assignment.crew_id === crew_id);\n      }\n\n      if (equipment_id) {\n        assignments = assignments.filter(assignment => assignment.equipment_id === equipment_id);\n      }\n\n      if (project_id) {\n        assignments = assignments.filter(assignment => assignment.project_id === project_id);\n      }\n\n      if (assignment_id) {\n        assignments = assignments.filter(assignment => assignment.id === assignment_id);\n      }\n\n      // Sort by created_at descending\n      const sortedAssignments = assignments.sort((a, b) =>\n        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n      );\n\n      // Paginate\n      const offset = (page - 1) * per_page;\n      const paginatedAssignments = sortedAssignments.slice(offset, offset + per_page);\n\n      return NextResponse.json({\n        items: paginatedAssignments,\n        page,\n        per_page,\n        total: assignments.length,\n        total_pages: Math.ceil(assignments.length / per_page)\n      });\n    }\n  } catch (error) {\n    console.error('Equipment assignments API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      resource_type,\n      equipment_id,\n      vehicle_id,\n      crew_id,\n      project_id,\n      assigned_at,\n      returned_at,\n      daily_rental_cost,\n      notes\n    } = body;\n\n    // Validate required fields\n    if (!crew_id) {\n      return NextResponse.json(\n        { error: 'Crew is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!resource_type || (resource_type !== 'equipment' && resource_type !== 'vehicle')) {\n      return NextResponse.json(\n        { error: 'Resource type must be either \"equipment\" or \"vehicle\"' },\n        { status: 400 }\n      );\n    }\n\n    if (resource_type === 'equipment' && !equipment_id) {\n      return NextResponse.json(\n        { error: 'Equipment ID is required when resource type is equipment' },\n        { status: 400 }\n      );\n    }\n\n    if (resource_type === 'vehicle' && !vehicle_id) {\n      return NextResponse.json(\n        { error: 'Vehicle ID is required when resource type is vehicle' },\n        { status: 400 }\n      );\n    }\n\n    if (!assigned_at) {\n      return NextResponse.json(\n        { error: 'Assignment start date is required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate equipment availability before creating assignment\n    if (resource_type === 'equipment') {\n      try {\n        // Check equipment inventory and current assignments\n        const { data: equipment, error: equipmentError } = await supabase\n          .from('equipment')\n          .select('id, name')\n          .eq('id', equipment_id)\n          .single();\n\n        if (equipmentError || !equipment) {\n          console.warn('Equipment not found in Supabase, checking file storage for validation');\n          // Fallback to file storage validation\n          const existingAssignments = loadAssignments();\n          const activeAssignments = existingAssignments.filter(\n            assignment =>\n              assignment.equipment_id === equipment_id &&\n              !assignment.returned_at // Active assignments\n          );\n\n          // Default to quantity of 1 for file storage\n          const availableQuantity = 1;\n\n          if (activeAssignments.length >= availableQuantity) {\n            return NextResponse.json(\n              {\n                error: `Equipment is not available. ${activeAssignments.length}/${availableQuantity} units are already assigned. Return existing assignment first or add more inventory.`\n              },\n              { status: 400 }\n            );\n          }\n        } else {\n          // Get current active assignments for this equipment\n          const { data: activeAssignments, error: assignmentsError } = await supabase\n            .from('equipment_assignments')\n            .select('id, crew_id')\n            .eq('equipment_id', equipment_id)\n            .is('to_ts', null); // Active assignments (no end date)\n\n          if (assignmentsError) {\n            console.warn('Could not check assignments in Supabase, checking file storage');\n            // Fallback to file storage validation\n            const existingAssignments = loadAssignments();\n            const activeFileAssignments = existingAssignments.filter(\n              assignment =>\n                assignment.equipment_id === equipment_id &&\n                !assignment.returned_at // Active assignments\n            );\n\n            if (activeFileAssignments.length >= 1) {\n              return NextResponse.json(\n                {\n                  error: `Equipment \"${equipment.name}\" is already assigned. Only 1 equipment per crew allowed. End existing assignment first.`\n                },\n                { status: 400 }\n              );\n            }\n          } else {\n            const currentAssignments = activeAssignments?.length || 0;\n            const availableQuantity = 1; // 1 equipment = 1 crew rule\n\n            if (currentAssignments >= availableQuantity) {\n              return NextResponse.json(\n                {\n                  error: `Equipment \"${equipment.name}\" is already assigned. Only 1 equipment per crew allowed. End existing assignment first.`\n                },\n                { status: 400 }\n              );\n            }\n          }\n        }\n      } catch (validationError) {\n        console.warn('Equipment validation error, proceeding with assignment:', validationError);\n      }\n    }\n\n    // Try to save to Supabase first, fallback to file storage\n    try {\n      // For equipment assignments, save to equipment_assignments table\n      if (resource_type === 'equipment') {\n        const assignmentData = {\n          equipment_id,\n          crew_id,\n          project_id: project_id || null,\n          from_ts: new Date(assigned_at).toISOString(),\n          to_ts: returned_at ? new Date(returned_at).toISOString() : null,\n          is_permanent: !returned_at,\n          rental_cost_per_day: daily_rental_cost ? parseFloat(daily_rental_cost.toString()) : null,\n          notes: notes || null\n        };\n\n        const { data: newAssignment, error } = await supabase\n          .from('equipment_assignments')\n          .insert([assignmentData])\n          .select()\n          .single();\n\n        if (error) {\n          console.error('Supabase insert error:', error);\n          throw error;\n        }\n\n        console.log(`✅ Created equipment assignment in Supabase:`, {\n          assignmentId: newAssignment.id,\n          crewId: crew_id,\n          equipmentId: equipment_id,\n          projectId: project_id\n        });\n\n        return NextResponse.json({\n          message: 'Equipment assignment created successfully',\n          assignment: {\n            id: newAssignment.id,\n            resource_type: 'equipment',\n            equipment_id: newAssignment.equipment_id,\n            crew_id: newAssignment.crew_id,\n            project_id: newAssignment.project_id,\n            assigned_at: newAssignment.from_ts,\n            returned_at: newAssignment.to_ts,\n            daily_rental_cost: newAssignment.rental_cost_per_day,\n            notes: newAssignment.notes,\n            created_at: newAssignment.created_at,\n            updated_at: newAssignment.updated_at\n          }\n        }, { status: 201 });\n      } else {\n        // For vehicles, still use file storage for now\n        throw new Error('Vehicle assignments not supported in Supabase yet');\n      }\n\n    } catch (supabaseError) {\n      console.warn('Supabase error, falling back to file storage:', supabaseError);\n\n      // Validate equipment availability in file storage for equipment\n      if (resource_type === 'equipment') {\n        const existingAssignments = loadAssignments();\n        const activeAssignments = existingAssignments.filter(\n          assignment =>\n            assignment.equipment_id === equipment_id &&\n            !assignment.returned_at // Active assignments\n        );\n\n        // Default to quantity of 1 for file storage (since we can't check Supabase)\n        const availableQuantity = 1;\n\n        if (activeAssignments.length >= availableQuantity) {\n          return NextResponse.json(\n            {\n              error: `Equipment is not available. ${activeAssignments.length}/${availableQuantity} units are already assigned. Return existing assignment first or add more inventory.`\n            },\n            { status: 400 }\n          );\n        }\n      }\n\n      // Fallback to file storage\n      const assignmentId = `assignment-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n      const newAssignment: Assignment = {\n        id: assignmentId,\n        resource_type,\n        crew_id,\n        assigned_at: new Date(assigned_at).toISOString(),\n        daily_rental_cost: daily_rental_cost ? parseFloat(daily_rental_cost.toString()) : undefined,\n        notes: notes || undefined,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n\n      // Add resource ID based on type\n      if (resource_type === 'equipment') {\n        newAssignment.equipment_id = equipment_id;\n      } else {\n        newAssignment.vehicle_id = vehicle_id;\n      }\n\n      // Add optional fields\n      if (project_id) {\n        newAssignment.project_id = project_id;\n      }\n\n      if (returned_at) {\n        newAssignment.returned_at = new Date(returned_at).toISOString();\n      }\n\n      // Save to file storage\n      const assignments = loadAssignments();\n      assignments.push(newAssignment);\n      saveAssignments(assignments);\n\n      console.log(`✅ Created ${resource_type} assignment:`, {\n        assignmentId: newAssignment.id,\n        crewId: crew_id,\n        resourceId: resource_type === 'equipment' ? equipment_id : vehicle_id,\n        projectId: project_id\n      });\n\n      return NextResponse.json({\n        message: `${resource_type.charAt(0).toUpperCase() + resource_type.slice(1)} assignment created successfully`,\n        assignment: newAssignment\n      }, { status: 201 });\n    }\n  } catch (error) {\n    console.error('Equipment assignment POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create assignment' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { action, assignment_id, returned_at } = body;\n\n    if (action === 'return' && assignment_id) {\n      const returnDate = returned_at ? new Date(returned_at).toISOString() : new Date().toISOString();\n\n      // Try to update in Supabase first\n      try {\n        const { data: updatedAssignment, error } = await supabase\n          .from('equipment_assignments')\n          .update({ to_ts: returnDate })\n          .eq('id', assignment_id)\n          .select()\n          .single();\n\n        if (error) {\n          throw error;\n        }\n\n        console.log(`✅ Equipment returned in Supabase:`, {\n          assignmentId: assignment_id,\n          returnedAt: returnDate\n        });\n\n        return NextResponse.json({\n          message: 'Equipment returned successfully',\n          assignment: {\n            id: updatedAssignment.id,\n            returned_at: updatedAssignment.to_ts\n          }\n        });\n\n      } catch (supabaseError) {\n        console.warn('Supabase error, falling back to file storage:', supabaseError);\n\n        // Fallback to file storage\n        const assignments = loadAssignments();\n        const assignmentIndex = assignments.findIndex(a => a.id === assignment_id);\n\n        if (assignmentIndex === -1) {\n          return NextResponse.json(\n            { error: 'Assignment not found' },\n            { status: 404 }\n          );\n        }\n\n        assignments[assignmentIndex].returned_at = returnDate;\n        assignments[assignmentIndex].updated_at = new Date().toISOString();\n        saveAssignments(assignments);\n\n        console.log(`✅ Equipment returned in file storage:`, {\n          assignmentId: assignment_id,\n          returnedAt: returnDate\n        });\n\n        return NextResponse.json({\n          message: 'Equipment returned successfully',\n          assignment: {\n            id: assignment_id,\n            returned_at: returnDate\n          }\n        });\n      }\n    }\n\n    return NextResponse.json(\n      { error: 'Invalid action or missing assignment_id' },\n      { status: 400 }\n    );\n\n  } catch (error) {\n    console.error('Equipment assignment PUT error:', error);\n    return NextResponse.json(\n      { error: 'Failed to update assignment' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}