{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/zone-layout/cabinets/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get(\"project_id\");\n\n    if (!project_id) {\n      return NextResponse.json(\n        { error: \"Project ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Fetch cabinets from database\n    const { data: cabinets, error } = await supabase\n      .from('cabinets')\n      .select(`\n        id,\n        project_id,\n        code,\n        name,\n        address,\n        geom_point,\n        created_at,\n        updated_at\n      `)\n      .eq('project_id', project_id)\n      .order('created_at', { ascending: true });\n\n    if (error) {\n      console.error('Supabase cabinets query error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch cabinets from database' },\n        { status: 500 }\n      );\n    }\n\n    // Transform data for frontend compatibility\n    const transformedCabinets = (cabinets || []).map(cabinet => ({\n      id: cabinet.id,\n      code: cabinet.code || '',\n      name: cabinet.name || '',\n      address: cabinet.address || '',\n      notes: '', // Add notes field if needed\n      segment_count: 0, // Will be calculated separately if needed\n      total_length: 0, // Will be calculated separately if needed\n      status: 'active' // Default status\n    }));\n\n    return NextResponse.json(transformedCabinets);\n  } catch (error) {\n    console.error(\"Zone layout cabinets API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch cabinets\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { project_id, code, name, address, notes } = body;\n\n    if (!project_id || !code || !name) {\n      return NextResponse.json(\n        { error: \"Project ID, code, and name are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Create cabinet in database\n    const { data: newCabinet, error } = await supabase\n      .from('cabinets')\n      .insert({\n        project_id,\n        code,\n        name,\n        address: address || null,\n        geom_point: null // Can be set later when coordinates are available\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Supabase cabinet creation error:', error);\n      return NextResponse.json(\n        { error: 'Failed to create cabinet in database' },\n        { status: 500 }\n      );\n    }\n\n    const response = {\n      success: true,\n      cabinet_id: newCabinet.id,\n      message: \"Cabinet created successfully\",\n      cabinet: {\n        id: newCabinet.id,\n        code: newCabinet.code,\n        name: newCabinet.name,\n        address: newCabinet.address,\n        created_at: newCabinet.created_at\n      }\n    };\n\n    return NextResponse.json(response, { status: 201 });\n  } catch (error) {\n    console.error(\"Zone layout cabinets POST error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create cabinet\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,WAAW,IAAA,yMAAY,gFAE3B,QAAQ,GAAG,CAAC,yBAAyB;AAGhC,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,aAAa,aAAa,GAAG,CAAC;QAEpC,IAAI,CAAC,YAAY;YACf,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,EAAE,MAAM,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,SACrC,IAAI,CAAC,YACL,MAAM,CAAC,CAAC;;;;;;;;;MAST,CAAC,EACA,EAAE,CAAC,cAAc,YACjB,KAAK,CAAC,cAAc;YAAE,WAAW;QAAK;QAEzC,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,kCAAkC;YAChD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,4CAA4C;QAC5C,MAAM,sBAAsB,CAAC,YAAY,EAAE,EAAE,GAAG,CAAC,CAAA,UAAW,CAAC;gBAC3D,IAAI,QAAQ,EAAE;gBACd,MAAM,QAAQ,IAAI,IAAI;gBACtB,MAAM,QAAQ,IAAI,IAAI;gBACtB,SAAS,QAAQ,OAAO,IAAI;gBAC5B,OAAO;gBACP,eAAe;gBACf,cAAc;gBACd,QAAQ,SAAS,iBAAiB;YACpC,CAAC;QAED,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG;QAEnD,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM;YACjC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0C,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,MAAM,EAAE,MAAM,UAAU,EAAE,KAAK,EAAE,GAAG,MAAM,SACvC,IAAI,CAAC,YACL,MAAM,CAAC;YACN;YACA;YACA;YACA,SAAS,WAAW;YACpB,YAAY,KAAK,kDAAkD;QACrE,GACC,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,oCAAoC;YAClD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW;YACf,SAAS;YACT,YAAY,WAAW,EAAE;YACzB,SAAS;YACT,SAAS;gBACP,IAAI,WAAW,EAAE;gBACjB,MAAM,WAAW,IAAI;gBACrB,MAAM,WAAW,IAAI;gBACrB,SAAS,WAAW,OAAO;gBAC3B,YAAY,WAAW,UAAU;YACnC;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC,UAAU;YAAE,QAAQ;QAAI;IACnD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}