{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/materials/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Material ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get material details from Supabase\n    const { data: material, error } = await supabase\n      .from('materials')\n      .select(`\n        id,\n        name,\n        category,\n        unit,\n        unit_price_eur,\n        supplier_name,\n        description,\n        is_active,\n        current_stock,\n        min_stock_threshold,\n        created_at,\n        updated_at\n      `)\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Material not found' },\n          { status: 404 }\n        );\n      }\n      console.error('Supabase material query error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch material' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(material);\n  } catch (error) {\n    console.error('Material API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Material ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Build update data object (only include provided fields)\n    const updateData: any = {};\n    const allowedFields = [\n      'name', 'category', 'unit', 'unit_price_eur',\n      'supplier_name', 'description', 'is_active'\n    ];\n\n    for (const field of allowedFields) {\n      if (body[field] !== undefined) {\n        updateData[field] = body[field];\n      }\n    }\n\n    if (Object.keys(updateData).length === 0) {\n      return NextResponse.json(\n        { error: 'No valid fields to update' },\n        { status: 400 }\n      );\n    }\n\n    // Add updated_at timestamp\n    updateData.updated_at = new Date().toISOString();\n\n    // Update the material\n    const { data: material, error } = await supabase\n      .from('materials')\n      .update(updateData)\n      .eq('id', id)\n      .select(`\n        id,\n        name,\n        category,\n        unit,\n        unit_price_eur,\n        supplier_name,\n        description,\n        is_active,\n        created_at,\n        updated_at\n      `)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Material not found' },\n          { status: 404 }\n        );\n      }\n      console.error('Supabase material update error:', error);\n      return NextResponse.json(\n        { error: 'Failed to update material' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: 'Material updated successfully',\n      material: material\n    });\n  } catch (error) {\n    console.error('Update material error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Material ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Check if material exists first\n    const { data: existingMaterial, error: checkError } = await supabase\n      .from('materials')\n      .select('id, name')\n      .eq('id', id)\n      .single();\n\n    if (checkError || !existingMaterial) {\n      return NextResponse.json(\n        { error: 'Material not found' },\n        { status: 404 }\n      );\n    }\n\n    // Instead of hard delete, we'll soft delete by setting is_active = false\n    // This preserves referential integrity with existing allocations/orders\n    const { error } = await supabase\n      .from('materials')\n      .update({\n        is_active: false,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', id);\n\n    if (error) {\n      console.error('Supabase material deletion error:', error);\n      return NextResponse.json(\n        { error: 'Failed to delete material' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: 'Material deleted successfully',\n      deleted_material: existingMaterial\n    });\n  } catch (error) {\n    console.error('Delete material error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}