{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/admin/clear-database/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function POST(request: NextRequest) {\n  try {\n    console.log('🗑️ Starting COMPREHENSIVE database cleanup of ALL tables...');\n\n    // Comprehensive list of ALL possible tables in COMETA database\n    // We'll try to clear all of these - errors for non-existent tables are okay\n    const tablesToClear = [\n      // Core Application Tables - Equipment & Vehicles\n      'equipment',\n      'equipment_assignments',\n      'equipment_categories',\n      'equipment_maintenance',\n      'equipment_history',\n      'vehicles',\n      'vehicle_assignments',\n      'vehicle_maintenance',\n      'vehicle_history',\n      'vehicle_categories',\n\n      // Projects & Work Management\n      'projects',\n      'project_documents',\n      'project_phases',\n      'project_milestones',\n      'work_entries',\n      'work_entry_photos',\n      'work_entry_documents',\n      'cabinets',\n      'cabinet_documents',\n      'segments',\n      'segment_documents',\n      'cuts',\n      'cut_documents',\n      'cut_photos',\n\n      // Materials & Inventory\n      'materials',\n      'material_categories',\n      'material_allocations',\n      'material_assignments',\n      'material_orders',\n      'material_order_items',\n      'material_order_history',\n      'material_receipts',\n      'material_returns',\n      'material_adjustments',\n      'inventory_transactions',\n      'inventory_counts',\n      'stock_movements',\n\n      // Suppliers & Vendors\n      'suppliers',\n      'supplier_contacts',\n      'supplier_materials',\n      'supplier_agreements',\n      'supplier_project_assignments',\n      'supplier_evaluations',\n      'vendor_contacts',\n      'vendor_agreements',\n\n      // Teams & Human Resources\n      'teams',\n      'team_members',\n      'team_assignments',\n      'crews',\n      'crew_members',\n      'crew_assignments',\n      'crew_schedules',\n      'user_profiles',\n      'user_preferences',\n      'user_settings',\n      'user_permissions',\n      'user_roles',\n      'user_sessions',\n      'user_activity',\n      'employee_records',\n      'employee_schedules',\n      'employee_timesheets',\n\n      // Financial & Cost Management\n      'costs',\n      'cost_categories',\n      'cost_allocations',\n      'transactions',\n      'transaction_categories',\n      'invoices',\n      'invoice_items',\n      'invoice_payments',\n      'purchase_orders',\n      'purchase_order_items',\n      'receipts',\n      'expense_reports',\n      'budget_allocations',\n      'financial_reports',\n\n      // Notifications & Communications\n      'notifications',\n      'notification_preferences',\n      'messages',\n      'announcements',\n      'alerts',\n      'email_logs',\n      'sms_logs',\n      'communication_logs',\n\n      // System & Administrative\n      'activities',\n      'activity_logs',\n      'audit_logs',\n      'system_logs',\n      'error_logs',\n      'access_logs',\n      'performance_logs',\n      'settings',\n      'system_settings',\n      'application_settings',\n      'feature_flags',\n      'configuration',\n\n      // Documents & Files\n      'documents',\n      'document_categories',\n      'file_uploads',\n      'file_metadata',\n      'attachments',\n      'photos',\n      'photo_metadata',\n\n      // Reports & Analytics\n      'reports',\n      'report_schedules',\n      'report_exports',\n      'exports',\n      'export_history',\n      'imports',\n      'import_history',\n      'data_exports',\n      'analytics_data',\n\n      // Backup & Maintenance\n      'backups',\n      'backup_history',\n      'migrations',\n      'migration_history',\n      'schema_versions',\n      'data_migrations',\n\n      // Temporary & Cache\n      'temporary_data',\n      'temp_uploads',\n      'cache_entries',\n      'session_data',\n      'job_queue',\n      'background_jobs',\n      'scheduled_tasks',\n\n      // Quality & Compliance\n      'quality_checks',\n      'compliance_records',\n      'inspection_reports',\n      'safety_records',\n      'incident_reports',\n\n      // Additional potential tables\n      'addresses',\n      'contacts',\n      'locations',\n      'coordinates',\n      'measurements',\n      'specifications',\n      'standards',\n      'regulations',\n      'approvals',\n      'certifications',\n      'licenses',\n      'permits'\n    ];\n\n    const results = [];\n\n    for (const table of tablesToClear) {\n      try {\n        console.log(`Clearing table: ${table}`);\n\n        const { error } = await supabase\n          .from(table)\n          .delete()\n          .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all records\n\n        if (error) {\n          console.warn(`Warning clearing ${table}:`, error.message);\n          results.push({ table, status: 'warning', message: error.message });\n        } else {\n          console.log(`✅ Cleared ${table}`);\n          results.push({ table, status: 'success' });\n        }\n      } catch (tableError) {\n        console.warn(`Error clearing ${table}:`, tableError);\n        results.push({ table, status: 'error', message: String(tableError) });\n      }\n    }\n\n    // Also clear any file storage buckets if needed\n    try {\n      const buckets = [\n        'project-photos',\n        'work-photos',\n        'user-avatars',\n        'project-documents',\n        'house-documents',\n        'reports'\n      ];\n\n      for (const bucket of buckets) {\n        try {\n          const { data: files } = await supabase.storage.from(bucket).list();\n          if (files && files.length > 0) {\n            const filePaths = files.map(file => file.name);\n            await supabase.storage.from(bucket).remove(filePaths);\n            console.log(`🗑️ Cleared storage bucket: ${bucket}`);\n          }\n        } catch (bucketError) {\n          console.warn(`Warning clearing bucket ${bucket}:`, bucketError);\n        }\n      }\n    } catch (storageError) {\n      console.warn('Storage cleanup warning:', storageError);\n    }\n\n    console.log('🧹 Database cleanup completed!');\n\n    const successCount = results.filter(r => r.status === 'success').length;\n    const warningCount = results.filter(r => r.status === 'warning').length;\n    const errorCount = results.filter(r => r.status === 'error').length;\n\n    return NextResponse.json({\n      success: true,\n      message: `COMPREHENSIVE database cleanup completed (users preserved)`,\n      results: results,\n      total_tables_attempted: tablesToClear.length,\n      successfully_cleared: successCount,\n      warnings: warningCount,\n      errors: errorCount,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Database cleanup error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to clear database',\n        details: error instanceof Error ? error.message : String(error)\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,WAAW,IAAA,yMAAY,gFAE3B,QAAQ,GAAG,CAAC,yBAAyB;AAGhC,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,+DAA+D;QAC/D,4EAA4E;QAC5E,MAAM,gBAAgB;YACpB,iDAAiD;YACjD;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,6BAA6B;YAC7B;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,wBAAwB;YACxB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,sBAAsB;YACtB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,0BAA0B;YAC1B;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,8BAA8B;YAC9B;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,iCAAiC;YACjC;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,0BAA0B;YAC1B;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,oBAAoB;YACpB;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,sBAAsB;YACtB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,uBAAuB;YACvB;YACA;YACA;YACA;YACA;YACA;YAEA,oBAAoB;YACpB;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,uBAAuB;YACvB;YACA;YACA;YACA;YACA;YAEA,8BAA8B;YAC9B;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QAED,MAAM,UAAU,EAAE;QAElB,KAAK,MAAM,SAAS,cAAe;YACjC,IAAI;gBACF,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,OAAO;gBAEtC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,OACL,MAAM,GACN,GAAG,CAAC,MAAM,yCAAyC,qBAAqB;gBAE3E,IAAI,OAAO;oBACT,QAAQ,IAAI,CAAC,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,OAAO;oBACxD,QAAQ,IAAI,CAAC;wBAAE;wBAAO,QAAQ;wBAAW,SAAS,MAAM,OAAO;oBAAC;gBAClE,OAAO;oBACL,QAAQ,GAAG,CAAC,CAAC,UAAU,EAAE,OAAO;oBAChC,QAAQ,IAAI,CAAC;wBAAE;wBAAO,QAAQ;oBAAU;gBAC1C;YACF,EAAE,OAAO,YAAY;gBACnB,QAAQ,IAAI,CAAC,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,EAAE;gBACzC,QAAQ,IAAI,CAAC;oBAAE;oBAAO,QAAQ;oBAAS,SAAS,OAAO;gBAAY;YACrE;QACF;QAEA,gDAAgD;QAChD,IAAI;YACF,MAAM,UAAU;gBACd;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YAED,KAAK,MAAM,UAAU,QAAS;gBAC5B,IAAI;oBACF,MAAM,EAAE,MAAM,KAAK,EAAE,GAAG,MAAM,SAAS,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI;oBAChE,IAAI,SAAS,MAAM,MAAM,GAAG,GAAG;wBAC7B,MAAM,YAAY,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,IAAI;wBAC7C,MAAM,SAAS,OAAO,CAAC,IAAI,CAAC,QAAQ,MAAM,CAAC;wBAC3C,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,QAAQ;oBACrD;gBACF,EAAE,OAAO,aAAa;oBACpB,QAAQ,IAAI,CAAC,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC,EAAE;gBACrD;YACF;QACF,EAAE,OAAO,cAAc;YACrB,QAAQ,IAAI,CAAC,4BAA4B;QAC3C;QAEA,QAAQ,GAAG,CAAC;QAEZ,MAAM,eAAe,QAAQ,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,WAAW,MAAM;QACvE,MAAM,eAAe,QAAQ,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,WAAW,MAAM;QACvE,MAAM,aAAa,QAAQ,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,SAAS,MAAM;QAEnE,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS,CAAC,0DAA0D,CAAC;YACrE,SAAS;YACT,wBAAwB,cAAc,MAAM;YAC5C,sBAAsB;YACtB,UAAU;YACV,QAAQ;YACR,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QAC3D,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}