{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/projects/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get project with manager details using Supabase\n    const { data: project, error } = await supabase\n      .from('projects')\n      .select(`\n        id,\n        name,\n        customer,\n        city,\n        address,\n        contact_24h,\n        start_date,\n        end_date_plan,\n        status,\n        total_length_m,\n        base_rate_per_m,\n        pm_user_id,\n        language_default,\n        created_at,\n        updated_at,\n        manager:users!projects_pm_user_id_fkey(\n          id,\n          first_name,\n          last_name,\n          email\n        )\n      `)\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Project not found' },\n          { status: 404 }\n        );\n      }\n      console.error('Supabase project query error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch project' },\n        { status: 500 }\n      );\n    }\n\n    // Format response with calculated fields\n    const projectResponse = {\n      ...project,\n      manager_name: project.manager ? `${project.manager.first_name} ${project.manager.last_name}` : null,\n      manager_email: project.manager?.email || null,\n      progress: Math.floor(Math.random() * 60 + 20), // Mock progress for now\n      description: `Fiber optic construction project in ${project.city || 'various locations'}`,\n      budget: (project.total_length_m || 0) * (project.base_rate_per_m || 0)\n    };\n\n    return NextResponse.json(projectResponse);\n  } catch (error) {\n    console.error('Project API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Build update data object (only include provided fields)\n    const updateData: any = {};\n    const allowedFields = [\n      'name', 'customer', 'city', 'address', 'contact_24h',\n      'start_date', 'end_date_plan', 'status', 'total_length_m',\n      'base_rate_per_m', 'pm_user_id', 'language_default'\n    ];\n\n    for (const field of allowedFields) {\n      if (body[field] !== undefined) {\n        updateData[field] = body[field];\n      }\n    }\n\n    if (Object.keys(updateData).length === 0) {\n      return NextResponse.json(\n        { error: 'No valid fields to update' },\n        { status: 400 }\n      );\n    }\n\n    // Add updated_at timestamp\n    updateData.updated_at = new Date().toISOString();\n\n    // Update the project\n    const { data: project, error } = await supabase\n      .from('projects')\n      .update(updateData)\n      .eq('id', id)\n      .select(`\n        id,\n        name,\n        customer,\n        city,\n        address,\n        contact_24h,\n        start_date,\n        end_date_plan,\n        status,\n        total_length_m,\n        base_rate_per_m,\n        pm_user_id,\n        language_default,\n        created_at,\n        updated_at,\n        manager:users!projects_pm_user_id_fkey(\n          id,\n          first_name,\n          last_name,\n          email\n        )\n      `)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Project not found' },\n          { status: 404 }\n        );\n      }\n      console.error('Supabase project update error:', error);\n      return NextResponse.json(\n        { error: 'Failed to update project' },\n        { status: 500 }\n      );\n    }\n\n    // Format response with calculated fields\n    const projectResponse = {\n      ...project,\n      manager_name: project.manager ? `${project.manager.first_name} ${project.manager.last_name}` : null,\n      manager_email: project.manager?.email || null,\n      progress: Math.floor(Math.random() * 60 + 20),\n      description: `Fiber optic construction project in ${project.city || 'various locations'}`,\n      budget: (project.total_length_m || 0) * (project.base_rate_per_m || 0)\n    };\n\n    return NextResponse.json({\n      message: 'Project updated successfully',\n      project: projectResponse\n    });\n  } catch (error) {\n    console.error('Update project error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Check if project exists first\n    const { data: existingProject, error: checkError } = await supabase\n      .from('projects')\n      .select('id, name')\n      .eq('id', id)\n      .single();\n\n    if (checkError || !existingProject) {\n      return NextResponse.json(\n        { error: 'Project not found' },\n        { status: 404 }\n      );\n    }\n\n    // Delete the project (cascade will handle related records)\n    const { error } = await supabase\n      .from('projects')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Supabase project deletion error:', error);\n      return NextResponse.json(\n        { error: 'Failed to delete project' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: 'Project deleted successfully',\n      deleted_project: existingProject\n    });\n  } catch (error) {\n    console.error('Delete project error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}