{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/resources/unified-assignments/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const crew_id = searchParams.get(\"crew_id\");\n    const project_id = searchParams.get(\"project_id\");\n    const active_only = searchParams.get(\"active_only\") === \"true\";\n\n    const assignments: any[] = [];\n\n    // Get equipment assignments\n    let equipmentQuery = supabase\n      .from(\"equipment_assignments\")\n      .select(`\n        id,\n        equipment_id,\n        crew_id,\n        project_id,\n        from_ts,\n        to_ts,\n        is_permanent,\n        rental_cost_per_day,\n        is_active,\n        equipment:equipment(\n          id,\n          name,\n          type,\n          inventory_no\n        )\n      `);\n\n    if (crew_id) {\n      equipmentQuery = equipmentQuery.eq(\"crew_id\", crew_id);\n    }\n    if (project_id) {\n      equipmentQuery = equipmentQuery.eq(\"project_id\", project_id);\n    }\n    if (active_only) {\n      equipmentQuery = equipmentQuery.eq(\"is_active\", true);\n    }\n\n    const { data: equipmentData, error: equipmentError } = await equipmentQuery.order(\"from_ts\", { ascending: false });\n\n    if (equipmentError) {\n      console.error(\"Equipment assignments query error:\", equipmentError);\n    } else {\n      // Transform equipment assignments\n      (equipmentData || []).forEach((assignment: any) => {\n        assignments.push({\n          id: assignment.id,\n          resource_id: assignment.equipment_id,\n          resource_type: \"equipment\",\n          assignment_type: \"equipment\",\n          crew_id: assignment.crew_id,\n          project_id: assignment.project_id,\n          from_ts: assignment.from_ts,\n          to_ts: assignment.to_ts,\n          is_permanent: assignment.is_permanent,\n          rental_cost_per_day: assignment.rental_cost_per_day,\n          is_active: assignment.is_active,\n          equipment: assignment.equipment,\n          // For unified interface\n          name: assignment.equipment?.name || 'Unknown Equipment',\n          type: assignment.equipment?.type || 'equipment',\n          inventory_no: assignment.equipment?.inventory_no,\n        });\n      });\n    }\n\n    // Get vehicle assignments\n    let vehicleQuery = supabase\n      .from(\"vehicle_assignments\")\n      .select(`\n        id,\n        vehicle_id,\n        crew_id,\n        project_id,\n        from_ts,\n        to_ts,\n        is_permanent,\n        rental_cost_per_day,\n        is_active,\n        vehicle:vehicles(\n          id,\n          brand,\n          model,\n          plate_number,\n          type\n        )\n      `);\n\n    if (crew_id) {\n      vehicleQuery = vehicleQuery.eq(\"crew_id\", crew_id);\n    }\n    if (project_id) {\n      vehicleQuery = vehicleQuery.eq(\"project_id\", project_id);\n    }\n    if (active_only) {\n      vehicleQuery = vehicleQuery.eq(\"is_active\", true);\n    }\n\n    const { data: vehicleData, error: vehicleError } = await vehicleQuery.order(\"from_ts\", { ascending: false });\n\n    if (vehicleError) {\n      console.error(\"Vehicle assignments query error:\", vehicleError);\n    } else {\n      // Transform vehicle assignments\n      (vehicleData || []).forEach((assignment: any) => {\n        assignments.push({\n          id: assignment.id,\n          resource_id: assignment.vehicle_id,\n          resource_type: \"vehicle\",\n          assignment_type: \"vehicle\",\n          crew_id: assignment.crew_id,\n          project_id: assignment.project_id,\n          from_ts: assignment.from_ts,\n          to_ts: assignment.to_ts,\n          is_permanent: assignment.is_permanent,\n          rental_cost_per_day: assignment.rental_cost_per_day,\n          is_active: assignment.is_active,\n          vehicle: assignment.vehicle,\n          // For unified interface\n          name: assignment.vehicle ? `${assignment.vehicle.brand} ${assignment.vehicle.model}` : 'Unknown Vehicle',\n          type: assignment.vehicle?.type || 'vehicle',\n          plate_number: assignment.vehicle?.plate_number,\n        });\n      });\n    }\n\n    // Sort by from_ts descending\n    assignments.sort((a, b) => {\n      const dateA = new Date(a.from_ts || 0).getTime();\n      const dateB = new Date(b.from_ts || 0).getTime();\n      return dateB - dateA;\n    });\n\n    return NextResponse.json(assignments);\n  } catch (error) {\n    console.error(\"Unified assignments API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { resource_type, resource_id, crew_id, project_id, from_ts, to_ts, is_permanent, rental_cost_per_day } = body;\n\n    // Validate required fields\n    if (!resource_type || !resource_id || !crew_id) {\n      return NextResponse.json(\n        { error: \"resource_type, resource_id, and crew_id are required\" },\n        { status: 400 }\n      );\n    }\n\n    let result;\n\n    if (resource_type === \"equipment\") {\n      const { data: assignment, error } = await supabase\n        .from(\"equipment_assignments\")\n        .insert([{\n          equipment_id: resource_id,\n          crew_id,\n          project_id,\n          from_ts,\n          to_ts,\n          is_permanent: is_permanent || false,\n          rental_cost_per_day: rental_cost_per_day || 0,\n          is_active: true,\n        }])\n        .select(`\n          id,\n          equipment_id,\n          crew_id,\n          project_id,\n          from_ts,\n          to_ts,\n          is_permanent,\n          rental_cost_per_day,\n          is_active,\n          equipment:equipment(id, name, type, inventory_no)\n        `)\n        .single();\n\n      if (error) throw error;\n      result = assignment;\n    } else if (resource_type === \"vehicle\") {\n      const { data: assignment, error } = await supabase\n        .from(\"vehicle_assignments\")\n        .insert([{\n          vehicle_id: resource_id,\n          crew_id,\n          project_id,\n          from_ts,\n          to_ts,\n          is_permanent: is_permanent || false,\n          rental_cost_per_day: rental_cost_per_day || 0,\n          is_active: true,\n        }])\n        .select(`\n          id,\n          vehicle_id,\n          crew_id,\n          project_id,\n          from_ts,\n          to_ts,\n          is_permanent,\n          rental_cost_per_day,\n          is_active,\n          vehicle:vehicles(id, brand, model, plate_number, type)\n        `)\n        .single();\n\n      if (error) throw error;\n      result = assignment;\n    } else {\n      return NextResponse.json(\n        { error: \"Invalid resource_type. Must be 'equipment' or 'vehicle'\" },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      {\n        success: true,\n        assignment_id: result.id,\n        message: `${resource_type} assignment created successfully`,\n        assignment: result,\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Unified assignment creation error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create assignment\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}