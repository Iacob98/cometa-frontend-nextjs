{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/suppliers/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// Service role client for bypassing RLS\nconst supabaseService = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const per_page = parseInt(searchParams.get(\"per_page\") || \"20\");\n    const offset = (page - 1) * per_page;\n    const search = searchParams.get(\"search\");\n    const is_active = searchParams.get(\"is_active\");\n    const rating = searchParams.get(\"rating\");\n\n    let query = supabaseService\n      .from(\"suppliers\")\n      .select(\n        `\n        id,\n        name,\n        short_name,\n        contact_person,\n        email,\n        phone,\n        address,\n        tax_number,\n        payment_terms,\n        rating,\n        is_active,\n        notes,\n        created_at,\n        updated_at\n      `,\n        { count: \"exact\" }\n      )\n      .order(\"name\", { ascending: true })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters\n    if (is_active !== null) {\n      query = query.eq(\"is_active\", is_active === \"true\");\n    }\n\n    if (rating) {\n      query = query.eq(\"rating\", parseInt(rating));\n    }\n\n    if (search) {\n      query = query.or(\n        `name.ilike.%${search}%,short_name.ilike.%${search}%,contact_person.ilike.%${search}%,email.ilike.%${search}%`\n      );\n    }\n\n    const { data: suppliers, error, count } = await query;\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch suppliers from database\" },\n        { status: 500 }\n      );\n    }\n\n    // Get materials count for each supplier\n    const suppliersWithCounts = await Promise.all(\n      (suppliers || []).map(async (supplier) => {\n        const { count: materialsCount } = await supabaseService\n          .from(\"supplier_materials\")\n          .select(\"*\", { count: \"exact\", head: true })\n          .eq(\"supplier_id\", supplier.id);\n\n        return {\n          ...supplier,\n          org_name: supplier.name, // Map name to org_name for frontend compatibility\n          materials_count: materialsCount || 0,\n        };\n      })\n    );\n\n    return NextResponse.json({\n      items: suppliersWithCounts,\n      total: count || 0,\n      page,\n      per_page,\n      total_pages: Math.ceil((count || 0) / per_page),\n    });\n  } catch (error) {\n    console.error(\"Suppliers API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch suppliers\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      name,\n      short_name,\n      contact_person,\n      email,\n      phone,\n      address,\n      tax_number,\n      payment_terms,\n      rating,\n      is_active = true,\n      notes,\n    } = body;\n\n    // Validation\n    if (!name) {\n      return NextResponse.json(\n        { error: \"Name is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Email validation if provided\n    if (email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n      return NextResponse.json(\n        { error: \"Invalid email format\" },\n        { status: 400 }\n      );\n    }\n\n    // Rating validation\n    if (rating && (rating < 1 || rating > 5)) {\n      return NextResponse.json(\n        { error: \"Rating must be between 1 and 5\" },\n        { status: 400 }\n      );\n    }\n\n    // Create supplier in Supabase using service role to bypass RLS\n    const { data: supplier, error } = await supabaseService\n      .from(\"suppliers\")\n      .insert([\n        {\n          name,\n          short_name: short_name || null,\n          contact_person: contact_person || null,\n          email: email || null,\n          phone: phone || null,\n          address: address || null,\n          tax_number: tax_number || null,\n          payment_terms: payment_terms || null,\n          rating: rating || null,\n          is_active: is_active !== false,\n          notes: notes || null\n        },\n      ])\n      .select(\n        `\n        id,\n        name,\n        short_name,\n        contact_person,\n        email,\n        phone,\n        address,\n        tax_number,\n        payment_terms,\n        rating,\n        is_active,\n        notes,\n        created_at,\n        updated_at\n      `\n      )\n      .single();\n\n    if (error) {\n      console.error(\"Supabase error creating supplier:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create supplier in database\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      ...supplier,\n      org_name: supplier.name, // Map name to org_name for frontend compatibility\n      materials_count: 0,\n    }, { status: 201 });\n  } catch (error) {\n    console.error(\"Create supplier error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create supplier\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}