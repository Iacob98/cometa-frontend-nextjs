{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Supabase configuration\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\n// Create a single supabase client for interacting with your database\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true,\n  },\n})\n\n// Storage bucket names from environment\nexport const STORAGE_BUCKETS = {\n  PROJECT_PHOTOS: process.env.SUPABASE_PROJECT_PHOTOS_BUCKET || 'project-photos',\n  WORK_PHOTOS: process.env.SUPABASE_WORK_PHOTOS_BUCKET || 'work-photos',\n  PROJECT_DOCUMENTS: process.env.SUPABASE_PROJECT_DOCUMENTS_BUCKET || 'project-documents',\n  HOUSE_DOCUMENTS: process.env.SUPABASE_HOUSE_DOCUMENTS_BUCKET || 'house-documents',\n  USER_AVATARS: process.env.SUPABASE_USER_AVATARS_BUCKET || 'user-avatars',\n  REPORTS: process.env.SUPABASE_REPORTS_BUCKET || 'reports',\n} as const\n\n// File upload configuration\nexport const FILE_UPLOAD_CONFIG = {\n  // Maximum file size: 10MB\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n\n  // Maximum files per batch upload\n  MAX_FILES_PER_BATCH: 5,\n\n  // Allowed file types\n  ALLOWED_FILE_TYPES: {\n    IMAGES: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n    DOCUMENTS: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n    SPREADSHEETS: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\n    PLANS: ['application/pdf', 'application/dwg', 'application/dxf', 'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/bmp', 'image/tiff'],\n  },\n\n  // Get all allowed MIME types\n  getAllowedTypes: () => {\n    const allTypes = [\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.IMAGES,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.DOCUMENTS,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.SPREADSHEETS,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.PLANS,\n    ];\n    // Remove duplicates using Set\n    return [...new Set(allTypes)];\n  },\n} as const\n\n// File validation utilities\nexport const validateFile = (file: File) => {\n  const errors: string[] = []\n\n  // Check file size\n  if (file.size > FILE_UPLOAD_CONFIG.MAX_FILE_SIZE) {\n    errors.push(`File size must be less than ${FILE_UPLOAD_CONFIG.MAX_FILE_SIZE / (1024 * 1024)}MB`)\n  }\n\n  // Check file type\n  const allowedTypes = FILE_UPLOAD_CONFIG.getAllowedTypes()\n  console.log('🔍 File validation:', {\n    fileName: file.name,\n    fileType: file.type,\n    allowedTypes,\n    isTypeAllowed: allowedTypes.includes(file.type)\n  });\n\n  if (!allowedTypes.includes(file.type)) {\n    errors.push(`File type ${file.type} is not allowed`)\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  }\n}\n\n// Generate secure file name\nexport const generateSecureFileName = (originalFileName: string, userId?: string) => {\n  const timestamp = Date.now()\n  const randomString = Math.random().toString(36).substring(2, 15)\n  const fileExtension = originalFileName.split('.').pop()\n  const baseName = originalFileName.split('.')[0].toLowerCase().replace(/[^a-z0-9]/g, '-')\n\n  const prefix = userId ? `${userId}_` : ''\n  return `${prefix}${baseName}_${timestamp}_${randomString}.${fileExtension}`\n}\n\n// Get file category based on bucket\nexport const getFileCategoryFromBucket = (bucketName: string) => {\n  const bucketMap = {\n    [STORAGE_BUCKETS.PROJECT_PHOTOS]: 'project-photo',\n    [STORAGE_BUCKETS.WORK_PHOTOS]: 'work-photo',\n    [STORAGE_BUCKETS.PROJECT_DOCUMENTS]: 'project-document',\n    [STORAGE_BUCKETS.HOUSE_DOCUMENTS]: 'house-document',\n    [STORAGE_BUCKETS.USER_AVATARS]: 'user-avatar',\n    [STORAGE_BUCKETS.REPORTS]: 'report',\n  } as const\n\n  return bucketMap[bucketName as keyof typeof bucketMap] || 'unknown'\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/projects/%5Bid%5D/resources/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { supabase } from '@/lib/supabase'\n\ninterface Context {\n  params: { id: string }\n}\n\nexport async function GET(request: NextRequest, { params }: Context) {\n  try {\n    const { id: projectId } = await params\n\n    // Step 1: Get all crews assigned to this project\n    const { data: projectCrews, error: crewsError } = await supabase\n      .from('crews')\n      .select('id, name')\n      .eq('project_id', projectId)\n      .eq('status', 'active')\n\n    if (crewsError) {\n      console.error('Error fetching project crews:', crewsError)\n    }\n\n    const crewIds = projectCrews?.map(c => c.id) || []\n\n    // Step 2: Get crew-based equipment assignments (via crews on this project)\n    const crewEquipmentPromise = crewIds.length > 0\n      ? supabase\n          .from('equipment_assignments')\n          .select(`\n            *,\n            equipment:equipment_id (\n              id,\n              name,\n              type,\n              inventory_no,\n              status,\n              purchase_date\n            ),\n            crew:crew_id (\n              id,\n              name\n            )\n          `)\n          .in('crew_id', crewIds)\n          .eq('is_active', true)\n      : Promise.resolve({ data: [], error: null })\n\n    // Step 3: Get direct project equipment assignments (crew_id is null)\n    const directEquipmentPromise = supabase\n      .from('equipment_assignments')\n      .select(`\n        *,\n        equipment:equipment_id (\n          id,\n          name,\n          type,\n          inventory_no,\n          status,\n          purchase_date\n        )\n      `)\n      .eq('project_id', projectId)\n      .is('crew_id', null)\n      .eq('is_active', true)\n\n    // Step 4: Get crew-based vehicle assignments (via crews on this project)\n    const crewVehiclesPromise = crewIds.length > 0\n      ? supabase\n          .from('vehicle_assignments')\n          .select(`\n            *,\n            vehicle:vehicle_id (\n              id,\n              brand,\n              model,\n              plate_number,\n              type,\n              status,\n              fuel_consumption_l_per_100km\n            ),\n            crew:crew_id (\n              id,\n              name\n            )\n          `)\n          .in('crew_id', crewIds)\n          .eq('is_active', true)\n      : Promise.resolve({ data: [], error: null })\n\n    // Step 5: Get direct project vehicle assignments (crew_id is null)\n    const directVehiclesPromise = supabase\n      .from('vehicle_assignments')\n      .select(`\n        *,\n        vehicle:vehicle_id (\n          id,\n          brand,\n          model,\n          plate_number,\n          type,\n          status,\n          fuel_consumption_l_per_100km\n        )\n      `)\n      .eq('project_id', projectId)\n      .is('crew_id', null)\n      .eq('is_active', true)\n\n    // Step 6: Get material allocations (unchanged)\n    const materialPromise = supabase\n      .from('material_allocations')\n      .select(`\n        *,\n        material:material_id (\n          id,\n          name,\n          category,\n          unit,\n          current_stock,\n          reorder_level,\n          price_per_unit\n        )\n      `)\n      .eq('project_id', projectId)\n\n    // Execute all queries in parallel\n    const [\n      crewEquipmentRes,\n      directEquipmentRes,\n      crewVehiclesRes,\n      directVehiclesRes,\n      materialRes\n    ] = await Promise.all([\n      crewEquipmentPromise,\n      directEquipmentPromise,\n      crewVehiclesPromise,\n      directVehiclesPromise,\n      materialPromise\n    ])\n\n    if (crewEquipmentRes.error) {\n      console.error('Crew equipment query error:', crewEquipmentRes.error)\n    }\n    if (directEquipmentRes.error) {\n      console.error('Direct equipment query error:', directEquipmentRes.error)\n    }\n    if (crewVehiclesRes.error) {\n      console.error('Crew vehicles query error:', crewVehiclesRes.error)\n    }\n    if (directVehiclesRes.error) {\n      console.error('Direct vehicles query error:', directVehiclesRes.error)\n    }\n    if (materialRes.error) {\n      console.error('Material query error:', materialRes.error)\n    }\n\n    // Helper function to calculate days and total cost for a resource\n    const calculateResourceCosts = (resource: any) => {\n      const dailyRate = Number(resource.rental_cost_per_day) || 0\n      let days = 0\n      let totalCost = 0\n      let period = ''\n\n      if (resource.to_ts) {\n        // Calculate days between from_ts and to_ts\n        const fromDate = new Date(resource.from_ts)\n        const toDate = new Date(resource.to_ts)\n        days = Math.ceil((toDate.getTime() - fromDate.getTime()) / (1000 * 60 * 60 * 24))\n        totalCost = days * dailyRate\n        period = `${fromDate.toLocaleDateString('de-DE')} - ${toDate.toLocaleDateString('de-DE')}`\n      } else if (resource.is_permanent) {\n        // Permanent assignment - show daily rate but no total (ongoing cost)\n        period = 'Permanent'\n        days = 0\n        totalCost = 0 // Don't calculate total for permanent assignments\n      } else {\n        // Active assignment without end date - calculate from start to now\n        const fromDate = new Date(resource.from_ts)\n        const now = new Date()\n        days = Math.ceil((now.getTime() - fromDate.getTime()) / (1000 * 60 * 60 * 24))\n        totalCost = days * dailyRate\n        period = `Since ${fromDate.toLocaleDateString('de-DE')}`\n      }\n\n      return {\n        days,\n        daily_rate: dailyRate,\n        total_cost: Math.round(totalCost * 100) / 100,\n        period\n      }\n    }\n\n    // Merge and tag with assignment_source, flatten nested data, add calculated costs\n    const allEquipment = [\n      ...(crewEquipmentRes.data || []).map(e => {\n        const costs = calculateResourceCosts(e)\n        return {\n          id: e.id,\n          ...e.equipment, // Flatten equipment data to top level\n          crew: e.crew,\n          from_ts: e.from_ts,\n          to_ts: e.to_ts,\n          is_permanent: e.is_permanent,\n          rental_cost_per_day: e.rental_cost_per_day,\n          is_active: e.is_active,\n          assignment_source: 'crew_based' as const,\n          owned: e.rental_cost_per_day === 0,\n          ...costs // Add days, daily_rate, total_cost, period\n        }\n      }),\n      ...(directEquipmentRes.data || []).map(e => {\n        const costs = calculateResourceCosts(e)\n        return {\n          id: e.id,\n          ...e.equipment, // Flatten equipment data to top level\n          from_ts: e.from_ts,\n          to_ts: e.to_ts,\n          is_permanent: e.is_permanent,\n          rental_cost_per_day: e.rental_cost_per_day,\n          is_active: e.is_active,\n          assignment_source: 'direct' as const,\n          owned: e.rental_cost_per_day === 0,\n          ...costs // Add days, daily_rate, total_cost, period\n        }\n      })\n    ]\n\n    const allVehicles = [\n      ...(crewVehiclesRes.data || []).map(v => {\n        const costs = calculateResourceCosts(v)\n        return {\n          id: v.id,\n          ...v.vehicle, // Flatten vehicle data to top level\n          crew: v.crew,\n          from_ts: v.from_ts,\n          to_ts: v.to_ts,\n          is_permanent: v.is_permanent,\n          rental_cost_per_day: v.rental_cost_per_day,\n          is_active: v.is_active,\n          assignment_source: 'crew_based' as const,\n          owned: v.rental_cost_per_day === 0,\n          ...costs // Add days, daily_rate, total_cost, period\n        }\n      }),\n      ...(directVehiclesRes.data || []).map(v => {\n        const costs = calculateResourceCosts(v)\n        return {\n          id: v.id,\n          ...v.vehicle, // Flatten vehicle data to top level\n          from_ts: v.from_ts,\n          to_ts: v.to_ts,\n          is_permanent: v.is_permanent,\n          rental_cost_per_day: v.rental_cost_per_day,\n          is_active: v.is_active,\n          assignment_source: 'direct' as const,\n          owned: v.rental_cost_per_day === 0,\n          ...costs // Add days, daily_rate, total_cost, period\n        }\n      })\n    ]\n\n    // Calculate summary statistics\n    const totalDailyCost = [\n      ...allEquipment.map(e => Number(e.rental_cost_per_day) || 0),\n      ...allVehicles.map(v => Number(v.rental_cost_per_day) || 0)\n    ].reduce((sum, cost) => sum + cost, 0)\n\n    const summary = {\n      total_resources: allEquipment.length + allVehicles.length,\n      total_vehicles: allVehicles.length,\n      total_equipment: allEquipment.length,\n      total_cost: Math.round(totalDailyCost * 100) / 100 // Daily rental cost in EUR\n    }\n\n    const resources = {\n      equipment: allEquipment,\n      vehicles: allVehicles,\n      materials: materialRes.data || [],\n      summary\n    }\n\n    return NextResponse.json(resources)\n\n  } catch (error) {\n    console.error('Project resources error:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch project resources' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest, { params }: Context) {\n  try {\n    const { id: projectId } = await params\n    const body = await request.json()\n    const { type, resource_id, assigned_at, assigned_by, notes } = body\n\n    let result\n\n    switch (type) {\n      case 'equipment':\n        result = await supabase\n          .from('equipment_assignments')\n          .insert({\n            project_id: projectId,\n            equipment_id: resource_id,\n            assigned_at,\n            assigned_by,\n            notes,\n            status: 'active'\n          })\n        break\n\n      case 'vehicle':\n        result = await supabase\n          .from('vehicle_assignments')\n          .insert({\n            project_id: projectId,\n            vehicle_id: resource_id,\n            assigned_at,\n            assigned_by,\n            notes,\n            status: 'active'\n          })\n        break\n\n      case 'material':\n        const { quantity } = body\n        result = await supabase\n          .from('material_allocations')\n          .insert({\n            project_id: projectId,\n            material_id: resource_id,\n            allocated_quantity: quantity,\n            allocated_at: assigned_at,\n            allocated_by: assigned_by,\n            notes,\n            status: 'allocated'\n          })\n        break\n\n      default:\n        return NextResponse.json(\n          { error: 'Invalid resource type' },\n          { status: 400 }\n        )\n    }\n\n    if (result.error) {\n      console.error('Resource assignment error:', result.error)\n      return NextResponse.json(\n        { error: 'Failed to assign resource' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json(result.data)\n\n  } catch (error) {\n    console.error('Project resources assignment error:', error)\n    return NextResponse.json(\n      { error: 'Failed to assign resource' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}