{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Supabase configuration\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\n}\n\n// Create a single supabase client for interacting with your database\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true,\n  },\n})\n\n// Storage bucket names from environment\nexport const STORAGE_BUCKETS = {\n  PROJECT_PHOTOS: process.env.SUPABASE_PROJECT_PHOTOS_BUCKET || 'project-photos',\n  WORK_PHOTOS: process.env.SUPABASE_WORK_PHOTOS_BUCKET || 'work-photos',\n  PROJECT_DOCUMENTS: process.env.SUPABASE_PROJECT_DOCUMENTS_BUCKET || 'project-documents',\n  HOUSE_DOCUMENTS: process.env.SUPABASE_HOUSE_DOCUMENTS_BUCKET || 'house-documents',\n  USER_AVATARS: process.env.SUPABASE_USER_AVATARS_BUCKET || 'user-avatars',\n  REPORTS: process.env.SUPABASE_REPORTS_BUCKET || 'reports',\n} as const\n\n// File upload configuration\nexport const FILE_UPLOAD_CONFIG = {\n  // Maximum file size: 10MB\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n\n  // Maximum files per batch upload\n  MAX_FILES_PER_BATCH: 5,\n\n  // Allowed file types\n  ALLOWED_FILE_TYPES: {\n    IMAGES: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n    DOCUMENTS: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n    SPREADSHEETS: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\n    PLANS: ['application/pdf', 'application/dwg', 'application/dxf', 'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/bmp', 'image/tiff'],\n  },\n\n  // Get all allowed MIME types\n  getAllowedTypes: () => {\n    const allTypes = [\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.IMAGES,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.DOCUMENTS,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.SPREADSHEETS,\n      ...FILE_UPLOAD_CONFIG.ALLOWED_FILE_TYPES.PLANS,\n    ];\n    // Remove duplicates using Set\n    return [...new Set(allTypes)];\n  },\n} as const\n\n// File validation utilities\nexport const validateFile = (file: File) => {\n  const errors: string[] = []\n\n  // Check file size\n  if (file.size > FILE_UPLOAD_CONFIG.MAX_FILE_SIZE) {\n    errors.push(`File size must be less than ${FILE_UPLOAD_CONFIG.MAX_FILE_SIZE / (1024 * 1024)}MB`)\n  }\n\n  // Check file type\n  const allowedTypes = FILE_UPLOAD_CONFIG.getAllowedTypes()\n  console.log('🔍 File validation:', {\n    fileName: file.name,\n    fileType: file.type,\n    allowedTypes,\n    isTypeAllowed: allowedTypes.includes(file.type)\n  });\n\n  if (!allowedTypes.includes(file.type)) {\n    errors.push(`File type ${file.type} is not allowed`)\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  }\n}\n\n// Generate secure file name\nexport const generateSecureFileName = (originalFileName: string, userId?: string) => {\n  const timestamp = Date.now()\n  const randomString = Math.random().toString(36).substring(2, 15)\n  const fileExtension = originalFileName.split('.').pop()\n  const baseName = originalFileName.split('.')[0].toLowerCase().replace(/[^a-z0-9]/g, '-')\n\n  const prefix = userId ? `${userId}_` : ''\n  return `${prefix}${baseName}_${timestamp}_${randomString}.${fileExtension}`\n}\n\n// Get file category based on bucket\nexport const getFileCategoryFromBucket = (bucketName: string) => {\n  const bucketMap = {\n    [STORAGE_BUCKETS.PROJECT_PHOTOS]: 'project-photo',\n    [STORAGE_BUCKETS.WORK_PHOTOS]: 'work-photo',\n    [STORAGE_BUCKETS.PROJECT_DOCUMENTS]: 'project-document',\n    [STORAGE_BUCKETS.HOUSE_DOCUMENTS]: 'house-document',\n    [STORAGE_BUCKETS.USER_AVATARS]: 'user-avatar',\n    [STORAGE_BUCKETS.REPORTS]: 'report',\n  } as const\n\n  return bucketMap[bucketName as keyof typeof bucketMap] || 'unknown'\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/projects/%5Bid%5D/resources/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { supabase } from '@/lib/supabase'\n\ninterface Context {\n  params: { id: string }\n}\n\nexport async function GET(request: NextRequest, { params }: Context) {\n  try {\n    const { id: projectId } = await params\n\n    // Get all resources for the project including equipment assignments and vehicle assignments\n    const [equipmentRes, vehicleRes, materialRes] = await Promise.all([\n      // Get equipment assignments\n      supabase\n        .from('equipment_assignments')\n        .select(`\n          *,\n          equipment:equipment_id (\n            id,\n            name,\n            type,\n            serial_number,\n            status,\n            purchase_date,\n            warranty_expiry_date\n          )\n        `)\n        .eq('project_id', projectId),\n\n      // Get vehicle assignments\n      supabase\n        .from('vehicle_assignments')\n        .select(`\n          *,\n          vehicles:vehicle_id (\n            id,\n            license_plate,\n            make,\n            model,\n            year,\n            type,\n            status,\n            fuel_type\n          )\n        `)\n        .eq('project_id', projectId),\n\n      // Get material allocations\n      supabase\n        .from('material_allocations')\n        .select(`\n          *,\n          materials:material_id (\n            id,\n            name,\n            category,\n            unit,\n            current_stock,\n            reorder_level,\n            price_per_unit\n          )\n        `)\n        .eq('project_id', projectId)\n    ])\n\n    if (equipmentRes.error) {\n      console.error('Equipment query error:', equipmentRes.error)\n    }\n\n    if (vehicleRes.error) {\n      console.error('Vehicle query error:', vehicleRes.error)\n    }\n\n    if (materialRes.error) {\n      console.error('Material query error:', materialRes.error)\n    }\n\n    const resources = {\n      equipment: equipmentRes.data || [],\n      vehicles: vehicleRes.data || [],\n      materials: materialRes.data || []\n    }\n\n    return NextResponse.json(resources)\n\n  } catch (error) {\n    console.error('Project resources error:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch project resources' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest, { params }: Context) {\n  try {\n    const { id: projectId } = await params\n    const body = await request.json()\n    const { type, resource_id, assigned_at, assigned_by, notes } = body\n\n    let result\n\n    switch (type) {\n      case 'equipment':\n        result = await supabase\n          .from('equipment_assignments')\n          .insert({\n            project_id: projectId,\n            equipment_id: resource_id,\n            assigned_at,\n            assigned_by,\n            notes,\n            status: 'active'\n          })\n        break\n\n      case 'vehicle':\n        result = await supabase\n          .from('vehicle_assignments')\n          .insert({\n            project_id: projectId,\n            vehicle_id: resource_id,\n            assigned_at,\n            assigned_by,\n            notes,\n            status: 'active'\n          })\n        break\n\n      case 'material':\n        const { quantity } = body\n        result = await supabase\n          .from('material_allocations')\n          .insert({\n            project_id: projectId,\n            material_id: resource_id,\n            allocated_quantity: quantity,\n            allocated_at: assigned_at,\n            allocated_by: assigned_by,\n            notes,\n            status: 'allocated'\n          })\n        break\n\n      default:\n        return NextResponse.json(\n          { error: 'Invalid resource type' },\n          { status: 400 }\n        )\n    }\n\n    if (result.error) {\n      console.error('Resource assignment error:', result.error)\n      return NextResponse.json(\n        { error: 'Failed to assign resource' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json(result.data)\n\n  } catch (error) {\n    console.error('Project resources assignment error:', error)\n    return NextResponse.json(\n      { error: 'Failed to assign resource' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}