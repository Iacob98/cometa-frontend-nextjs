{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/notifications/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Notification ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const { data: notification, error } = await supabase\n      .from('in_app_notifications')\n      .select(`\n        id,\n        user_id,\n        title,\n        message,\n        notification_type,\n        priority,\n        is_read,\n        read_at,\n        action_url,\n        action_label,\n        expires_at,\n        created_at\n      `)\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      console.error('Supabase notification get error:', error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Notification not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to fetch notification' },\n        { status: 500 }\n      );\n    }\n\n    // Transform response to match frontend expectations\n    const transformedNotification = {\n      ...notification,\n      type: notification.notification_type,\n      body: notification.message,\n    };\n\n    return NextResponse.json(transformedNotification);\n  } catch (error) {\n    console.error('Notification GET error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch notification' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n    const { read = true } = body;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Notification ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const updateData: any = {\n      is_read: read,\n      read_at: read ? new Date().toISOString() : null\n    };\n\n    const { data: updatedNotification, error } = await supabase\n      .from('in_app_notifications')\n      .update(updateData)\n      .eq('id', id)\n      .select(`\n        id,\n        user_id,\n        title,\n        message,\n        notification_type,\n        priority,\n        is_read,\n        read_at,\n        action_url,\n        action_label,\n        expires_at,\n        created_at\n      `)\n      .single();\n\n    if (error) {\n      console.error('Supabase notification update error:', error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Notification not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to update notification' },\n        { status: 500 }\n      );\n    }\n\n    // Transform response to match frontend expectations\n    const transformedNotification = {\n      ...updatedNotification,\n      type: updatedNotification.notification_type,\n      body: updatedNotification.message,\n    };\n\n    return NextResponse.json({\n      message: 'Notification updated successfully',\n      notification: transformedNotification\n    });\n  } catch (error) {\n    console.error('Notification PATCH error:', error);\n    return NextResponse.json(\n      { error: 'Failed to update notification' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Notification ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const { error } = await supabase\n      .from('in_app_notifications')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Supabase notification delete error:', error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Notification not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to delete notification' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: 'Notification deleted successfully'\n    });\n  } catch (error) {\n    console.error('Notification DELETE error:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete notification' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}