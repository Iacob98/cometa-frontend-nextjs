{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/lib/db-client.ts"],"sourcesContent":["import { Pool } from 'pg';\n\n// Create a PostgreSQL connection pool for Supabase\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: false\n  },\n  max: 20, // Maximum number of connections in the pool\n  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle\n  connectionTimeoutMillis: 2000, // How long to wait when connecting to a client\n});\n\nexport { pool };\n\n// Utility function to execute SQL queries\nexport async function query(text: string, params?: any[]) {\n  const start = Date.now();\n  try {\n    const res = await pool.query(text, params);\n    const duration = Date.now() - start;\n    console.log('Executed query', { text: text.substring(0, 100) + '...', duration, rows: res.rowCount });\n    return res;\n  } catch (error) {\n    console.error('Database query error:', error);\n    throw error;\n  }\n}\n\n// Utility function for getting client from pool\nexport async function getClient() {\n  const client = await pool.connect();\n  return client;\n}"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;AAEA,mDAAmD;AACnD,MAAM,OAAO,IAAI,4GAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;IACA,KAAK;IACL,mBAAmB;IACnB,yBAAyB;AAC3B;;AAKO,eAAe,MAAM,IAAY,EAAE,MAAc;IACtD,MAAM,QAAQ,KAAK,GAAG;IACtB,IAAI;QACF,MAAM,MAAM,MAAM,KAAK,KAAK,CAAC,MAAM;QACnC,MAAM,WAAW,KAAK,GAAG,KAAK;QAC9B,QAAQ,GAAG,CAAC,kBAAkB;YAAE,MAAM,KAAK,SAAS,CAAC,GAAG,OAAO;YAAO;YAAU,MAAM,IAAI,QAAQ;QAAC;QACnG,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM;IACR;AACF;AAGO,eAAe;IACpB,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,OAAO;AACT","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/dashboard/stats/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/db-client';\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('Fetching dashboard statistics from database...');\n\n    // Get project statistics\n    const projectStatsQuery = `\n      SELECT\n        COUNT(*) as total_projects,\n        COUNT(CASE WHEN status = 'active' THEN 1 END) as active_projects,\n        COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_projects,\n        COUNT(CASE WHEN status = 'planning' THEN 1 END) as planning_projects,\n        COUNT(CASE WHEN status = 'on_hold' THEN 1 END) as on_hold_projects\n      FROM projects;\n    `;\n\n    // Get work entries statistics\n    const workEntriesQuery = `\n      SELECT\n        COUNT(*) as total_work_entries,\n        COUNT(CASE WHEN approved = false THEN 1 END) as pending_approvals,\n        COUNT(CASE WHEN approved = true THEN 1 END) as approved_entries,\n        COUNT(CASE WHEN created_at >= NOW() - INTERVAL '7 days' THEN 1 END) as entries_this_week\n      FROM work_entries;\n    `;\n\n    // Get team statistics\n    const teamStatsQuery = `\n      SELECT\n        COUNT(DISTINCT u.id) as total_workers,\n        COUNT(DISTINCT CASE WHEN u.is_active = true THEN u.id END) as active_workers,\n        COUNT(DISTINCT c.id) as total_crews,\n        COUNT(DISTINCT CASE WHEN c.status = 'active' THEN c.id END) as active_crews\n      FROM users u\n      LEFT JOIN crew_members cm ON u.id = cm.user_id\n      LEFT JOIN crews c ON cm.crew_id = c.id\n      WHERE u.role IN ('crew', 'worker', 'foreman');\n    `;\n\n    // Get material statistics\n    const materialStatsQuery = `\n      SELECT\n        COUNT(*) as total_materials,\n        COUNT(CASE WHEN is_active = true THEN 1 END) as active_materials,\n        COUNT(CASE WHEN is_active = false THEN 1 END) as inactive_materials,\n        COALESCE(AVG(unit_price_eur), 0) as avg_material_price\n      FROM materials;\n    `;\n\n    // Get recent activity count\n    const activityQuery = `\n      SELECT COUNT(*) as recent_activities\n      FROM activity_logs\n      WHERE created_at >= NOW() - INTERVAL '24 hours';\n    `;\n\n    // Execute all queries in parallel\n    const [projectResult, workResult, teamResult, materialResult, activityResult] = await Promise.all([\n      query(projectStatsQuery),\n      query(workEntriesQuery),\n      query(teamStatsQuery),\n      query(materialStatsQuery),\n      query(activityQuery)\n    ]);\n\n    // Parse project statistics\n    const projectData = projectResult.rows[0] ? {\n      total: parseInt(projectResult.rows[0].total_projects) || 0,\n      active: parseInt(projectResult.rows[0].active_projects) || 0,\n      completed: parseInt(projectResult.rows[0].completed_projects) || 0,\n      planning: parseInt(projectResult.rows[0].planning_projects) || 0,\n      onHold: parseInt(projectResult.rows[0].on_hold_projects) || 0\n    } : { total: 0, active: 0, completed: 0, planning: 0, onHold: 0 };\n\n    // Parse work entries statistics\n    const workData = workResult.rows[0] ? {\n      total: parseInt(workResult.rows[0].total_work_entries) || 0,\n      pendingApprovals: parseInt(workResult.rows[0].pending_approvals) || 0,\n      approved: parseInt(workResult.rows[0].approved_entries) || 0,\n      thisWeek: parseInt(workResult.rows[0].entries_this_week) || 0\n    } : { total: 0, pendingApprovals: 0, approved: 0, thisWeek: 0 };\n\n    // Parse team statistics\n    const teamData = teamResult.rows[0] ? {\n      totalWorkers: parseInt(teamResult.rows[0].total_workers) || 0,\n      activeWorkers: parseInt(teamResult.rows[0].active_workers) || 0,\n      totalCrews: parseInt(teamResult.rows[0].total_crews) || 0,\n      activeCrews: parseInt(teamResult.rows[0].active_crews) || 0\n    } : { totalWorkers: 0, activeWorkers: 0, totalCrews: 0, activeCrews: 0 };\n\n    // Parse material statistics\n    const materialData = materialResult.rows[0] ? {\n      totalMaterials: parseInt(materialResult.rows[0].total_materials) || 0,\n      activeMaterials: parseInt(materialResult.rows[0].active_materials) || 0,\n      inactiveMaterials: parseInt(materialResult.rows[0].inactive_materials) || 0,\n      avgPrice: parseFloat(materialResult.rows[0].avg_material_price) || 0\n    } : { totalMaterials: 0, activeMaterials: 0, inactiveMaterials: 0, avgPrice: 0 };\n\n    // Parse activity statistics\n    const activityData = activityResult.rows[0] ? {\n      recentActivities: parseInt(activityResult.rows[0].recent_activities) || 0\n    } : { recentActivities: 0 };\n\n    console.log('Dashboard statistics fetched successfully:', {\n      projects: projectData,\n      workEntries: workData,\n      team: teamData,\n      materials: materialData,\n      activities: activityData\n    });\n\n    return NextResponse.json({\n      projects: projectData,\n      workEntries: workData,\n      team: teamData,\n      materials: materialData,\n      activities: activityData,\n      lastUpdated: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Dashboard statistics API error:', error);\n\n    // Return fallback data in case of database errors\n    return NextResponse.json({\n      projects: { total: 0, active: 0, completed: 0, planning: 0, onHold: 0 },\n      workEntries: { total: 0, pendingApprovals: 0, approved: 0, thisWeek: 0 },\n      team: { totalWorkers: 0, activeWorkers: 0, totalCrews: 0, activeCrews: 0 },\n      materials: { totalMaterials: 0, inStock: 0, outOfStock: 0, totalValue: 0 },\n      activities: { recentActivities: 0 },\n      lastUpdated: new Date().toISOString(),\n      error: 'Database connection failed - showing fallback data'\n    }, { status: 200 }); // Still return 200 to not break the frontend\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}