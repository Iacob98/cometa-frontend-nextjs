{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/suppliers/%5Bid%5D/projects/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\n// Service role client for bypassing RLS\nconst supabaseService = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Supplier ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const { data: projectSuppliers, error } = await supabaseService\n      .from(\"project_suppliers\")\n      .select(\n        `\n        id,\n        project_id,\n        supplier_id,\n        supplier_role,\n        contact_person,\n        contract_reference,\n        start_date,\n        end_date,\n        status,\n        notes,\n        created_at,\n        updated_at,\n        project:projects(id, name, customer, city, status)\n      `\n      )\n      .eq(\"supplier_id\", id)\n      .order(\"created_at\", { ascending: false });\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch supplier project assignments from database\" },\n        { status: 500 }\n      );\n    }\n\n    // Format the response for frontend compatibility\n    const formattedAssignments = (projectSuppliers || []).map(assignment => ({\n      ...assignment,\n      project_name: assignment.project?.name || null,\n      project_customer: assignment.project?.customer || null,\n      project_city: assignment.project?.city || null,\n      project_status: assignment.project?.status || null,\n      assigned_at: assignment.created_at, // Map for compatibility\n    }));\n\n    return NextResponse.json(formattedAssignments);\n  } catch (error) {\n    console.error(\"Supplier projects GET API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch supplier projects\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Supplier ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const {\n      project_id,\n      supplier_role = 'material',\n      contact_person,\n      contract_reference,\n      start_date,\n      end_date,\n      status = 'active',\n      notes,\n    } = body;\n\n    // Validation\n    if (!project_id) {\n      return NextResponse.json(\n        { error: \"Project ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if assignment already exists\n    const { data: existingAssignment } = await supabaseService\n      .from(\"project_suppliers\")\n      .select(\"id\")\n      .eq(\"supplier_id\", id)\n      .eq(\"project_id\", project_id)\n      .single();\n\n    if (existingAssignment) {\n      return NextResponse.json(\n        { error: \"Supplier is already assigned to this project\" },\n        { status: 409 }\n      );\n    }\n\n    // Create assignment in Supabase using service role to bypass RLS\n    const { data: projectSupplier, error } = await supabaseService\n      .from(\"project_suppliers\")\n      .insert({\n        supplier_id: id,\n        project_id,\n        supplier_role,\n        contact_person: contact_person || null,\n        contract_reference: contract_reference || null,\n        start_date: start_date || null,\n        end_date: end_date || null,\n        status,\n        notes: notes || null,\n      })\n      .select(\n        `\n        id,\n        project_id,\n        supplier_id,\n        supplier_role,\n        contact_person,\n        contract_reference,\n        start_date,\n        end_date,\n        status,\n        notes,\n        created_at,\n        updated_at,\n        project:projects(id, name, customer, city, status)\n      `\n      )\n      .single();\n\n    if (error) {\n      console.error(\"Supabase error creating supplier project assignment:\", error);\n      if (error.code === '23503') {\n        return NextResponse.json(\n          { error: \"Invalid project or supplier ID\" },\n          { status: 400 }\n        );\n      }\n      return NextResponse.json(\n        { error: \"Failed to create supplier project assignment in database\" },\n        { status: 500 }\n      );\n    }\n\n    // Format the response for frontend compatibility\n    const formattedAssignment = {\n      ...projectSupplier,\n      project_name: projectSupplier.project?.name || null,\n      project_description: projectSupplier.project?.description || null,\n      project_status: projectSupplier.project?.status || null,\n      assigned_at: projectSupplier.created_at, // Map for compatibility\n    };\n\n    return NextResponse.json(formattedAssignment, { status: 201 });\n  } catch (error) {\n    console.error(\"Create supplier project assignment error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create supplier project assignment\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,wCAAwC;AACxC,MAAM,kBAAkB,IAAA,yMAAY,gFAElC,QAAQ,GAAG,CAAC,yBAAyB;AAGhC,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,IAAI,CAAC,IAAI;YACP,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,MAAM,gBAAgB,EAAE,KAAK,EAAE,GAAG,MAAM,gBAC7C,IAAI,CAAC,qBACL,MAAM,CACL,CAAC;;;;;;;;;;;;;;MAcH,CAAC,EAEA,EAAE,CAAC,eAAe,IAClB,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM;QAE1C,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,mBAAmB;YACjC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6D,GACtE;gBAAE,QAAQ;YAAI;QAElB;QAEA,iDAAiD;QACjD,MAAM,uBAAuB,CAAC,oBAAoB,EAAE,EAAE,GAAG,CAAC,CAAA,aAAc,CAAC;gBACvE,GAAG,UAAU;gBACb,cAAc,WAAW,OAAO,EAAE,QAAQ;gBAC1C,kBAAkB,WAAW,OAAO,EAAE,YAAY;gBAClD,cAAc,WAAW,OAAO,EAAE,QAAQ;gBAC1C,gBAAgB,WAAW,OAAO,EAAE,UAAU;gBAC9C,aAAa,WAAW,UAAU;YACpC,CAAC;QAED,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAoC,GAC7C;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KACpB,OAAoB,EACpB,EAAE,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QACrB,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,IAAI,CAAC,IAAI;YACP,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EACJ,UAAU,EACV,gBAAgB,UAAU,EAC1B,cAAc,EACd,kBAAkB,EAClB,UAAU,EACV,QAAQ,EACR,SAAS,QAAQ,EACjB,KAAK,EACN,GAAG;QAEJ,aAAa;QACb,IAAI,CAAC,YAAY;YACf,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,qCAAqC;QACrC,MAAM,EAAE,MAAM,kBAAkB,EAAE,GAAG,MAAM,gBACxC,IAAI,CAAC,qBACL,MAAM,CAAC,MACP,EAAE,CAAC,eAAe,IAClB,EAAE,CAAC,cAAc,YACjB,MAAM;QAET,IAAI,oBAAoB;YACtB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+C,GACxD;gBAAE,QAAQ;YAAI;QAElB;QAEA,iEAAiE;QACjE,MAAM,EAAE,MAAM,eAAe,EAAE,KAAK,EAAE,GAAG,MAAM,gBAC5C,IAAI,CAAC,qBACL,MAAM,CAAC;YACN,aAAa;YACb;YACA;YACA,gBAAgB,kBAAkB;YAClC,oBAAoB,sBAAsB;YAC1C,YAAY,cAAc;YAC1B,UAAU,YAAY;YACtB;YACA,OAAO,SAAS;QAClB,GACC,MAAM,CACL,CAAC;;;;;;;;;;;;;;MAcH,CAAC,EAEA,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,wDAAwD;YACtE,IAAI,MAAM,IAAI,KAAK,SAAS;gBAC1B,OAAO,gJAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAiC,GAC1C;oBAAE,QAAQ;gBAAI;YAElB;YACA,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2D,GACpE;gBAAE,QAAQ;YAAI;QAElB;QAEA,iDAAiD;QACjD,MAAM,sBAAsB;YAC1B,GAAG,eAAe;YAClB,cAAc,gBAAgB,OAAO,EAAE,QAAQ;YAC/C,qBAAqB,gBAAgB,OAAO,EAAE,eAAe;YAC7D,gBAAgB,gBAAgB,OAAO,EAAE,UAAU;YACnD,aAAa,gBAAgB,UAAU;QACzC;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC,qBAAqB;YAAE,QAAQ;QAAI;IAC9D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6CAA6C;QAC3D,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+C,GACxD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}