{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/project-preparation/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\n// Service role client for bypassing RLS\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const projectId = searchParams.get('project_id');\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get project basic info from Supabase\n    const { data: project, error: projectError } = await supabase\n      .from('projects')\n      .select(`\n        id,\n        name,\n        customer,\n        city,\n        address,\n        contact_24h,\n        start_date,\n        end_date_plan,\n        status,\n        total_length_m,\n        base_rate_per_m,\n        pm_user_id,\n        manager:users!projects_pm_user_id_fkey(\n          id,\n          first_name,\n          last_name\n        )\n      `)\n      .eq('id', projectId)\n      .single();\n\n    if (projectError) {\n      if (projectError.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Project not found' },\n          { status: 404 }\n        );\n      }\n      console.error('Supabase project query error:', projectError);\n      return NextResponse.json(\n        { error: 'Failed to fetch project data' },\n        { status: 500 }\n      );\n    }\n\n    // Get real preparation data from database\n    const [facilitiesResult, housingResult, plansResult, utilityContactsResult] = await Promise.all([\n      // Get facilities\n      supabase\n        .from('facilities')\n        .select(`\n          id,\n          name,\n          type,\n          floor,\n          access_info,\n          contact_info,\n          notes,\n          created_at\n        `)\n        .eq('project_id', projectId)\n        .order('created_at', { ascending: false }),\n\n      // Get housing units\n      supabase\n        .from('housing_units')\n        .select(`\n          id,\n          unit_number,\n          unit_type,\n          floor,\n          room_count,\n          area_sqm,\n          contact_person,\n          contact_phone,\n          access_instructions,\n          installation_notes,\n          status,\n          created_at\n        `)\n        .eq('project_id', projectId)\n        .order('created_at', { ascending: false }),\n\n      // Get project plans\n      supabase\n        .from('project_plans')\n        .select(`\n          id,\n          title,\n          description,\n          plan_type,\n          filename,\n          file_size,\n          file_url,\n          file_path,\n          uploaded_at\n        `)\n        .eq('project_id', projectId)\n        .order('uploaded_at', { ascending: false }),\n\n      // Get utility contacts\n      supabase\n        .from('utility_contacts')\n        .select(`\n          id,\n          kind,\n          organization,\n          contact_person,\n          phone,\n          email,\n          notes,\n          created_at\n        `)\n        .eq('project_id', projectId)\n        .order('created_at', { ascending: false })\n    ]);\n\n    // Check for errors\n    if (facilitiesResult.error) {\n      console.error('Facilities query error:', facilitiesResult.error);\n    }\n    if (housingResult.error) {\n      console.error('Housing query error:', housingResult.error);\n    }\n    if (plansResult.error) {\n      console.error('Plans query error:', plansResult.error);\n    }\n    if (utilityContactsResult.error) {\n      console.error('Utility contacts query error:', utilityContactsResult.error);\n    }\n\n    // Calculate completion percentage based on real data\n    const totalItems = (facilitiesResult.data?.length || 0) +\n                      (housingResult.data?.length || 0) +\n                      (plansResult.data?.length || 0) +\n                      (utilityContactsResult.data?.length || 0);\n\n    const completedHousing = housingResult.data?.filter(h => h.status === 'completed').length || 0;\n    const completionPercentage = totalItems > 0 ? Math.round((completedHousing / totalItems) * 100) : 0;\n\n    const preparationData = {\n      project: {\n        ...project,\n        manager_name: project.manager ? `${project.manager.first_name} ${project.manager.last_name}` : null,\n      },\n      preparation: {\n        phase: completionPercentage > 75 ? 'ready' : completionPercentage > 25 ? 'planning' : 'initial',\n        completion_percentage: completionPercentage,\n        facilities: facilitiesResult.data || [],\n        housing: housingResult.data || [],\n        plans: plansResult.data || [],\n        utility_contacts: utilityContactsResult.data || []\n      },\n      steps_summary: {\n        utility_contacts: utilityContactsResult.data?.length || 0,\n        facilities: facilitiesResult.data?.length || 0,\n        housing_units: housingResult.data?.length || 0,\n        plans: plansResult.data?.length || 0,\n        crews: 0, // TODO: Add crews count when available\n        materials: 0, // TODO: Add materials count when available\n        equipment: 0 // TODO: Add equipment count when available\n      }\n    };\n\n    return NextResponse.json(preparationData);\n  } catch (error) {\n    console.error('Project preparation API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { project_id, item_type, data } = body;\n\n    if (!project_id || !item_type || !data) {\n      return NextResponse.json(\n        { error: 'Project ID, item type, and data are required' },\n        { status: 400 }\n      );\n    }\n\n    let result;\n    let error;\n\n    // Create different types of preparation items based on type\n    switch (item_type) {\n      case 'facility':\n        ({ data: result, error } = await supabase\n          .from('facilities')\n          .insert({\n            project_id,\n            name: data.name,\n            type: data.type || 'apartment',\n            floor: data.floor,\n            access_info: data.access_info,\n            contact_info: data.contact_info,\n            notes: data.notes\n          })\n          .select()\n          .single());\n        break;\n\n      case 'housing_unit':\n        ({ data: result, error } = await supabase\n          .from('housing_units')\n          .insert({\n            project_id,\n            unit_number: data.unit_number,\n            unit_type: data.unit_type || 'apartment',\n            floor: data.floor,\n            room_count: data.room_count,\n            area_sqm: data.area_sqm,\n            contact_person: data.contact_person,\n            contact_phone: data.contact_phone,\n            access_instructions: data.access_instructions,\n            installation_notes: data.installation_notes,\n            status: data.status || 'pending'\n          })\n          .select()\n          .single());\n        break;\n\n      case 'utility_contact':\n        ({ data: result, error } = await supabase\n          .from('utility_contacts')\n          .insert({\n            project_id,\n            kind: data.kind,\n            organization: data.organization,\n            contact_person: data.contact_person,\n            phone: data.phone,\n            email: data.email,\n            notes: data.notes\n          })\n          .select()\n          .single());\n        break;\n\n      case 'project_plan':\n        ({ data: result, error } = await supabase\n          .from('project_plans')\n          .insert({\n            project_id,\n            title: data.title,\n            description: data.description,\n            plan_type: data.plan_type,\n            filename: data.filename,\n            file_size: data.file_size,\n            file_url: data.file_url,\n            file_path: data.file_path\n          })\n          .select()\n          .single());\n        break;\n\n      default:\n        return NextResponse.json(\n          { error: 'Invalid item type. Must be one of: facility, housing_unit, utility_contact, project_plan' },\n          { status: 400 }\n        );\n    }\n\n    if (error) {\n      console.error(`Supabase ${item_type} creation error:`, error);\n      return NextResponse.json(\n        { error: `Failed to create ${item_type} in database` },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: `${item_type.replace('_', ' ')} added successfully`,\n      item: result,\n      type: item_type\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Project preparation POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create preparation item' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { project_id, status, reason } = body;\n\n    if (!project_id || !status) {\n      return NextResponse.json(\n        { error: 'Project ID and status are required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate status values\n    const validStatuses = ['draft', 'planning', 'active', 'paused', 'completed', 'cancelled'];\n    if (!validStatuses.includes(status)) {\n      return NextResponse.json(\n        { error: `Invalid status. Must be one of: ${validStatuses.join(', ')}` },\n        { status: 400 }\n      );\n    }\n\n    // Update project status\n    const { data: updatedProject, error } = await supabase\n      .from('projects')\n      .update({\n        status,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', project_id)\n      .select(`\n        id,\n        name,\n        status,\n        updated_at\n      `)\n      .single();\n\n    if (error) {\n      console.error('Supabase project status update error:', error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Project not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to update project status' },\n        { status: 500 }\n      );\n    }\n\n    // Log status change (optional - could add to activity log table)\n    console.log(`Project ${project_id} status changed to ${status}`, reason ? `Reason: ${reason}` : '');\n\n    return NextResponse.json({\n      message: 'Project status updated successfully',\n      project: updatedProject,\n      previous_status: status, // You could track this if needed\n      reason\n    });\n  } catch (error) {\n    console.error('Project preparation PUT error:', error);\n    return NextResponse.json(\n      { error: 'Failed to update project status' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}