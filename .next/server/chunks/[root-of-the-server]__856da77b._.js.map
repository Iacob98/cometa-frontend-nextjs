{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/projects/%5Bid%5D/team/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: projectId } = await params;\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get crews directly assigned to this project\n    const { data: crews, error: crewsError } = await supabase\n      .from('crews')\n      .select(`\n        id,\n        name,\n        description,\n        status,\n        leader_user_id,\n        created_at,\n        updated_at,\n        crew_members:crew_members(\n          id,\n          user_id,\n          role,\n          is_active,\n          joined_at,\n          users:users(\n            id,\n            first_name,\n            last_name,\n            email,\n            role\n          )\n        )\n      `)\n      .eq('project_id', projectId);\n\n    if (crewsError) {\n      console.error('Supabase crews query error:', crewsError);\n      return NextResponse.json(\n        { error: 'Failed to fetch team data' },\n        { status: 500 }\n      );\n    }\n\n    // Calculate total members across all crews\n    let totalMembers = 0;\n    const formattedCrews = (crews || []).map((crew: any) => {\n      const activeMembers = (crew.crew_members || []).filter((member: any) => member.is_active);\n      totalMembers += activeMembers.length;\n\n      const leaderMember = activeMembers.find((member: any) => member.role === 'leader');\n\n      return {\n        id: crew.id,\n        name: crew.name,\n        description: crew.description,\n        status: crew.status,\n        leader_user_id: crew.leader_user_id,\n        leader: leaderMember?.users || null,\n        foreman: leaderMember ? {\n          ...leaderMember.users,\n          full_name: `${leaderMember.users.first_name} ${leaderMember.users.last_name}`.trim()\n        } : null,\n        members: activeMembers.map((member: any) => ({\n          id: member.id,\n          user_id: member.user_id,\n          role: member.role,\n          role_in_crew: member.role,\n          is_active: member.is_active,\n          joined_at: member.joined_at,\n          user: {\n            ...member.users,\n            full_name: `${member.users.first_name} ${member.users.last_name}`.trim()\n          }\n        })),\n        member_count: activeMembers.length,\n        created_at: crew.created_at,\n        updated_at: crew.updated_at\n      };\n    });\n\n    // Calculate summary statistics\n    const summary = {\n      total_crews: formattedCrews.length,\n      total_members: totalMembers,\n      foreman_count: formattedCrews.reduce((count, crew) => {\n        return count + (crew.members.filter((m: any) => m.role === 'leader' || m.role === 'foreman').length);\n      }, 0),\n      worker_count: formattedCrews.reduce((count, crew) => {\n        return count + (crew.members.filter((m: any) => m.role === 'member' || m.role === 'worker' || m.role === 'trainee').length);\n      }, 0)\n    };\n\n    const formattedTeam = {\n      project_id: projectId,\n      crews: formattedCrews,\n      total_members: totalMembers,\n      active_crews: (crews || []).filter((crew: any) => crew.status === 'active').length,\n      summary: summary\n    };\n\n    return NextResponse.json(formattedTeam);\n  } catch (error) {\n    console.error('Project team API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: projectId } = await params;\n    const body = await request.json();\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const { crew_name, leader_user_id, member_user_ids = [] } = body;\n\n    if (!crew_name) {\n      return NextResponse.json(\n        { error: 'Crew name is required' },\n        { status: 400 }\n      );\n    }\n\n    // Create new crew (crews are not directly linked to projects)\n    const { data: newCrew, error: crewError } = await supabase\n      .from('crews')\n      .insert({\n        name: crew_name,\n        leader_user_id: leader_user_id || null,\n        status: 'active',\n        description: `Crew: ${crew_name}`\n      })\n      .select()\n      .single();\n\n    if (crewError) {\n      console.error('Supabase crew creation error:', crewError);\n      return NextResponse.json(\n        { error: 'Failed to create crew' },\n        { status: 500 }\n      );\n    }\n\n    // Add crew members if provided\n    if (member_user_ids.length > 0) {\n      const memberInserts = member_user_ids.map((userId: string) => ({\n        crew_id: newCrew.id,\n        user_id: userId,\n        role: 'member',\n        is_active: true,\n        joined_at: new Date().toISOString()\n      }));\n\n      const { error: membersError } = await supabase\n        .from('crew_members')\n        .insert(memberInserts);\n\n      if (membersError) {\n        console.error('Supabase crew members creation error:', membersError);\n        // Don't fail the request, just log the error\n      }\n    }\n\n    return NextResponse.json({\n      message: 'Team crew created successfully',\n      crew: newCrew\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Project team POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create team crew' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}