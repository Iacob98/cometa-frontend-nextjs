{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/projects/%5Bid%5D/team/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: projectId } = await params;\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get crews that have worked on this project through work_entries\n    const { data: workEntries, error: workError } = await supabase\n      .from('work_entries')\n      .select(`\n        crew_id,\n        crews:crews(\n          id,\n          name,\n          description,\n          status,\n          leader_user_id,\n          created_at,\n          updated_at\n        )\n      `)\n      .eq('project_id', projectId)\n      .not('crew_id', 'is', null);\n\n    if (workError) {\n      console.error('Supabase work entries query error:', workError);\n      return NextResponse.json(\n        { error: 'Failed to fetch team data' },\n        { status: 500 }\n      );\n    }\n\n    // Extract unique crews from work entries\n    const crewsMap = new Map();\n    (workEntries || []).forEach((entry: any) => {\n      if (entry.crews) {\n        crewsMap.set(entry.crews.id, entry.crews);\n      }\n    });\n    const crews = Array.from(crewsMap.values());\n\n    // For now, return simplified structure until we can fix the nested queries\n    const formattedTeam = {\n      project_id: projectId,\n      crews: (crews || []).map((crew: any) => ({\n        id: crew.id,\n        name: crew.name,\n        description: crew.description,\n        status: crew.status,\n        leader_user_id: crew.leader_user_id,\n        leader: null, // Will need separate query\n        members: [], // Will need separate query\n        created_at: crew.created_at,\n        updated_at: crew.updated_at\n      })),\n      total_members: 0, // Will be calculated after member queries\n      active_crews: (crews || []).filter((crew: any) => crew.status === 'active').length\n    };\n\n    return NextResponse.json(formattedTeam);\n  } catch (error) {\n    console.error('Project team API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id: projectId } = await params;\n    const body = await request.json();\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const { crew_name, leader_user_id, member_user_ids = [] } = body;\n\n    if (!crew_name) {\n      return NextResponse.json(\n        { error: 'Crew name is required' },\n        { status: 400 }\n      );\n    }\n\n    // Create new crew (crews are not directly linked to projects)\n    const { data: newCrew, error: crewError } = await supabase\n      .from('crews')\n      .insert({\n        name: crew_name,\n        leader_user_id: leader_user_id || null,\n        status: 'active',\n        description: `Crew: ${crew_name}`\n      })\n      .select()\n      .single();\n\n    if (crewError) {\n      console.error('Supabase crew creation error:', crewError);\n      return NextResponse.json(\n        { error: 'Failed to create crew' },\n        { status: 500 }\n      );\n    }\n\n    // Add crew members if provided\n    if (member_user_ids.length > 0) {\n      const memberInserts = member_user_ids.map((userId: string) => ({\n        crew_id: newCrew.id,\n        user_id: userId,\n        role: 'member',\n        is_active: true,\n        joined_at: new Date().toISOString()\n      }));\n\n      const { error: membersError } = await supabase\n        .from('crew_members')\n        .insert(memberInserts);\n\n      if (membersError) {\n        console.error('Supabase crew members creation error:', membersError);\n        // Don't fail the request, just log the error\n      }\n    }\n\n    return NextResponse.json({\n      message: 'Team crew created successfully',\n      crew: newCrew\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Project team POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create team crew' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}