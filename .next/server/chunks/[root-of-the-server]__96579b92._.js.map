{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/suppliers/%5Bid%5D/materials/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\n// Service role client for bypassing RLS\nconst supabaseService = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Supplier ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const { data: supplierMaterials, error } = await supabaseService\n      .from(\"supplier_materials\")\n      .select(\n        `\n        id,\n        supplier_id,\n        material_id,\n        supplier_part_number,\n        unit_price,\n        minimum_order_qty,\n        lead_time_days,\n        is_preferred,\n        last_price_update,\n        notes,\n        created_at,\n        updated_at,\n        material:materials(\n          id,\n          name,\n          category,\n          unit,\n          unit_price_eur,\n          supplier_name,\n          description,\n          is_active\n        )\n      `\n      )\n      .eq(\"supplier_id\", id)\n      .order(\"created_at\", { ascending: false });\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch supplier materials from database\" },\n        { status: 500 }\n      );\n    }\n\n    // Format for frontend compatibility\n    const formattedMaterials = (supplierMaterials || []).map(item => ({\n      ...item,\n      material_name: item.material?.name || null,\n      material_category: item.material?.category || null,\n      material_unit: item.material?.unit || null,\n      material_description: item.material?.description || null,\n    }));\n\n    return NextResponse.json(formattedMaterials);\n  } catch (error) {\n    console.error(\"Supplier materials GET API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch supplier materials\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Supplier ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const {\n      material_id,\n      material_name,\n      category,\n      unit,\n      supplier_part_number,\n      unit_price,\n      minimum_order_qty = 1,\n      lead_time_days,\n      is_preferred = false,\n      notes,\n    } = body;\n\n    // Validation - either material_id or material_name is required\n    if (!material_id && !material_name) {\n      return NextResponse.json(\n        { error: \"Either material ID or material name is required\" },\n        { status: 400 }\n      );\n    }\n\n    if (material_name && !unit) {\n      return NextResponse.json(\n        { error: \"Unit is required when creating new material\" },\n        { status: 400 }\n      );\n    }\n\n    if (!unit_price || unit_price <= 0) {\n      return NextResponse.json(\n        { error: \"Unit price must be positive\" },\n        { status: 400 }\n      );\n    }\n\n    if (minimum_order_qty <= 0) {\n      return NextResponse.json(\n        { error: \"Minimum order quantity must be positive\" },\n        { status: 400 }\n      );\n    }\n\n    let finalMaterialId = material_id;\n\n    // If material_name is provided, create a new material first\n    if (material_name) {\n      const { data: newMaterial, error: materialError } = await supabaseService\n        .from(\"materials\")\n        .insert({\n          name: material_name,\n          category: category || null,\n          unit: unit,\n          unit_price_eur: unit_price,\n          is_active: true,\n        })\n        .select(\"id\")\n        .single();\n\n      if (materialError) {\n        console.error(\"Supabase error creating material:\", materialError);\n        return NextResponse.json(\n          { error: \"Failed to create material in database\" },\n          { status: 500 }\n        );\n      }\n\n      finalMaterialId = newMaterial.id;\n    }\n\n    // Check if this supplier-material combination already exists\n    const { data: existing } = await supabaseService\n      .from(\"supplier_materials\")\n      .select(\"id\")\n      .eq(\"supplier_id\", id)\n      .eq(\"material_id\", finalMaterialId)\n      .single();\n\n    if (existing) {\n      return NextResponse.json(\n        { error: \"This material is already associated with this supplier\" },\n        { status: 409 }\n      );\n    }\n\n    // Create supplier material association\n    const { data: supplierMaterial, error } = await supabaseService\n      .from(\"supplier_materials\")\n      .insert({\n        supplier_id: id,\n        material_id: finalMaterialId,\n        supplier_part_number: supplier_part_number || null,\n        unit_price,\n        minimum_order_qty,\n        lead_time_days: lead_time_days || null,\n        is_preferred,\n        notes: notes || null,\n      })\n      .select(\n        `\n        id,\n        supplier_id,\n        material_id,\n        supplier_part_number,\n        unit_price,\n        minimum_order_qty,\n        lead_time_days,\n        is_preferred,\n        last_price_update,\n        notes,\n        created_at,\n        updated_at,\n        material:materials(\n          id,\n          name,\n          category,\n          unit,\n          unit_price_eur,\n          supplier_name,\n          description,\n          is_active\n        )\n      `\n      )\n      .single();\n\n    if (error) {\n      console.error(\"Supabase error creating supplier material:\", error);\n      if (error.code === '23503') {\n        return NextResponse.json(\n          { error: \"Invalid material or supplier ID\" },\n          { status: 400 }\n        );\n      }\n      return NextResponse.json(\n        { error: \"Failed to create supplier material in database\" },\n        { status: 500 }\n      );\n    }\n\n    // Format for frontend compatibility\n    const formattedMaterial = {\n      ...supplierMaterial,\n      material_name: supplierMaterial.material?.name || null,\n      material_category: supplierMaterial.material?.category || null,\n      material_unit: supplierMaterial.material?.unit || null,\n      material_description: supplierMaterial.material?.description || null,\n    };\n\n    return NextResponse.json(formattedMaterial, { status: 201 });\n  } catch (error) {\n    console.error(\"Create supplier material error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create supplier material\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}