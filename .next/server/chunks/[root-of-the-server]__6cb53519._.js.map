{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/project-preparation/facilities/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from '@supabase/supabase-js';\nimport { z } from 'zod';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nconst CreateFacilitySchema = z.object({\n  project_id: z.string().uuid(),\n  type: z.string().min(1, \"Type is required\"),\n  supplier_id: z.string().uuid().optional(),\n  rent_daily_eur: z.number().positive(\"Rent must be positive\"),\n  service_freq: z.string().optional(),\n  status: z.enum(['planned', 'active', 'completed']).default('planned'),\n  start_date: z.string().optional(),\n  end_date: z.string().optional(),\n  location_text: z.string().optional(),\n});\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const project_id = searchParams.get(\"project_id\");\n\n    if (!project_id) {\n      return NextResponse.json(\n        { error: \"Project ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Fetch facilities from real database\n    console.log('Fetching facilities from database for project:', project_id);\n\n    const { data: facilities, error } = await supabase\n      .from('facilities')\n      .select(`\n        id,\n        project_id,\n        supplier_id,\n        type,\n        rent_daily_eur,\n        service_freq,\n        status,\n        start_date,\n        end_date,\n        location_text,\n        created_at,\n        updated_at,\n        suppliers!supplier_id (\n          id,\n          name\n        )\n      `)\n      .eq('project_id', project_id)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Database error fetching facilities:', error);\n      // Return empty array if table doesn't exist yet\n      return NextResponse.json([]);\n    }\n\n    // Transform the data to include supplier_name for easier frontend consumption\n    const transformedFacilities = (facilities || []).map(facility => ({\n      ...facility,\n      supplier_name: facility.suppliers?.name || null,\n      suppliers: undefined // Remove nested object to clean up response\n    }));\n\n    console.log(`Found ${transformedFacilities?.length || 0} facilities for project ${project_id}`);\n    return NextResponse.json(transformedFacilities);\n  } catch (error) {\n    console.error(\"Facilities API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch facilities\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate request body\n    const validationResult = CreateFacilitySchema.safeParse(body);\n    if (!validationResult.success) {\n      return NextResponse.json(\n        {\n          error: \"Validation failed\",\n          details: validationResult.error.issues\n        },\n        { status: 400 }\n      );\n    }\n\n    const validatedData = validationResult.data;\n\n    // Verify project exists\n    const { data: project, error: projectError } = await supabase\n      .from('projects')\n      .select('id, name')\n      .eq('id', validatedData.project_id)\n      .single();\n\n    if (projectError || !project) {\n      return NextResponse.json(\n        { error: 'Project not found' },\n        { status: 404 }\n      );\n    }\n\n    // Create facility in real database\n    console.log('Creating facility in database:', validatedData);\n\n    const { data: facility, error } = await supabase\n      .from('facilities')\n      .insert([{\n        project_id: validatedData.project_id,\n        supplier_id: validatedData.supplier_id,\n        type: validatedData.type,\n        rent_daily_eur: validatedData.rent_daily_eur,\n        service_freq: validatedData.service_freq,\n        status: validatedData.status,\n        start_date: validatedData.start_date,\n        end_date: validatedData.end_date,\n        location_text: validatedData.location_text\n      }])\n      .select(`\n        id,\n        project_id,\n        supplier_id,\n        type,\n        rent_daily_eur,\n        service_freq,\n        status,\n        start_date,\n        end_date,\n        location_text,\n        created_at,\n        updated_at\n      `)\n      .single();\n\n    if (error) {\n      console.error('Database error creating facility:', error);\n\n      // If table doesn't exist, show helpful message\n      if (error.message?.includes(\"does not exist\") || error.code === 'PGRST204') {\n        return NextResponse.json({\n          error: \"Facilities table needs to be created\",\n          message: \"Please run the SQL migration in Supabase Dashboard\",\n          sql_file: \"./database/facilities-migration-with-drop.sql\",\n          dashboard_url: `https://supabase.com/dashboard/project/${process.env.NEXT_PUBLIC_SUPABASE_URL?.split('//')[1]?.split('.')[0]}/sql`\n        }, { status: 503 });\n      }\n\n      return NextResponse.json(\n        { error: 'Failed to create facility in database', details: error.message },\n        { status: 500 }\n      );\n    }\n\n    console.log('Facility created successfully:', facility);\n\n    const response = {\n      success: true,\n      message: \"Facility created successfully\",\n      facility_id: facility.id,\n      facility: facility\n    };\n\n    return NextResponse.json(response, { status: 201 });\n  } catch (error) {\n    console.error(\"Facilities POST error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create facility\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}