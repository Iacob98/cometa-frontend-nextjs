{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/resources/vehicle-assignments/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const vehicle_id = searchParams.get(\"vehicle_id\");\n    const crew_id = searchParams.get(\"crew_id\");\n    const project_id = searchParams.get(\"project_id\");\n    const active_only = searchParams.get(\"active_only\") === \"true\";\n\n    let query = supabase\n      .from(\"vehicle_assignments\")\n      .select(`\n        id,\n        vehicle_id,\n        crew_id,\n        project_id,\n        from_ts,\n        to_ts,\n        is_permanent,\n        rental_cost_per_day,\n        is_active,\n        vehicle:vehicles(\n          id,\n          brand,\n          model,\n          plate_number,\n          type\n        ),\n        crew:crews(\n          id,\n          name\n        ),\n        project:projects(\n          id,\n          name\n        )\n      `);\n\n    if (vehicle_id) {\n      query = query.eq(\"vehicle_id\", vehicle_id);\n    }\n\n    if (crew_id) {\n      query = query.eq(\"crew_id\", crew_id);\n    }\n\n    if (project_id) {\n      query = query.eq(\"project_id\", project_id);\n    }\n\n    if (active_only) {\n      query = query.eq(\"is_active\", true);\n    }\n\n    const { data: assignments, error } = await query.order(\"from_ts\", { ascending: false });\n\n    if (error) {\n      console.error(\"Supabase vehicle assignments query error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to fetch vehicle assignments\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(assignments || []);\n  } catch (error) {\n    console.error(\"Vehicle assignments API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate required fields\n    if (!body.vehicle_id || !body.crew_id) {\n      return NextResponse.json(\n        { error: \"Vehicle ID and Crew ID are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if vehicle is already assigned to any crew (1 vehicle = 1 crew rule)\n    const { data: existingAssignments, error: checkError } = await supabase\n      .from(\"vehicle_assignments\")\n      .select(\"id, crew_id\")\n      .eq(\"vehicle_id\", body.vehicle_id)\n      .eq(\"is_active\", true);\n\n    if (checkError) {\n      console.error(\"Error checking vehicle assignments:\", checkError);\n      return NextResponse.json(\n        { error: \"Failed to check vehicle availability\" },\n        { status: 500 }\n      );\n    }\n\n    if (existingAssignments && existingAssignments.length > 0) {\n      return NextResponse.json(\n        {\n          error: `Vehicle is already assigned to a crew. Only 1 vehicle per crew allowed. End existing assignment first.`\n        },\n        { status: 400 }\n      );\n    }\n\n    const assignmentData = {\n      vehicle_id: body.vehicle_id,\n      crew_id: body.crew_id,\n      project_id: body.project_id || null,\n      from_ts: body.from_ts,\n      to_ts: body.to_ts || null,\n      is_permanent: body.is_permanent || false,\n      rental_cost_per_day: body.rental_cost_per_day || 0,\n      is_active: true,\n    };\n\n    const { data: assignment, error } = await supabase\n      .from(\"vehicle_assignments\")\n      .insert([assignmentData])\n      .select()\n      .single();\n\n    if (error) {\n      console.error(\"Supabase vehicle assignment creation error:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create vehicle assignment\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(\n      {\n        success: true,\n        assignment_id: assignment.id,\n        message: \"Vehicle assignment created successfully\",\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Vehicle assignment creation API error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { assignment_id, is_active } = body;\n\n    if (!assignment_id) {\n      return NextResponse.json(\n        { error: \"Assignment ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Update the assignment to set is_active to false (end assignment)\n    const { data: updatedAssignment, error } = await supabase\n      .from(\"vehicle_assignments\")\n      .update({\n        is_active: is_active !== undefined ? is_active : false,\n        to_ts: is_active === false ? new Date().toISOString() : null\n      })\n      .eq(\"id\", assignment_id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(\"Supabase vehicle assignment update error:\", error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: \"Vehicle assignment not found\" },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: \"Failed to update vehicle assignment\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: \"Vehicle assignment updated successfully\",\n      assignment: updatedAssignment\n    });\n\n  } catch (error) {\n    console.error(\"Vehicle assignment PUT error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to update vehicle assignment\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}