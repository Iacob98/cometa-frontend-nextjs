{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/projects/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n\n    // Get projects directly from Supabase\n    const page = parseInt(searchParams.get('page') || '1');\n    const per_page = parseInt(searchParams.get('per_page') || '20');\n    const offset = (page - 1) * per_page;\n\n    const { data: projects, error, count } = await supabase\n      .from('projects')\n      .select(`\n        id,\n        name,\n        customer,\n        city,\n        address,\n        contact_24h,\n        start_date,\n        end_date_plan,\n        status,\n        total_length_m,\n        base_rate_per_m,\n        pm_user_id,\n        language_default,\n        created_at,\n        updated_at\n      `, { count: 'exact' })\n      .order('created_at', { ascending: false })\n      .range(offset, offset + per_page - 1);\n\n    if (error) {\n      console.error('Supabase error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch projects from database' },\n        { status: 500 }\n      );\n    }\n\n    // Add calculated fields\n    const projectsWithStats = (projects || []).map((project: any) => ({\n      ...project,\n      budget: project.total_length_m * project.base_rate_per_m,\n      progress: 0, // Will be calculated based on work entries later\n      description: `Fiber optic construction project in ${project.city || 'various locations'}`,\n    }));\n\n    return NextResponse.json({\n      items: projectsWithStats,\n      total: count || 0,\n      page,\n      per_page,\n      total_pages: Math.ceil((count || 0) / per_page),\n    });\n  } catch (error) {\n    console.error('Projects API error:', error);\n\n    // Return empty data on total failure\n    const { searchParams } = new URL(request.url);\n    return NextResponse.json({\n      items: [],\n      total: 0,\n      page: parseInt(searchParams.get('page') || '1'),\n      per_page: parseInt(searchParams.get('per_page') || '20'),\n      total_pages: 0,\n      message: 'Projects service temporarily unavailable'\n    });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Create project directly in Supabase\n    const { data: project, error } = await supabase\n      .from('projects')\n      .insert([{\n        name: body.name,\n        customer: body.customer,\n        city: body.city,\n        address: body.address,\n        status: body.status || 'draft',\n        total_length_m: body.total_length_m || 0,\n        base_rate_per_m: body.base_rate_per_m || 0,\n        pm_user_id: body.pm_user_id,\n        contact_24h: body.contact_24h,\n        start_date: body.start_date,\n        end_date_plan: body.end_date_plan,\n        language_default: body.language_default || 'de'\n      }])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Supabase error creating project:', error);\n      return NextResponse.json(\n        { error: 'Failed to create project in database' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(project, { status: 201 });\n  } catch (error) {\n    console.error('Projects POST API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create project' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,WAAW,IAAA,yMAAY;AAKtB,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAE5C,sCAAsC;QACtC,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW;QAClD,MAAM,WAAW,SAAS,aAAa,GAAG,CAAC,eAAe;QAC1D,MAAM,SAAS,CAAC,OAAO,CAAC,IAAI;QAE5B,MAAM,EAAE,MAAM,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,SAC5C,IAAI,CAAC,YACL,MAAM,CAAC,CAAC;;;;;;;;;;;;;;;;MAgBT,CAAC,EAAE;YAAE,OAAO;QAAQ,GACnB,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM,GACvC,KAAK,CAAC,QAAQ,SAAS,WAAW;QAErC,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,mBAAmB;YACjC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,wBAAwB;QACxB,MAAM,oBAAoB,CAAC,YAAY,EAAE,EAAE,GAAG,CAAC,CAAC,UAAiB,CAAC;gBAChE,GAAG,OAAO;gBACV,QAAQ,QAAQ,cAAc,GAAG,QAAQ,eAAe;gBACxD,UAAU;gBACV,aAAa,CAAC,oCAAoC,EAAE,QAAQ,IAAI,IAAI,qBAAqB;YAC3F,CAAC;QAED,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,OAAO,SAAS;YAChB;YACA;YACA,aAAa,KAAK,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI;QACxC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QAErC,qCAAqC;QACrC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,OAAO,EAAE;YACT,OAAO;YACP,MAAM,SAAS,aAAa,GAAG,CAAC,WAAW;YAC3C,UAAU,SAAS,aAAa,GAAG,CAAC,eAAe;YACnD,aAAa;YACb,SAAS;QACX;IACF;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,sCAAsC;QACtC,MAAM,EAAE,MAAM,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,SACpC,IAAI,CAAC,YACL,MAAM,CAAC;YAAC;gBACP,MAAM,KAAK,IAAI;gBACf,UAAU,KAAK,QAAQ;gBACvB,MAAM,KAAK,IAAI;gBACf,SAAS,KAAK,OAAO;gBACrB,QAAQ,KAAK,MAAM,IAAI;gBACvB,gBAAgB,KAAK,cAAc,IAAI;gBACvC,iBAAiB,KAAK,eAAe,IAAI;gBACzC,YAAY,KAAK,UAAU;gBAC3B,aAAa,KAAK,WAAW;gBAC7B,YAAY,KAAK,UAAU;gBAC3B,eAAe,KAAK,aAAa;gBACjC,kBAAkB,KAAK,gBAAgB,IAAI;YAC7C;SAAE,EACD,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,oCAAoC;YAClD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}