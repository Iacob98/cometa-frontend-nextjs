{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/crews/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\n// Use service role client to bypass RLS for crew member queries\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const per_page = parseInt(searchParams.get('per_page') || '20');\n    const offset = (page - 1) * per_page;\n    const search = searchParams.get('search');\n    const project_id = searchParams.get('project_id');\n    const status = searchParams.get('status');\n\n    // Build the query for crews with their members\n    let query = supabase\n      .from('crews')\n      .select(`\n        id,\n        name,\n        description,\n        status,\n        leader_user_id,\n        project_id,\n        created_at,\n        updated_at,\n        leader:users!crews_leader_user_id_fkey(\n          id,\n          first_name,\n          last_name,\n          email,\n          role\n        ),\n        crew_members(\n          id,\n          user_id,\n          role,\n          is_active,\n          joined_at,\n          user:users(\n            id,\n            first_name,\n            last_name,\n            email,\n            role\n          )\n        )\n      `, { count: 'exact' })\n      .eq('crew_members.is_active', true)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + per_page - 1);\n\n    // Apply filters\n    if (search) {\n      query = query.or(`name.ilike.%${search}%,description.ilike.%${search}%`);\n    }\n\n    if (status) {\n      query = query.eq('status', status);\n    }\n\n    if (project_id) {\n      query = query.eq('project_id', project_id);\n    }\n\n    const { data: crews, error, count } = await query;\n\n    if (error) {\n      console.error('Supabase crews query error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch crews data' },\n        { status: 500 }\n      );\n    }\n\n    // Format response to ensure proper structure for frontend\n    const formattedCrews = (crews || []).map((crew: any) => ({\n      id: crew.id,\n      name: crew.name,\n      description: crew.description || '',\n      status: crew.status || 'active',\n      project_id: crew.project_id,\n      foreman: crew.leader ? {\n        id: crew.leader.id,\n        full_name: `${crew.leader.first_name} ${crew.leader.last_name}`,\n        first_name: crew.leader.first_name,\n        last_name: crew.leader.last_name,\n        email: crew.leader.email,\n        role: crew.leader.role\n      } : null,\n      members: (crew.crew_members || []).map((member: any) => ({\n        id: member.id,\n        user_id: member.user_id,\n        role: member.role,\n        role_in_crew: member.role, // Add compatibility field for frontend\n        is_active: member.is_active,\n        joined_at: member.joined_at,\n        active_from: member.joined_at, // Add compatibility field for frontend\n        // Flatten user data to member level for frontend compatibility\n        first_name: member.user?.first_name || '',\n        last_name: member.user?.last_name || '',\n        full_name: member.user ? `${member.user.first_name} ${member.user.last_name}` : '',\n        email: member.user?.email || '',\n        // Keep nested user object for backward compatibility\n        user: member.user ? {\n          id: member.user.id,\n          first_name: member.user.first_name,\n          last_name: member.user.last_name,\n          full_name: `${member.user.first_name} ${member.user.last_name}`,\n          email: member.user.email,\n          role: member.user.role\n        } : null\n      })),\n      member_count: crew.crew_members?.length || 0,\n      created_at: crew.created_at,\n      updated_at: crew.updated_at\n    }));\n\n    return NextResponse.json({\n      crews: formattedCrews,\n      pagination: {\n        page,\n        per_page,\n        total: count || 0,\n        total_pages: Math.ceil((count || 0) / per_page)\n      },\n      summary: {\n        total_crews: count || 0,\n        active_crews: formattedCrews.filter(c => c.status === 'active').length,\n        total_members: formattedCrews.reduce((sum, c) => sum + c.member_count, 0)\n      }\n    });\n  } catch (error) {\n    console.error('Crews API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { name, description, leader_user_id, status = 'active' } = body;\n\n    if (!name) {\n      return NextResponse.json(\n        { error: 'Crew name is required' },\n        { status: 400 }\n      );\n    }\n\n    // Create new crew\n    const { data: newCrew, error: crewError } = await supabase\n      .from('crews')\n      .insert({\n        name,\n        description: description || '',\n        leader_user_id: leader_user_id || null,\n        status\n      })\n      .select(`\n        id,\n        name,\n        description,\n        status,\n        leader_user_id,\n        created_at,\n        updated_at,\n        leader:users!crews_leader_user_id_fkey(\n          id,\n          first_name,\n          last_name,\n          email\n        )\n      `)\n      .single();\n\n    if (crewError) {\n      console.error('Supabase crew creation error:', crewError);\n      return NextResponse.json(\n        { error: 'Failed to create crew' },\n        { status: 500 }\n      );\n    }\n\n    // Format response\n    const formattedCrew = {\n      id: newCrew.id,\n      name: newCrew.name,\n      description: newCrew.description || '',\n      status: newCrew.status,\n      foreman: newCrew.leader ? {\n        id: newCrew.leader.id,\n        full_name: `${newCrew.leader.first_name} ${newCrew.leader.last_name}`,\n        email: newCrew.leader.email\n      } : null,\n      members: [],\n      member_count: 0,\n      created_at: newCrew.created_at,\n      updated_at: newCrew.updated_at\n    };\n\n    return NextResponse.json({\n      message: 'Crew created successfully',\n      crew: formattedCrew\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Crews POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create crew' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}