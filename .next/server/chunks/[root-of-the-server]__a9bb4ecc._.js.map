{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/materials/orders/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// Service role client for bypassing RLS\nconst supabaseService = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Order ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Fetch single material order with material and project details\n    const { data: order, error } = await supabaseService\n      .from('material_orders')\n      .select(`\n        id,\n        project_id,\n        material_id,\n        quantity,\n        unit_price,\n        total_price,\n        status,\n        order_date,\n        delivery_date,\n        supplier,\n        notes,\n        created_at,\n        updated_at,\n        material:materials(\n          id,\n          name,\n          category,\n          unit,\n          unit_price_eur,\n          supplier_name\n        ),\n        project:projects(\n          id,\n          name,\n          city,\n          address\n        )\n      `)\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      console.error('Supabase error:', error);\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Order not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json(\n        { error: 'Failed to fetch material order' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      ...order,\n      total_cost_eur: order.total_price || 0\n    });\n  } catch (error) {\n    console.error('Material order API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n    const {\n      status,\n      actual_delivery_date,\n      notes\n    } = body;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Order ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get current order to check status change\n    const { data: currentOrder, error: fetchError } = await supabaseService\n      .from('material_orders')\n      .select('status, material_id, quantity')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) {\n      console.error('Error fetching current order:', fetchError);\n      return NextResponse.json(\n        { error: 'Order not found' },\n        { status: 404 }\n      );\n    }\n\n    // Update material order\n    const updateData: any = {\n      updated_at: new Date().toISOString()\n    };\n\n    if (status) updateData.status = status;\n    if (actual_delivery_date) updateData.delivery_date = actual_delivery_date;\n    if (notes !== undefined) updateData.notes = notes;\n\n    const { data: order, error } = await supabaseService\n      .from('material_orders')\n      .update(updateData)\n      .eq('id', id)\n      .select(`\n        id,\n        project_id,\n        material_id,\n        quantity,\n        unit_price,\n        total_price,\n        status,\n        order_date,\n        delivery_date,\n        supplier,\n        notes,\n        created_at,\n        updated_at,\n        material:materials(\n          id,\n          name,\n          category,\n          unit,\n          unit_price_eur,\n          supplier_name\n        ),\n        project:projects(\n          id,\n          name,\n          city,\n          address\n        )\n      `)\n      .single();\n\n    if (error) {\n      console.error('Supabase error updating order:', error);\n      return NextResponse.json(\n        { error: `Failed to update material order: ${error.message}` },\n        { status: 500 }\n      );\n    }\n\n    // If status changed to 'delivered', update material stock\n    if (status === 'delivered' && currentOrder.status !== 'delivered') {\n      console.log(`Order ${id} delivered - updating material stock for material ${currentOrder.material_id}, quantity: ${currentOrder.quantity}`);\n\n      try {\n        // Get current material stock\n        const { data: material, error: materialError } = await supabaseService\n          .from('materials')\n          .select('current_stock')\n          .eq('id', currentOrder.material_id)\n          .single();\n\n        if (materialError) {\n          console.error('Error fetching material:', materialError);\n        } else {\n          // Update material stock\n          const newStock = (material.current_stock || 0) + currentOrder.quantity;\n          const { error: updateStockError } = await supabaseService\n            .from('materials')\n            .update({\n              current_stock: newStock,\n              updated_at: new Date().toISOString()\n            })\n            .eq('id', currentOrder.material_id);\n\n          if (updateStockError) {\n            console.error('Error updating material stock:', updateStockError);\n          } else {\n            console.log(`Material ${currentOrder.material_id} stock updated from ${material.current_stock || 0} to ${newStock}`);\n          }\n\n          // Create material transaction record for history\n          const { error: transactionError } = await supabaseService\n            .from('material_transactions')\n            .insert([{\n              material_id: currentOrder.material_id,\n              transaction_type: 'receive',\n              quantity: currentOrder.quantity,\n              unit_price: order.unit_price || 0,\n              total_price: order.total_price || 0,\n              reference_type: 'material_order',\n              reference_id: id,\n              notes: `Received from supplier: ${order.supplier || 'Unknown'}`,\n              created_at: new Date().toISOString()\n            }]);\n\n          if (transactionError) {\n            console.error('Error creating material transaction:', transactionError);\n          } else {\n            console.log(`Material transaction created for order ${id}`);\n          }\n        }\n      } catch (stockUpdateError) {\n        console.error('Error updating stock:', stockUpdateError);\n        // Don't fail the order update if stock update fails\n      }\n    }\n\n    return NextResponse.json({\n      ...order,\n      total_cost_eur: order.total_price || 0\n    });\n  } catch (error) {\n    console.error('Update material order error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Order ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Delete material order\n    const { error } = await supabaseService\n      .from('material_orders')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Supabase error deleting order:', error);\n      return NextResponse.json(\n        { error: `Failed to delete material order: ${error.message}` },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Material order deleted successfully'\n    });\n  } catch (error) {\n    console.error('Delete material order error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}