{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/equipment/assignments/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const per_page = parseInt(searchParams.get('per_page') || '20');\n    const offset = (page - 1) * per_page;\n\n    // Build query with filters\n    let query = supabase\n      .from('equipment_assignments')\n      .select(`\n        id,\n        equipment_id,\n        crew_id,\n        project_id,\n        assigned_at,\n        returned_at,\n        daily_rental_cost,\n        notes,\n        created_at,\n        updated_at,\n        equipment:equipment_id (\n          id,\n          name,\n          type,\n          model,\n          status\n        ),\n        crew:crew_id (\n          id,\n          name,\n          status\n        ),\n        project:project_id (\n          id,\n          name,\n          status\n        )\n      `)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + per_page - 1);\n\n    const { data: assignments, error, count } = await query;\n\n    if (error) {\n      console.error('Supabase equipment assignments query error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch equipment assignments' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      items: assignments || [],\n      page,\n      per_page,\n      total: count || 0,\n      total_pages: Math.ceil((count || 0) / per_page)\n    });\n  } catch (error) {\n    console.error('Equipment assignments API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      resource_type,\n      equipment_id,\n      vehicle_id,\n      crew_id,\n      project_id,\n      assigned_at,\n      returned_at,\n      daily_rental_cost,\n      notes\n    } = body;\n\n    // Validate required fields\n    if (!crew_id) {\n      return NextResponse.json(\n        { error: 'Crew is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!resource_type || (resource_type !== 'equipment' && resource_type !== 'vehicle')) {\n      return NextResponse.json(\n        { error: 'Resource type must be either \"equipment\" or \"vehicle\"' },\n        { status: 400 }\n      );\n    }\n\n    if (resource_type === 'equipment' && !equipment_id) {\n      return NextResponse.json(\n        { error: 'Equipment ID is required when resource type is equipment' },\n        { status: 400 }\n      );\n    }\n\n    if (resource_type === 'vehicle' && !vehicle_id) {\n      return NextResponse.json(\n        { error: 'Vehicle ID is required when resource type is vehicle' },\n        { status: 400 }\n      );\n    }\n\n    if (!assigned_at) {\n      return NextResponse.json(\n        { error: 'Assignment start date is required' },\n        { status: 400 }\n      );\n    }\n\n    // Create assignment based on resource type\n    let insertData: any = {\n      crew_id,\n      assigned_at: new Date(assigned_at).toISOString(),\n      daily_rental_cost: daily_rental_cost ? parseFloat(daily_rental_cost) : null,\n      notes: notes || null,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n\n    // Add project if specified\n    if (project_id) {\n      insertData.project_id = project_id;\n    }\n\n    // Add return date if specified\n    if (returned_at) {\n      insertData.returned_at = new Date(returned_at).toISOString();\n    }\n\n    let tableName: string;\n    let result: any;\n\n    if (resource_type === 'equipment') {\n      tableName = 'equipment_assignments';\n      insertData.equipment_id = equipment_id;\n\n      const { data: assignment, error } = await supabase\n        .from(tableName)\n        .insert(insertData)\n        .select(`\n          id,\n          equipment_id,\n          crew_id,\n          project_id,\n          assigned_at,\n          returned_at,\n          daily_rental_cost,\n          notes,\n          created_at,\n          updated_at,\n          equipment:equipment_id (\n            id,\n            name,\n            type,\n            model,\n            status\n          ),\n          crew:crew_id (\n            id,\n            name,\n            status\n          ),\n          project:project_id (\n            id,\n            name,\n            status\n          )\n        `)\n        .single();\n\n      if (error) {\n        console.error('Supabase equipment assignment creation error:', error);\n        return NextResponse.json(\n          { error: 'Failed to create equipment assignment' },\n          { status: 500 }\n        );\n      }\n\n      result = assignment;\n    } else {\n      // Vehicle assignment\n      tableName = 'vehicle_assignments';\n      insertData.vehicle_id = vehicle_id;\n\n      const { data: assignment, error } = await supabase\n        .from(tableName)\n        .insert(insertData)\n        .select(`\n          id,\n          vehicle_id,\n          crew_id,\n          project_id,\n          assigned_at,\n          returned_at,\n          daily_rental_cost,\n          notes,\n          created_at,\n          updated_at,\n          vehicle:vehicle_id (\n            id,\n            name,\n            type,\n            model,\n            status\n          ),\n          crew:crew_id (\n            id,\n            name,\n            status\n          ),\n          project:project_id (\n            id,\n            name,\n            status\n          )\n        `)\n        .single();\n\n      if (error) {\n        console.error('Supabase vehicle assignment creation error:', error);\n        return NextResponse.json(\n          { error: 'Failed to create vehicle assignment' },\n          { status: 500 }\n        );\n      }\n\n      result = assignment;\n    }\n\n    console.log(`âœ… Created ${resource_type} assignment:`, {\n      assignmentId: result.id,\n      crewId: crew_id,\n      resourceId: resource_type === 'equipment' ? equipment_id : vehicle_id,\n      projectId: project_id\n    });\n\n    return NextResponse.json({\n      message: `${resource_type.charAt(0).toUpperCase() + resource_type.slice(1)} assignment created successfully`,\n      assignment: result\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Equipment assignment POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create assignment' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}