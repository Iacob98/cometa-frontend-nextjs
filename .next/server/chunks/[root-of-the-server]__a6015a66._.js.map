{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/teams/crews/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Crew ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get crew with all related data\n    const { data: crew, error } = await supabase\n      .from('crews')\n      .select(`\n        id,\n        name,\n        description,\n        status,\n        leader_user_id,\n        created_at,\n        updated_at,\n        leader:users!crews_leader_user_id_fkey(\n          id,\n          first_name,\n          last_name,\n          email,\n          role\n        ),\n        crew_members(\n          id,\n          user_id,\n          role,\n          is_active,\n          joined_at,\n          left_at,\n          user:users(\n            id,\n            first_name,\n            last_name,\n            email,\n            role,\n            phone\n          )\n        )\n      `)\n      .eq('id', id)\n      .eq('crew_members.is_active', true)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Crew not found' },\n          { status: 404 }\n        );\n      }\n      console.error('Supabase crew query error:', error);\n      return NextResponse.json(\n        { error: 'Failed to fetch crew' },\n        { status: 500 }\n      );\n    }\n\n    // Format for frontend compatibility\n    const formattedCrew = {\n      id: crew.id,\n      name: crew.name,\n      description: crew.description || '',\n      status: crew.status || 'active',\n      foreman: crew.leader ? {\n        id: crew.leader.id,\n        full_name: `${crew.leader.first_name} ${crew.leader.last_name}`,\n        first_name: crew.leader.first_name,\n        last_name: crew.leader.last_name,\n        email: crew.leader.email,\n        role: crew.leader.role\n      } : null,\n      members: (crew.crew_members || []).map((member: any) => ({\n        id: member.id,\n        user_id: member.user_id,\n        role: member.role,\n        role_in_crew: member.role, // Add compatibility field for frontend\n        is_active: member.is_active,\n        joined_at: member.joined_at,\n        active_from: member.joined_at, // Add compatibility field for frontend\n        // Flatten user data to member level for frontend compatibility\n        first_name: member.user?.first_name || '',\n        last_name: member.user?.last_name || '',\n        full_name: member.user ? `${member.user.first_name} ${member.user.last_name}` : '',\n        email: member.user?.email || '',\n        phone: member.user?.phone || '',\n        // Keep nested user object for backward compatibility\n        user: member.user ? {\n          id: member.user.id,\n          first_name: member.user.first_name,\n          last_name: member.user.last_name,\n          full_name: `${member.user.first_name} ${member.user.last_name}`,\n          email: member.user.email,\n          role: member.user.role,\n          phone: member.user.phone\n        } : null\n      })),\n      member_count: crew.crew_members?.length || 0,\n      created_at: crew.created_at,\n      updated_at: crew.updated_at\n    };\n\n    return NextResponse.json(formattedCrew);\n  } catch (error) {\n    console.error('Crew GET API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Crew ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Build update data object (only include provided fields)\n    const updateData: any = {};\n\n    if (body.name !== undefined) updateData.name = body.name;\n    if (body.description !== undefined) updateData.description = body.description;\n    if (body.status !== undefined) updateData.status = body.status;\n    if (body.leader_user_id !== undefined) updateData.leader_user_id = body.leader_user_id;\n\n    // Add updated_at timestamp\n    updateData.updated_at = new Date().toISOString();\n\n    // Update the crew\n    const { data: crew, error } = await supabase\n      .from('crews')\n      .update(updateData)\n      .eq('id', id)\n      .select(`\n        id,\n        name,\n        description,\n        status,\n        leader_user_id,\n        created_at,\n        updated_at,\n        leader:users!crews_leader_user_id_fkey(\n          id,\n          first_name,\n          last_name,\n          email,\n          role\n        )\n      `)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return NextResponse.json(\n          { error: 'Crew not found' },\n          { status: 404 }\n        );\n      }\n      console.error('Supabase crew update error:', error);\n      return NextResponse.json(\n        { error: 'Failed to update crew' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: 'Crew updated successfully',\n      crew\n    });\n  } catch (error) {\n    console.error('Crew PUT API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Crew ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Check if crew exists first\n    const { data: existingCrew, error: checkError } = await supabase\n      .from('crews')\n      .select('id, name')\n      .eq('id', id)\n      .single();\n\n    if (checkError || !existingCrew) {\n      return NextResponse.json(\n        { error: 'Crew not found' },\n        { status: 404 }\n      );\n    }\n\n    // Delete the crew (cascade will handle crew_members)\n    const { error } = await supabase\n      .from('crews')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Supabase crew deletion error:', error);\n      return NextResponse.json(\n        { error: 'Failed to delete crew' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: 'Crew deleted successfully',\n      deleted_crew: existingCrew\n    });\n  } catch (error) {\n    console.error('Crew DELETE API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}