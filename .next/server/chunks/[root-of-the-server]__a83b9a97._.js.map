{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/lib/document-expiration.ts"],"sourcesContent":["import { addMonths, differenceInDays, isPast } from 'date-fns';\n\nexport interface DocumentExpirationInfo {\n  status: 'active' | 'expiring_soon' | 'expired';\n  daysUntilExpiry: number;\n  warningLevel: 'none' | 'three_months' | 'two_months' | 'one_month' | 'critical';\n  priority: 'normal' | 'high' | 'urgent';\n  notificationTitle: string;\n  notificationMessage: string;\n}\n\nexport interface Document {\n  id: string;\n  user_id: string;\n  category_id: string;\n  file_name: string;\n  expiry_date: string | null;\n  category?: {\n    name_ru?: string;\n    name_en?: string;\n    required_for_work?: boolean;\n  };\n}\n\n/**\n * Calculates expiration information for a document\n */\nexport function calculateDocumentExpiration(document: Document): DocumentExpirationInfo {\n  const defaultResult: DocumentExpirationInfo = {\n    status: 'active',\n    daysUntilExpiry: Infinity,\n    warningLevel: 'none',\n    priority: 'normal',\n    notificationTitle: '',\n    notificationMessage: ''\n  };\n\n  if (!document.expiry_date) {\n    return defaultResult;\n  }\n\n  const expiryDate = new Date(document.expiry_date);\n  const today = new Date();\n  const daysUntilExpiry = differenceInDays(expiryDate, today);\n\n  // Check if already expired\n  if (isPast(expiryDate)) {\n    return {\n      status: 'expired',\n      daysUntilExpiry: Math.abs(daysUntilExpiry),\n      warningLevel: 'critical',\n      priority: 'urgent',\n      notificationTitle: 'Document Expired',\n      notificationMessage: `Document \"${document.file_name}\" (${document.category?.name_en || 'document'}) expired ${Math.abs(daysUntilExpiry)} days ago`\n    };\n  }\n\n  // Calculate warning levels based on days until expiry\n  const oneMonthInDays = 30;\n  const twoMonthsInDays = 60;\n  const threeMonthsInDays = 90;\n\n  let warningLevel: DocumentExpirationInfo['warningLevel'] = 'none';\n  let priority: DocumentExpirationInfo['priority'] = 'normal';\n  let status: DocumentExpirationInfo['status'] = 'active';\n  let notificationTitle = '';\n  let notificationMessage = '';\n\n  if (daysUntilExpiry <= oneMonthInDays) {\n    warningLevel = 'one_month';\n    priority = 'urgent';\n    status = 'expiring_soon';\n    notificationTitle = '🚨 Critical: Document expiring within a month';\n    notificationMessage = `Document \"${document.file_name}\" (${document.category?.name_en || 'document'}) expires in ${daysUntilExpiry} days`;\n  } else if (daysUntilExpiry <= twoMonthsInDays) {\n    warningLevel = 'two_months';\n    priority = 'high';\n    status = 'expiring_soon';\n    notificationTitle = '⚠️ Warning: Document expiring within 2 months';\n    notificationMessage = `Document \"${document.file_name}\" (${document.category?.name_en || 'document'}) expires in ${daysUntilExpiry} days`;\n  } else if (daysUntilExpiry <= threeMonthsInDays) {\n    warningLevel = 'three_months';\n    priority = 'normal';\n    status = 'expiring_soon';\n    notificationTitle = 'ℹ️ Reminder: Document expiring within 3 months';\n    notificationMessage = `Document \"${document.file_name}\" (${document.category?.name_en || 'document'}) expires in ${daysUntilExpiry} days`;\n  }\n\n  return {\n    status,\n    daysUntilExpiry,\n    warningLevel,\n    priority,\n    notificationTitle,\n    notificationMessage\n  };\n}\n\n/**\n * Calculates expiration information for multiple documents\n */\nexport function calculateDocumentsExpiration(documents: Document[]): {\n  expirationInfo: (Document & DocumentExpirationInfo)[];\n  summary: {\n    total: number;\n    active: number;\n    expiring_soon: number;\n    expired: number;\n    critical_count: number;\n    urgent_count: number;\n    high_priority_count: number;\n  };\n} {\n  const expirationInfo = documents.map(doc => ({\n    ...doc,\n    ...calculateDocumentExpiration(doc)\n  }));\n\n  const summary = {\n    total: documents.length,\n    active: expirationInfo.filter(doc => doc.status === 'active').length,\n    expiring_soon: expirationInfo.filter(doc => doc.status === 'expiring_soon').length,\n    expired: expirationInfo.filter(doc => doc.status === 'expired').length,\n    critical_count: expirationInfo.filter(doc => doc.warningLevel === 'critical').length,\n    urgent_count: expirationInfo.filter(doc => doc.priority === 'urgent').length,\n    high_priority_count: expirationInfo.filter(doc => doc.priority === 'high').length\n  };\n\n  return { expirationInfo, summary };\n}\n\n/**\n * Generates notifications for expiring documents\n */\nexport function generateExpirationNotifications(documents: Document[]): Array<{\n  user_id: string;\n  title: string;\n  message: string;\n  notification_type: string;\n  priority: 'normal' | 'high' | 'urgent';\n  action_url: string;\n  action_label: string;\n  document_id: string;\n  warning_level: string;\n}> {\n  const notifications: Array<{\n    user_id: string;\n    title: string;\n    message: string;\n    notification_type: string;\n    priority: 'normal' | 'high' | 'urgent';\n    action_url: string;\n    action_label: string;\n    document_id: string;\n    warning_level: string;\n  }> = [];\n\n  documents.forEach(document => {\n    const expiration = calculateDocumentExpiration(document);\n\n    // Only create notifications for documents that need warnings\n    if (expiration.warningLevel !== 'none') {\n      notifications.push({\n        user_id: document.user_id,\n        title: expiration.notificationTitle,\n        message: expiration.notificationMessage,\n        notification_type: 'info', // Use 'info' as standard type\n        priority: expiration.priority,\n        action_url: `/dashboard/teams/${document.user_id}`, // Navigate to user's documents\n        action_label: 'View Documents',\n        document_id: document.id,\n        warning_level: expiration.warningLevel\n      });\n    }\n  });\n\n  return notifications;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/lib/document-storage.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { calculateDocumentsExpiration } from './document-expiration';\n\n// Persistent storage directories\nconst STORAGE_DIR = path.join(process.cwd(), '.tmp', 'documents');\nconst METADATA_FILE = path.join(STORAGE_DIR, 'metadata.json');\n\n// Ensure storage directory exists\nif (!fs.existsSync(STORAGE_DIR)) {\n  fs.mkdirSync(STORAGE_DIR, { recursive: true });\n}\n\n// Load metadata from file or initialize empty\nlet uploadedDocuments: Record<string, any[]> = {};\ntry {\n  if (fs.existsSync(METADATA_FILE)) {\n    const data = fs.readFileSync(METADATA_FILE, 'utf8');\n    uploadedDocuments = JSON.parse(data);\n  }\n} catch (error) {\n  console.warn('Could not load document metadata:', error);\n  uploadedDocuments = {};\n}\n\n// Save metadata to file\nfunction saveMetadata() {\n  try {\n    fs.writeFileSync(METADATA_FILE, JSON.stringify(uploadedDocuments, null, 2));\n  } catch (error) {\n    console.error('Could not save document metadata:', error);\n  }\n}\n\n// Helper functions for document storage\nexport function storeDocument(userId: string, document: any) {\n  if (!uploadedDocuments[userId]) {\n    uploadedDocuments[userId] = [];\n  }\n  uploadedDocuments[userId].push(document);\n  saveMetadata(); // Save to file\n  console.log('📝 Document stored:', {\n    userId,\n    documentId: document.id,\n    fileName: document.file_name,\n    totalUserDocs: uploadedDocuments[userId].length\n  });\n}\n\nexport function storeFile(documentId: string, fileBuffer: Buffer) {\n  const filePath = path.join(STORAGE_DIR, `${documentId}.bin`);\n  try {\n    fs.writeFileSync(filePath, fileBuffer);\n    console.log('💾 File stored:', {\n      documentId,\n      fileSize: fileBuffer.length,\n      filePath\n    });\n  } catch (error) {\n    console.error('Error storing file:', error);\n  }\n}\n\nexport function getDocument(userId: string, documentId: string) {\n  const userDocuments = uploadedDocuments[userId] || [];\n  const document = userDocuments.find(doc => doc.id === documentId);\n  console.log('🔍 Get document:', {\n    userId,\n    documentId,\n    totalUserDocs: userDocuments.length,\n    found: !!document,\n    fileName: document?.file_name\n  });\n  return document;\n}\n\nexport function getFile(documentId: string) {\n  const filePath = path.join(STORAGE_DIR, `${documentId}.bin`);\n  try {\n    if (fs.existsSync(filePath)) {\n      const file = fs.readFileSync(filePath);\n      console.log('🔍 Get file:', {\n        documentId,\n        filePath,\n        found: true,\n        fileSize: file.length\n      });\n      return file;\n    } else {\n      console.log('🔍 Get file:', {\n        documentId,\n        filePath,\n        found: false,\n        fileSize: undefined\n      });\n      return null;\n    }\n  } catch (error) {\n    console.error('Error reading file:', error);\n    return null;\n  }\n}\n\nexport function deleteDocument(userId: string, documentId: string) {\n  const userDocuments = uploadedDocuments[userId] || [];\n  const documentIndex = userDocuments.findIndex(doc => doc.id === documentId);\n\n  if (documentIndex !== -1) {\n    const deletedDoc = userDocuments.splice(documentIndex, 1)[0];\n    saveMetadata(); // Save to file\n\n    // Also delete the file content\n    const filePath = path.join(STORAGE_DIR, `${documentId}.bin`);\n    try {\n      if (fs.existsSync(filePath)) {\n        fs.unlinkSync(filePath);\n      }\n    } catch (error) {\n      console.error('Error deleting file:', error);\n    }\n\n    return deletedDoc;\n  }\n\n  return null;\n}\n\nexport function getUserDocuments(userId: string) {\n  const documents = uploadedDocuments[userId] || [];\n\n  // Calculate expiration info for each document\n  const { expirationInfo } = calculateDocumentsExpiration(documents);\n\n  return expirationInfo;\n}\n\nexport function getAllDocuments() {\n  const allDocuments: any[] = [];\n\n  Object.values(uploadedDocuments).forEach(userDocs => {\n    allDocuments.push(...userDocs);\n  });\n\n  return allDocuments;\n}\n\nexport function getAllDocumentsWithExpiration() {\n  const allDocuments = getAllDocuments();\n  return calculateDocumentsExpiration(allDocuments);\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;AAEA,iCAAiC;AACjC,MAAM,cAAc,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;AACrD,MAAM,gBAAgB,4GAAI,CAAC,IAAI,CAAC,aAAa;AAE7C,kCAAkC;AAClC,IAAI,CAAC,wGAAE,CAAC,UAAU,CAAC,cAAc;IAC/B,wGAAE,CAAC,SAAS,CAAC,aAAa;QAAE,WAAW;IAAK;AAC9C;AAEA,8CAA8C;AAC9C,IAAI,oBAA2C,CAAC;AAChD,IAAI;IACF,IAAI,wGAAE,CAAC,UAAU,CAAC,gBAAgB;QAChC,MAAM,OAAO,wGAAE,CAAC,YAAY,CAAC,eAAe;QAC5C,oBAAoB,KAAK,KAAK,CAAC;IACjC;AACF,EAAE,OAAO,OAAO;IACd,QAAQ,IAAI,CAAC,qCAAqC;IAClD,oBAAoB,CAAC;AACvB;AAEA,wBAAwB;AACxB,SAAS;IACP,IAAI;QACF,wGAAE,CAAC,aAAa,CAAC,eAAe,KAAK,SAAS,CAAC,mBAAmB,MAAM;IAC1E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;IACrD;AACF;AAGO,SAAS,cAAc,MAAc,EAAE,QAAa;IACzD,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE;QAC9B,iBAAiB,CAAC,OAAO,GAAG,EAAE;IAChC;IACA,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC;IAC/B,gBAAgB,eAAe;IAC/B,QAAQ,GAAG,CAAC,uBAAuB;QACjC;QACA,YAAY,SAAS,EAAE;QACvB,UAAU,SAAS,SAAS;QAC5B,eAAe,iBAAiB,CAAC,OAAO,CAAC,MAAM;IACjD;AACF;AAEO,SAAS,UAAU,UAAkB,EAAE,UAAkB;IAC9D,MAAM,WAAW,4GAAI,CAAC,IAAI,CAAC,aAAa,GAAG,WAAW,IAAI,CAAC;IAC3D,IAAI;QACF,wGAAE,CAAC,aAAa,CAAC,UAAU;QAC3B,QAAQ,GAAG,CAAC,mBAAmB;YAC7B;YACA,UAAU,WAAW,MAAM;YAC3B;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;IACvC;AACF;AAEO,SAAS,YAAY,MAAc,EAAE,UAAkB;IAC5D,MAAM,gBAAgB,iBAAiB,CAAC,OAAO,IAAI,EAAE;IACrD,MAAM,WAAW,cAAc,IAAI,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;IACtD,QAAQ,GAAG,CAAC,oBAAoB;QAC9B;QACA;QACA,eAAe,cAAc,MAAM;QACnC,OAAO,CAAC,CAAC;QACT,UAAU,UAAU;IACtB;IACA,OAAO;AACT;AAEO,SAAS,QAAQ,UAAkB;IACxC,MAAM,WAAW,4GAAI,CAAC,IAAI,CAAC,aAAa,GAAG,WAAW,IAAI,CAAC;IAC3D,IAAI;QACF,IAAI,wGAAE,CAAC,UAAU,CAAC,WAAW;YAC3B,MAAM,OAAO,wGAAE,CAAC,YAAY,CAAC;YAC7B,QAAQ,GAAG,CAAC,gBAAgB;gBAC1B;gBACA;gBACA,OAAO;gBACP,UAAU,KAAK,MAAM;YACvB;YACA,OAAO;QACT,OAAO;YACL,QAAQ,GAAG,CAAC,gBAAgB;gBAC1B;gBACA;gBACA,OAAO;gBACP,UAAU;YACZ;YACA,OAAO;QACT;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO;IACT;AACF;AAEO,SAAS,eAAe,MAAc,EAAE,UAAkB;IAC/D,MAAM,gBAAgB,iBAAiB,CAAC,OAAO,IAAI,EAAE;IACrD,MAAM,gBAAgB,cAAc,SAAS,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;IAEhE,IAAI,kBAAkB,CAAC,GAAG;QACxB,MAAM,aAAa,cAAc,MAAM,CAAC,eAAe,EAAE,CAAC,EAAE;QAC5D,gBAAgB,eAAe;QAE/B,+BAA+B;QAC/B,MAAM,WAAW,4GAAI,CAAC,IAAI,CAAC,aAAa,GAAG,WAAW,IAAI,CAAC;QAC3D,IAAI;YACF,IAAI,wGAAE,CAAC,UAAU,CAAC,WAAW;gBAC3B,wGAAE,CAAC,UAAU,CAAC;YAChB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;QACxC;QAEA,OAAO;IACT;IAEA,OAAO;AACT;AAEO,SAAS,iBAAiB,MAAc;IAC7C,MAAM,YAAY,iBAAiB,CAAC,OAAO,IAAI,EAAE;IAEjD,8CAA8C;IAC9C,MAAM,EAAE,cAAc,EAAE,GAAG,IAAA,sKAA4B,EAAC;IAExD,OAAO;AACT;AAEO,SAAS;IACd,MAAM,eAAsB,EAAE;IAE9B,OAAO,MAAM,CAAC,mBAAmB,OAAO,CAAC,CAAA;QACvC,aAAa,IAAI,IAAI;IACvB;IAEA,OAAO;AACT;AAEO,SAAS;IACd,MAAM,eAAe;IACrB,OAAO,IAAA,sKAA4B,EAAC;AACtC","debugId":null}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/T7/cometa/cometa-separated-projects/cometa-frontend-nextjs/src/app/api/notifications/document-expiration/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\nimport { getAllDocumentsWithExpiration } from '@/lib/document-storage';\nimport { generateExpirationNotifications } from '@/lib/document-expiration';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get all documents with expiration info\n    const { expirationInfo, summary } = getAllDocumentsWithExpiration();\n\n    return NextResponse.json({\n      documents: expirationInfo,\n      summary\n    });\n  } catch (error) {\n    console.error('Document expiration API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to get document expiration info' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { force = false } = body;\n\n    // Get all documents with expiration info\n    const { expirationInfo } = getAllDocumentsWithExpiration();\n\n    // Generate notifications for expiring documents\n    const notifications = generateExpirationNotifications(expirationInfo);\n\n    if (notifications.length === 0) {\n      return NextResponse.json({\n        message: 'No expiring documents found',\n        notifications_created: 0\n      });\n    }\n\n    // Check if we should only create new notifications or force create all\n    const existingNotificationsQuery = await supabase\n      .from('in_app_notifications')\n      .select('id, user_id, title')\n      .eq('notification_type', 'info')\n      .ilike('title', '%Document expiring%')\n      .eq('is_read', false);\n\n    let filteredNotifications = notifications;\n\n    if (!force && existingNotificationsQuery.data) {\n      // Filter out notifications that already exist with the same title for the same user\n      const existingMap = new Map();\n      existingNotificationsQuery.data.forEach(notif => {\n        const key = `${notif.user_id}-${notif.title}`;\n        existingMap.set(key, true);\n      });\n\n      filteredNotifications = notifications.filter(notif => {\n        const key = `${notif.user_id}-${notif.title}`;\n        return !existingMap.has(key);\n      });\n    }\n\n    if (filteredNotifications.length === 0) {\n      return NextResponse.json({\n        message: 'All expiration notifications already exist',\n        notifications_created: 0,\n        existing_notifications: existingNotificationsQuery.data?.length || 0\n      });\n    }\n\n    // Create notifications in database\n    const notificationsToInsert = filteredNotifications.map(notif => ({\n      user_id: notif.user_id,\n      title: notif.title,\n      message: notif.message,\n      notification_type: notif.notification_type,\n      priority: notif.priority,\n      is_read: false,\n      action_url: notif.action_url,\n      action_label: notif.action_label,\n      expires_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days\n      created_at: new Date().toISOString()\n    }));\n\n    const { data: createdNotifications, error } = await supabase\n      .from('in_app_notifications')\n      .insert(notificationsToInsert)\n      .select();\n\n    if (error) {\n      console.error('Supabase notification creation error:', error);\n      return NextResponse.json(\n        { error: 'Failed to create notifications in database' },\n        { status: 500 }\n      );\n    }\n\n    console.log(`✅ Created ${createdNotifications?.length || 0} document expiration notifications`);\n\n    return NextResponse.json({\n      message: 'Document expiration notifications created successfully',\n      notifications_created: createdNotifications?.length || 0,\n      total_expiring_documents: notifications.length,\n      notifications: createdNotifications\n    }, { status: 201 });\n\n  } catch (error) {\n    console.error('Document expiration notifications POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create document expiration notifications' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}