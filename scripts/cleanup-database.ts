#!/usr/bin/env tsx

/**
 * COMETA Database Cleanup Script
 *
 * This script cleans up old tables and resets the database to a fresh state.
 *
 * Usage:
 *   npm run cleanup:db
 *   or
 *   npx tsx scripts/cleanup-database.ts
 */

import 'dotenv/config'
import { createClient } from '@supabase/supabase-js'

// Admin client with service_role key
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
)

async function listTables(): Promise<string[]> {
  try {
    const { data, error } = await supabaseAdmin
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .neq('table_name', 'migrations')

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü:', error)
      return []
    }

    return data?.map(row => row.table_name) || []
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error)
    return []
  }
}

async function listStorageBuckets(): Promise<string[]> {
  try {
    const { data, error } = await supabaseAdmin.storage.listBuckets()

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ bucket\'–æ–≤:', error)
      return []
    }

    return data?.map(bucket => bucket.name) || []
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error)
    return []
  }
}

async function dropTable(tableName: string): Promise<boolean> {
  try {
    const { error } = await supabaseAdmin.rpc('exec_sql', {
      sql: `DROP TABLE IF EXISTS "${tableName}" CASCADE;`
    })

    if (error) {
      console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error)
      return false
    }

    return true
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error)
    return false
  }
}

async function deleteBucket(bucketName: string): Promise<boolean> {
  try {
    // First, delete all files in the bucket
    const { data: files } = await supabaseAdmin.storage
      .from(bucketName)
      .list()

    if (files && files.length > 0) {
      const filePaths = files.map(file => file.name)
      await supabaseAdmin.storage
        .from(bucketName)
        .remove(filePaths)
    }

    // Then delete the bucket
    const { error } = await supabaseAdmin.storage.deleteBucket(bucketName)

    if (error) {
      console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è bucket'–∞ ${bucketName}:`, error)
      return false
    }

    return true
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è bucket'–∞ ${bucketName}:`, error)
    return false
  }
}

async function main() {
  console.log('üßπ COMETA Database Cleanup')
  console.log('==========================')
  console.log('')

  // Check environment variables
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase')
    process.exit(1)
  }

  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
  console.log(`   - Supabase URL: ${process.env.NEXT_PUBLIC_SUPABASE_URL}`)
  console.log('')

  try {
    // List existing tables
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü...')
    const tables = await listTables()
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`)
    tables.forEach(table => console.log(`   - ${table}`))
    console.log('')

    // List existing storage buckets
    console.log('üóÇÔ∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ storage bucket\'–æ–≤...')
    const buckets = await listStorageBuckets()
    console.log(`–ù–∞–π–¥–µ–Ω–æ bucket'–æ–≤: ${buckets.length}`)
    buckets.forEach(bucket => console.log(`   - ${bucket}`))
    console.log('')

    // Ask for confirmation
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–∞–Ω–Ω—ã–µ!')
    console.log('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no)')

    // For automated execution, skip confirmation
    const shouldCleanup = process.argv.includes('--force') || process.env.NODE_ENV === 'development'

    if (!shouldCleanup) {
      console.log('‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏.')
      process.exit(0)
    }

    console.log('üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    console.log('')

    // Drop tables
    let droppedTables = 0
    for (const table of tables) {
      console.log(`–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${table}`)
      const success = await dropTable(table)
      if (success) {
        droppedTables++
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞: ${table}`)
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${table}`)
      }
    }

    // Delete storage buckets
    let deletedBuckets = 0
    for (const bucket of buckets) {
      console.log(`–£–¥–∞–ª–µ–Ω–∏–µ bucket'–∞: ${bucket}`)
      const success = await deleteBucket(bucket)
      if (success) {
        deletedBuckets++
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${bucket}`)
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${bucket}`)
      }
    }

    console.log('')
    console.log('üéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!')
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${droppedTables}/${tables.length}`)
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ bucket'–æ–≤: ${deletedBuckets}/${buckets.length}`)
    console.log('')
    console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å:')
    console.log('1. npm run init:storage  # –°–æ–∑–¥–∞—Ç—å storage bucket\'—ã')
    console.log('2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    console.log('')

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error)
    process.exit(1)
  }
}

// Run the script
main().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
  process.exit(1)
})