#!/usr/bin/env tsx

import 'dotenv/config'
import { createClient } from '@supabase/supabase-js'

// Admin client
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
)

async function inspectDatabase() {
  console.log('üîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö COMETA')
  console.log('==============================')
  console.log('')

  try {
    // Get list of tables
    const { data: tablesData, error: tablesError } = await supabaseAdmin
      .rpc('sql', {
        query: `
          SELECT table_name
          FROM information_schema.tables
          WHERE table_schema = 'public'
          AND table_type = 'BASE TABLE'
          ORDER BY table_name;
        `
      })

    if (tablesError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', tablesError)
    } else {
      console.log('üìã –¢–ê–ë–õ–ò–¶–´ –í PUBLIC –°–•–ï–ú–ï:')
      if (tablesData && tablesData.length > 0) {
        tablesData.forEach((row: any, index: number) => {
          console.log(`   ${index + 1}. ${row.table_name}`)
        })
      } else {
        console.log('   –¢–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      }
    }

    console.log('')

    // Get storage buckets
    const { data: bucketsData, error: bucketsError } = await supabaseAdmin.storage.listBuckets()

    console.log('üóÇÔ∏è  STORAGE BUCKET\'–´:')
    if (bucketsError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è bucket\'–æ–≤:', bucketsError)
    } else if (bucketsData && bucketsData.length > 0) {
      bucketsData.forEach((bucket, index) => {
        console.log(`   ${index + 1}. ${bucket.name} (public: ${bucket.public})`)
      })
    } else {
      console.log('   Bucket\'–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    }

    console.log('')

    // Get functions/procedures
    const { data: functionsData, error: functionsError } = await supabaseAdmin
      .rpc('sql', {
        query: `
          SELECT routine_name, routine_type
          FROM information_schema.routines
          WHERE routine_schema = 'public'
          ORDER BY routine_name;
        `
      })

    if (functionsError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π:', functionsError)
    } else {
      console.log('‚öôÔ∏è  –§–£–ù–ö–¶–ò–ò –ò –ü–†–û–¶–ï–î–£–†–´:')
      if (functionsData && functionsData.length > 0) {
        functionsData.forEach((row: any, index: number) => {
          console.log(`   ${index + 1}. ${row.routine_name} (${row.routine_type})`)
        })
      } else {
        console.log('   –§—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      }
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏:', error)
  }
}

inspectDatabase()